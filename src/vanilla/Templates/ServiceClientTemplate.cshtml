@using AutoRest.Ruby.vanilla.Templates
@using System.Linq
@using AutoRest.Ruby
@inherits AutoRest.Core.Template<AutoRest.Ruby.Model.CodeModelRb>
# encoding: utf-8
@Header("# ")
@EmptyLine
module @Settings.Namespace
  #
  # A service client - single point of access to the REST API.
  #
  class @Model.Name < @Model.BaseType

@foreach (var include in Model.Includes)
{
    @:include @include
}
    @Model.IncludeSerializer
    @EmptyLine

    # @@return [String] the base URI of the service.
    @(Model.IsCustomBaseUri ? "attr_reader" : "attr_accessor") :base_url
@EmptyLine

@foreach (var property in Model.Properties)
{
    @:@WrapComment("# ", string.Format("@return {0}{1}", property.ModelType.GetYardDocumentation(), property.Documentation))
    @:@(property.IsReadOnly ? "attr_reader" : "attr_accessor") :@property.Name
@EmptyLine
}

@foreach (var operation in Model.Operations.Where(each => !each.IsCodeModelMethodGroup))
{
    @:@WrapComment("# ", string.Format("@return [{0}] {1}", operation.TypeName, Model.CodeNamer.UnderscoreCase(operation.TypeName)))
    @:attr_reader :@(Model.CodeNamer.UnderscoreCase(operation.TypeName))
@EmptyLine
}

    #
    # Creates initializes a new instance of the @Model.Name class.
    # @@param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    @if (!Model.IsCustomBaseUri)
    {
    @:# @@param base_url [String] the base URI of the service.
    }
    # @@param options [Array] filters to be applied to the HTTP requests.
    #
    @if (!Model.IsCustomBaseUri)
    {
    @:def initialize(credentials = nil, base_url = nil, options = nil)
    }
    else
    {
    @:def initialize(credentials = nil, options = nil)
    }
      super(credentials, options)
      @if (!Model.IsCustomBaseUri)
      {
      @:@@base_url = base_url || '@Model.BaseUrl'
      }
      else
      {
      @:@@base_url = '@Model.BaseUrl'
      }
      @EmptyLine
      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials) unless credentials.nil?
      @@credentials = credentials
      @EmptyLine
      @foreach (var operation in Model.Operations.Where( each => !each.IsCodeModelMethodGroup))
      {
      @:@@@(Model.CodeNamer.UnderscoreCase(operation.TypeName)) = @(operation.TypeName).new(self)
      }

      @foreach (var property in Model.Properties.Where(p => p.DefaultValue != null))
      {
      @:@@@(property.Name) = @(property.DefaultValue)
      }
      add_telemetry
    end

    @EmptyLine
    #
    # Makes a request and returns the body of the response.
    # @@param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete. 
    # @@param path [String] the path, relative to {base_url}.
    # @@param options [Hash{String=>String}] specifying any request options like :body.
    # @@return [Hash{String=>String}] containing the body of the response.
    # Example:
    #
    #  request_content = "{'location':'westus','tags':{'tag1':'val1','tag2':'val2'}}"
    #  path = "/path"
    #  options = {
    #    body: request_content,
    #    query_params: {'api-version' => '2016-02-01'}
    #  }
    #  result = @@client.make_request(:put, path, options)
    #
    def make_request(method, path, options = {})
      result = make_request_with_http_info(method, path, options)
      result.body unless result.nil?
    end

    @EmptyLine
    #
    # Makes a request and returns the operation response.
    # @@param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @@param path [String] the path, relative to {base_url}.
    # @@param options [Hash{String=>String}] specifying any request options like :body.
    # @@return [@(Model.OperationResponseString)] Operation response containing the request, response and status.
    #
    def make_request_with_http_info(method, path, options = {})
      result = make_request_async(method, path, options).value!
      result.body = result.response.body.to_s.empty? ? nil : JSON.load(result.response.body)
      result
    end

    @EmptyLine
    #
    # Makes a request asynchronously.
    # @@param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @@param path [String] the path, relative to {base_url}.
    # @@param options [Hash{String=>String}] specifying any request options like :body.
    # @@return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def make_request_async(method, path, options = {})
      fail ArgumentError, 'method is nil' if method.nil?
      fail ArgumentError, 'path is nil' if path.nil?

      @EmptyLine
      request_url = options[:base_url] || @@base_url

      @EmptyLine
      request_headers = @@request_headers
      @Model.MergeClientDefaultHeaders
      options.merge!({headers: request_headers.merge(options[:headers] || {})})
      options.merge!({credentials: @@credentials}) unless @@credentials.nil?

      @EmptyLine
      super(request_url, method, path, options)
    end

    @EmptyLine
    @foreach (var method in Model.MethodTemplateModels)
    {
    @:@(Include(new MethodTemplate(), method))
    @EmptyLine
    @:
    }

    @EmptyLine
    private
    #
    # Adds telemetry information.
    #
    def add_telemetry
        sdk_information = '@GeneratorSettingsRb.Instance.sdkPath'
        if defined? @Settings.Namespace::VERSION
          sdk_information = "#{sdk_information}/#{@Settings.Namespace::VERSION}" 
        end
        add_user_agent_information(sdk_information)
    end
  end
end
