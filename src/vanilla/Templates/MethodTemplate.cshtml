@using System
@using System.Linq;
@using AutoRest.Ruby;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@inherits AutoRest.Core.Template<AutoRest.Ruby.Model.MethodRb>

#
@if (!String.IsNullOrEmpty(Model.Summary))
{
  @WrapComment("# ", Model.Summary)@:
@:#
}
@if (!String.IsNullOrEmpty(Model.Description))
{
  @WrapComment("# ", Model.Description)@:
@:#
}
@foreach (var parameter in Model.MethodParameters)
{
@:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.ModelType.GetYardDocumentation(), parameter.Documentation))
}
@WrapComment("# ", string.Format("@param custom_headers [{0}] A hash of custom headers that will be added to the HTTP request.", "Hash{String => String}"))
#
@if (Model.ReturnType.Body != null)
{
@WrapComment("# ", string.Format("@return [{0}] operation results.", Model.OperationReturnTypeString))@:
}
#
def @(Model.Name)(@(Model.MethodParameterDeclaration))
  @Model.ResponseGeneration()
end

@EmptyLine
#
@if (!String.IsNullOrEmpty(Model.Summary))
{
    @WrapComment("# ", Model.Summary)@:
@:#
}
@if (!String.IsNullOrEmpty(Model.Description))
{
  @WrapComment("# ", Model.Description)@:
@:#
}
@foreach (var parameter in Model.MethodParameters)
{
@:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.ModelType.GetYardDocumentation(), parameter.Documentation))
}
@WrapComment("# ", string.Format("@param custom_headers [{0}] A hash of custom headers that will be added to the HTTP request.", "Hash{String => String}"))
#
@WrapComment("# ", string.Format("@return [{0}] HTTP response information.", Model.OperationResponseReturnTypeString))
#
def @(Model.Name)_with_http_info(@(Model.MethodParameterDeclaration))
  @(Model.Name)_async(@(Model.MethodParameterInvocation)).value!
end


@EmptyLine
#
@if (!String.IsNullOrEmpty(Model.Summary))
{
  @WrapComment("# ", Model.Summary)@:
@:#
}
@if (!String.IsNullOrEmpty(Model.Description))
{
  @WrapComment("# ", Model.Description)@:
@:#
}
@foreach (var parameter in Model.MethodParameters)
{
@:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.ModelType.GetYardDocumentation(), parameter.Documentation))
}
@WrapComment("# ", string.Format("@param [{0}] A hash of custom headers that will be added to the HTTP request.", "Hash{String => String}"))
#
@WrapComment("# ", string.Format("@return [{0}] Promise object which holds the HTTP response.", "Concurrent::Promise"))
#
def @(Model.Name)_async(@(Model.MethodParameterDeclaration))
  @foreach (var parameter in Model.ParameterTemplateModels)
  {
    if (parameter.IsRequired && !parameter.IsConstant)
    {
  @:fail ArgumentError, '@parameter.Name is nil' if @(parameter.Name).nil?
  @:
    }
      if (parameter.IsConstant)
      {
  @:@(parameter.Name) = @(parameter.DefaultValue)
     } 
}
@EmptyLine
@(Model.BuildInputParameterMappings())
@EmptyLine
  request_headers = {}
@if (Model.LogicalParameters.Any(p => p.Location == ParameterLocation.Header))
{
  @EmptyLine
  @:# Set Headers
  @:@(Model.SetDefaultHeaders)
  foreach (var parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.Header))
  {
    if (parameter.SerializedName.EqualsIgnoreCase("Content-Type"))
    {
  @:fail RuntimeError, 'Header Content-Type is forbidden to change'
    }
  @:request_headers['@(parameter.SerializedName)'] = @(parameter.ModelType.ToString(parameter.Name)) unless @(parameter.ModelType.ToString(parameter.Name)).nil?
  }
}

@if (Model.RequestBody != null)
{
  @EmptyLine
  @:request_headers['Content-Type'] = '@(Model.RequestContentType)'
  @EmptyLine
  @:# Serialize Request
  @:@Model.ConstructRequestBodyMapper("request_mapper")
  @:request_content = @(Model.ClientReference).serialize(request_mapper,  @(Model.RequestBody.Name))
  @:request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil
  @EmptyLine
}

  path_template = '@((Model.Url.StartsWith("/") ? Model.Url.TrimStart('/') : (string)Model.Url))'

@EmptyLine
  request_url = @@base_url || @(Model.ClientReference).base_url
@(Model.BuildUrl("request_url"))
@EmptyLine

  options = {
      middlewares: [@string.Join(", ", Model.FaradayMiddlewares)],
@if (Model.EncodingPathParams.Any())
{
      @:path_params: @(Model.PathParamsRbDict),
}
@if (Model.SkipEncodingPathParams.Any())
{
      @:skip_encoding_path_params: @(Model.SkipEncodingPathParamsRbDict),
}
@if (Model.EncodingQueryParams.Any())
{
      @:query_params: @(Model.QueryParamsRbDict),
}
@if (Model.SkipEncodingQueryParams.Any())
{
      @:skip_encoding_query_params: @(Model.SkipEncodingQueryParamsRbDict),
}
@if (Model.RequestBody != null)
{
      @:body: request_content,
}
      headers: request_headers.merge(custom_headers || {}),
      base_url: request_url
  }
  
  promise = @(Model.ClientReference).make_request_async(:@Model.HttpMethod.ToString().ToLower(), path_template, options)

  @EmptyLine
  promise = promise.then do |result|
    http_response = result.response
    status_code = http_response.status
    response_content = http_response.body
    unless @Model.SuccessStatusCodePredicate
      error_model = JSON.load(response_content)
      fail @(Model.OperationExceptionTypeString).new(result.request, http_response, error_model)
    end

    @EmptyLine
    @Model.InitializeResponseBody 

    @foreach (var responsePair in Model.Responses.Where(r => r.Value.Body != null && r.Value.Body.IsSerializable()))
    {
    <text>
    # Deserialize Response
    if status_code == @Model.GetStatusCodeReference(responsePair.Key)
      begin
        @(Model.CreateDeserializationString("response_content", responsePair.Value.Body, "result.body"))
      rescue Exception => e
        fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
      end
    end
    </text>
    }

    @if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any() && Model.DefaultResponse.Body.IsSerializable())
    {
    <text>
    begin
      @(Model.CreateDeserializationString("response_content", Model.ReturnType.Body, "result.body"))
    rescue Exception => e
      fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
    end
    </text>
    }

    @EmptyLine
    result
  end

  @EmptyLine
  promise.execute
end
