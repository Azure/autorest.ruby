@using System
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.Ruby
@using AutoRest.Ruby.Model
@inherits AutoRest.Core.Template<AutoRest.Ruby.Model.CompositeTypeRb>
# encoding: utf-8
@Header("# ")
@EmptyLine
module @(Settings.Namespace)
  module Models
    #
    @WrapComment("# ", Model.BuildSummaryAndDescriptionString())
    #
    class @Model.Name@(Model.GetBaseTypeName())
    @if (Model.Includes.Any())
    {
      @EmptyLine
        foreach (var include in Model.Includes)
        {
      @:include @include
        }
      @EmptyLine
    }
    
    @if (Model.BaseIsPolymorphic && Model.BaseModelType == null)
    {
      @:@@@@discriminatorMap = Hash.new
      foreach (var derivedType in Model.DerivedTypes)
      {
      @:@@@@discriminatorMap["@derivedType.SerializedName"] = "@derivedType.Name"
      }
    }
    
    @if (Model.BaseIsPolymorphic)
    {
    @EmptyLine
      @:def initialize
      @:  @@@Model.PolymorphicDiscriminatorProperty.Name = "@Model.SerializedName"
      @:end
    @EmptyLine
      @:attr_accessor :@Model.PolymorphicDiscriminatorProperty.Name
    @EmptyLine
    }
    
    @foreach (var property in Model.PropertyTemplateModels.Where( each => !each.IsPolymorphicDiscriminator))
    {
      @:@WrapComment("# ", string.Format("@return {0}{1}", property.ModelType.GetYardDocumentation(), CompositeTypeRb.GetPropertyDocumentationString(property)))
      // @:@(property.IsReadOnly ? "attr_reader" : "attr_accessor") :@property.Name
      @:attr_accessor :@property.Name
      @EmptyLine
      @:
    }

      @EmptyLine
      #
      @WrapComment("# ", string.Format("Mapper for {0} class as Ruby Hash.", Model.Name))
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        @(Model.ConstructModelMapper())
      end
    end
  end
end
