# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module PagingModule
  #
  # Long-running Operation for AutoRest
  #
  class Paging
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Paging class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestPagingTestService] reference to the AutoRestPagingTestService
    attr_reader :client

    #
    # A paging operation that finishes on the first call without a nextlink
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def get_single_pages(custom_headers = nil)
      first_page = get_single_pages_as_lazy(custom_headers)
      first_page.get_all_items
    end

    #
    # A paging operation that finishes on the first call without a nextlink
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_single_pages_with_http_info(custom_headers = nil)
      get_single_pages_async(custom_headers).value!
    end

    #
    # A paging operation that finishes on the first call without a nextlink
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_single_pages_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'paging/single'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param client_request_id [String]
    # @param paging_get_multiple_pages_options [PagingGetMultiplePagesOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def get_multiple_pages(client_request_id = nil, paging_get_multiple_pages_options = nil, custom_headers = nil)
      first_page = get_multiple_pages_as_lazy(client_request_id, paging_get_multiple_pages_options, custom_headers)
      first_page.get_all_items
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param client_request_id [String]
    # @param paging_get_multiple_pages_options [PagingGetMultiplePagesOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_with_http_info(client_request_id = nil, paging_get_multiple_pages_options = nil, custom_headers = nil)
      get_multiple_pages_async(client_request_id, paging_get_multiple_pages_options, custom_headers).value!
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param client_request_id [String]
    # @param paging_get_multiple_pages_options [PagingGetMultiplePagesOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_async(client_request_id = nil, paging_get_multiple_pages_options = nil, custom_headers = nil)

      maxresults = nil
      timeout = nil
      unless paging_get_multiple_pages_options.nil?
        maxresults = paging_get_multiple_pages_options.maxresults
      end
      unless paging_get_multiple_pages_options.nil?
        timeout = paging_get_multiple_pages_options.timeout
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['client-request-id'] = client_request_id unless client_request_id.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['maxresults'] = maxresults.to_s unless maxresults.to_s.nil?
      request_headers['timeout'] = timeout.to_s unless timeout.to_s.nil?
      path_template = 'paging/multiple'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that includes a nextLink in odata format that has 10 pages
    #
    # @param client_request_id [String]
    # @param paging_get_odata_multiple_pages_options
    # [PagingGetOdataMultiplePagesOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def get_odata_multiple_pages(client_request_id = nil, paging_get_odata_multiple_pages_options = nil, custom_headers = nil)
      first_page = get_odata_multiple_pages_as_lazy(client_request_id, paging_get_odata_multiple_pages_options, custom_headers)
      first_page.get_all_items
    end

    #
    # A paging operation that includes a nextLink in odata format that has 10 pages
    #
    # @param client_request_id [String]
    # @param paging_get_odata_multiple_pages_options
    # [PagingGetOdataMultiplePagesOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_odata_multiple_pages_with_http_info(client_request_id = nil, paging_get_odata_multiple_pages_options = nil, custom_headers = nil)
      get_odata_multiple_pages_async(client_request_id, paging_get_odata_multiple_pages_options, custom_headers).value!
    end

    #
    # A paging operation that includes a nextLink in odata format that has 10 pages
    #
    # @param client_request_id [String]
    # @param paging_get_odata_multiple_pages_options
    # [PagingGetOdataMultiplePagesOptions] Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_odata_multiple_pages_async(client_request_id = nil, paging_get_odata_multiple_pages_options = nil, custom_headers = nil)

      maxresults = nil
      timeout = nil
      unless paging_get_odata_multiple_pages_options.nil?
        maxresults = paging_get_odata_multiple_pages_options.maxresults
      end
      unless paging_get_odata_multiple_pages_options.nil?
        timeout = paging_get_odata_multiple_pages_options.timeout
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['client-request-id'] = client_request_id unless client_request_id.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['maxresults'] = maxresults.to_s unless maxresults.to_s.nil?
      request_headers['timeout'] = timeout.to_s unless timeout.to_s.nil?
      path_template = 'paging/multiple/odata'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::OdataProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param paging_get_multiple_pages_with_offset_options
    # [PagingGetMultiplePagesWithOffsetOptions] Additional parameters for the
    # operation
    # @param client_request_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def get_multiple_pages_with_offset(paging_get_multiple_pages_with_offset_options, client_request_id = nil, custom_headers = nil)
      first_page = get_multiple_pages_with_offset_as_lazy(paging_get_multiple_pages_with_offset_options, client_request_id, custom_headers)
      first_page.get_all_items
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param paging_get_multiple_pages_with_offset_options
    # [PagingGetMultiplePagesWithOffsetOptions] Additional parameters for the
    # operation
    # @param client_request_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_with_offset_with_http_info(paging_get_multiple_pages_with_offset_options, client_request_id = nil, custom_headers = nil)
      get_multiple_pages_with_offset_async(paging_get_multiple_pages_with_offset_options, client_request_id, custom_headers).value!
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param paging_get_multiple_pages_with_offset_options
    # [PagingGetMultiplePagesWithOffsetOptions] Additional parameters for the
    # operation
    # @param client_request_id [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_with_offset_async(paging_get_multiple_pages_with_offset_options, client_request_id = nil, custom_headers = nil)
      fail ArgumentError, 'paging_get_multiple_pages_with_offset_options is nil' if paging_get_multiple_pages_with_offset_options.nil?

      maxresults = nil
      offset = nil
      timeout = nil
      unless paging_get_multiple_pages_with_offset_options.nil?
        maxresults = paging_get_multiple_pages_with_offset_options.maxresults
      end
      unless paging_get_multiple_pages_with_offset_options.nil?
        offset = paging_get_multiple_pages_with_offset_options.offset
      end
      unless paging_get_multiple_pages_with_offset_options.nil?
        timeout = paging_get_multiple_pages_with_offset_options.timeout
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['client-request-id'] = client_request_id unless client_request_id.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['maxresults'] = maxresults.to_s unless maxresults.to_s.nil?
      request_headers['timeout'] = timeout.to_s unless timeout.to_s.nil?
      path_template = 'paging/multiple/withpath/{offset}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'offset' => offset},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that fails on the first call with 500 and then retries and
    # then get a response including a nextLink that has 10 pages
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def get_multiple_pages_retry_first(custom_headers = nil)
      first_page = get_multiple_pages_retry_first_as_lazy(custom_headers)
      first_page.get_all_items
    end

    #
    # A paging operation that fails on the first call with 500 and then retries and
    # then get a response including a nextLink that has 10 pages
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_retry_first_with_http_info(custom_headers = nil)
      get_multiple_pages_retry_first_async(custom_headers).value!
    end

    #
    # A paging operation that fails on the first call with 500 and then retries and
    # then get a response including a nextLink that has 10 pages
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_retry_first_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'paging/multiple/retryfirst'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that includes a nextLink that has 10 pages, of which the
    # 2nd call fails first with 500. The client should retry and finish all 10
    # pages eventually.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def get_multiple_pages_retry_second(custom_headers = nil)
      first_page = get_multiple_pages_retry_second_as_lazy(custom_headers)
      first_page.get_all_items
    end

    #
    # A paging operation that includes a nextLink that has 10 pages, of which the
    # 2nd call fails first with 500. The client should retry and finish all 10
    # pages eventually.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_retry_second_with_http_info(custom_headers = nil)
      get_multiple_pages_retry_second_async(custom_headers).value!
    end

    #
    # A paging operation that includes a nextLink that has 10 pages, of which the
    # 2nd call fails first with 500. The client should retry and finish all 10
    # pages eventually.
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_retry_second_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'paging/multiple/retrysecond'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that receives a 400 on the first call
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def get_single_pages_failure(custom_headers = nil)
      first_page = get_single_pages_failure_as_lazy(custom_headers)
      first_page.get_all_items
    end

    #
    # A paging operation that receives a 400 on the first call
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_single_pages_failure_with_http_info(custom_headers = nil)
      get_single_pages_failure_async(custom_headers).value!
    end

    #
    # A paging operation that receives a 400 on the first call
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_single_pages_failure_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'paging/single/failure'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that receives a 400 on the second call
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def get_multiple_pages_failure(custom_headers = nil)
      first_page = get_multiple_pages_failure_as_lazy(custom_headers)
      first_page.get_all_items
    end

    #
    # A paging operation that receives a 400 on the second call
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_failure_with_http_info(custom_headers = nil)
      get_multiple_pages_failure_async(custom_headers).value!
    end

    #
    # A paging operation that receives a 400 on the second call
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_failure_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'paging/multiple/failure'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that receives an invalid nextLink
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def get_multiple_pages_failure_uri(custom_headers = nil)
      first_page = get_multiple_pages_failure_uri_as_lazy(custom_headers)
      first_page.get_all_items
    end

    #
    # A paging operation that receives an invalid nextLink
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_failure_uri_with_http_info(custom_headers = nil)
      get_multiple_pages_failure_uri_async(custom_headers).value!
    end

    #
    # A paging operation that receives an invalid nextLink
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_failure_uri_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'paging/multiple/failureuri'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment
    #
    # @param api_version [String] Sets the api version to use.
    # @param tenant [String] Sets the tenant to use.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def get_multiple_pages_fragment_next_link(api_version, tenant, custom_headers = nil)
      first_page = get_multiple_pages_fragment_next_link_as_lazy(api_version, tenant, custom_headers)
      first_page.get_all_items
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment
    #
    # @param api_version [String] Sets the api version to use.
    # @param tenant [String] Sets the tenant to use.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_fragment_next_link_with_http_info(api_version, tenant, custom_headers = nil)
      get_multiple_pages_fragment_next_link_async(api_version, tenant, custom_headers).value!
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment
    #
    # @param api_version [String] Sets the api version to use.
    # @param tenant [String] Sets the tenant to use.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_fragment_next_link_async(api_version, tenant, custom_headers = nil)
      fail ArgumentError, 'api_version is nil' if api_version.nil?
      fail ArgumentError, 'tenant is nil' if tenant.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'paging/multiple/fragment/{tenant}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'tenant' => tenant},
          query_params: {'api_version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::OdataProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment with
    # parameters grouped
    #
    # @param custom_parameter_group [CustomParameterGroup] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def get_multiple_pages_fragment_with_grouping_next_link(custom_parameter_group, custom_headers = nil)
      first_page = get_multiple_pages_fragment_with_grouping_next_link_as_lazy(custom_parameter_group, custom_headers)
      first_page.get_all_items
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment with
    # parameters grouped
    #
    # @param custom_parameter_group [CustomParameterGroup] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_fragment_with_grouping_next_link_with_http_info(custom_parameter_group, custom_headers = nil)
      get_multiple_pages_fragment_with_grouping_next_link_async(custom_parameter_group, custom_headers).value!
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment with
    # parameters grouped
    #
    # @param custom_parameter_group [CustomParameterGroup] Additional parameters
    # for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_fragment_with_grouping_next_link_async(custom_parameter_group, custom_headers = nil)
      fail ArgumentError, 'custom_parameter_group is nil' if custom_parameter_group.nil?

      api_version = nil
      tenant = nil
      unless custom_parameter_group.nil?
        api_version = custom_parameter_group.api_version
      end
      unless custom_parameter_group.nil?
        tenant = custom_parameter_group.tenant
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'paging/multiple/fragmentwithgrouping/{tenant}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'tenant' => tenant},
          query_params: {'api_version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::OdataProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment
    #
    # @param api_version [String] Sets the api version to use.
    # @param tenant [String] Sets the tenant to use.
    # @param next_link [String] Next link for list operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def next_fragment(api_version, tenant, next_link, custom_headers = nil)
      response = next_fragment_async(api_version, tenant, next_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment
    #
    # @param api_version [String] Sets the api version to use.
    # @param tenant [String] Sets the tenant to use.
    # @param next_link [String] Next link for list operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def next_fragment_with_http_info(api_version, tenant, next_link, custom_headers = nil)
      next_fragment_async(api_version, tenant, next_link, custom_headers).value!
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment
    #
    # @param api_version [String] Sets the api version to use.
    # @param tenant [String] Sets the tenant to use.
    # @param next_link [String] Next link for list operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def next_fragment_async(api_version, tenant, next_link, custom_headers = nil)
      fail ArgumentError, 'api_version is nil' if api_version.nil?
      fail ArgumentError, 'tenant is nil' if tenant.nil?
      fail ArgumentError, 'next_link is nil' if next_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'paging/multiple/fragment/{tenant}/{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'tenant' => tenant},
          skip_encoding_path_params: {'nextLink' => next_link},
          query_params: {'api_version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::OdataProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment
    #
    # @param next_link [String] Next link for list operation.
    # @param custom_parameter_group [CustomParameterGroup] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array<Product>] operation results.
    #
    def next_fragment_with_grouping(next_link, custom_parameter_group, custom_headers = nil)
      response = next_fragment_with_grouping_async(next_link, custom_parameter_group, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment
    #
    # @param next_link [String] Next link for list operation.
    # @param custom_parameter_group [CustomParameterGroup] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def next_fragment_with_grouping_with_http_info(next_link, custom_parameter_group, custom_headers = nil)
      next_fragment_with_grouping_async(next_link, custom_parameter_group, custom_headers).value!
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment
    #
    # @param next_link [String] Next link for list operation.
    # @param custom_parameter_group [CustomParameterGroup] Additional parameters
    # for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def next_fragment_with_grouping_async(next_link, custom_parameter_group, custom_headers = nil)
      fail ArgumentError, 'next_link is nil' if next_link.nil?
      fail ArgumentError, 'custom_parameter_group is nil' if custom_parameter_group.nil?

      api_version = nil
      tenant = nil
      unless custom_parameter_group.nil?
        api_version = custom_parameter_group.api_version
      end
      unless custom_parameter_group.nil?
        tenant = custom_parameter_group.tenant
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'paging/multiple/fragmentwithgrouping/{tenant}/{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'tenant' => tenant},
          skip_encoding_path_params: {'nextLink' => next_link},
          query_params: {'api_version' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::OdataProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that finishes on the first call without a nextlink
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] operation results.
    #
    def get_single_pages_next(next_page_link, custom_headers = nil)
      response = get_single_pages_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # A paging operation that finishes on the first call without a nextlink
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_single_pages_next_with_http_info(next_page_link, custom_headers = nil)
      get_single_pages_next_async(next_page_link, custom_headers).value!
    end

    #
    # A paging operation that finishes on the first call without a nextlink
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_single_pages_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param client_request_id [String]
    # @param paging_get_multiple_pages_options [PagingGetMultiplePagesOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] operation results.
    #
    def get_multiple_pages_next(next_page_link, client_request_id = nil, paging_get_multiple_pages_options = nil, custom_headers = nil)
      response = get_multiple_pages_next_async(next_page_link, client_request_id, paging_get_multiple_pages_options, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param client_request_id [String]
    # @param paging_get_multiple_pages_options [PagingGetMultiplePagesOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_next_with_http_info(next_page_link, client_request_id = nil, paging_get_multiple_pages_options = nil, custom_headers = nil)
      get_multiple_pages_next_async(next_page_link, client_request_id, paging_get_multiple_pages_options, custom_headers).value!
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param client_request_id [String]
    # @param paging_get_multiple_pages_options [PagingGetMultiplePagesOptions]
    # Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_next_async(next_page_link, client_request_id = nil, paging_get_multiple_pages_options = nil, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      maxresults = nil
      timeout = nil
      unless paging_get_multiple_pages_options.nil?
        maxresults = paging_get_multiple_pages_options.maxresults
      end
      unless paging_get_multiple_pages_options.nil?
        timeout = paging_get_multiple_pages_options.timeout
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['client-request-id'] = client_request_id unless client_request_id.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['maxresults'] = maxresults.to_s unless maxresults.to_s.nil?
      request_headers['timeout'] = timeout.to_s unless timeout.to_s.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that includes a nextLink in odata format that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param client_request_id [String]
    # @param paging_get_odata_multiple_pages_options
    # [PagingGetOdataMultiplePagesOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OdataProductResult] operation results.
    #
    def get_odata_multiple_pages_next(next_page_link, client_request_id = nil, paging_get_odata_multiple_pages_options = nil, custom_headers = nil)
      response = get_odata_multiple_pages_next_async(next_page_link, client_request_id, paging_get_odata_multiple_pages_options, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # A paging operation that includes a nextLink in odata format that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param client_request_id [String]
    # @param paging_get_odata_multiple_pages_options
    # [PagingGetOdataMultiplePagesOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_odata_multiple_pages_next_with_http_info(next_page_link, client_request_id = nil, paging_get_odata_multiple_pages_options = nil, custom_headers = nil)
      get_odata_multiple_pages_next_async(next_page_link, client_request_id, paging_get_odata_multiple_pages_options, custom_headers).value!
    end

    #
    # A paging operation that includes a nextLink in odata format that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param client_request_id [String]
    # @param paging_get_odata_multiple_pages_options
    # [PagingGetOdataMultiplePagesOptions] Additional parameters for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_odata_multiple_pages_next_async(next_page_link, client_request_id = nil, paging_get_odata_multiple_pages_options = nil, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      maxresults = nil
      timeout = nil
      unless paging_get_odata_multiple_pages_options.nil?
        maxresults = paging_get_odata_multiple_pages_options.maxresults
      end
      unless paging_get_odata_multiple_pages_options.nil?
        timeout = paging_get_odata_multiple_pages_options.timeout
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['client-request-id'] = client_request_id unless client_request_id.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['maxresults'] = maxresults.to_s unless maxresults.to_s.nil?
      request_headers['timeout'] = timeout.to_s unless timeout.to_s.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::OdataProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param client_request_id [String]
    # @param paging_get_multiple_pages_with_offset_next_options
    # [PagingGetMultiplePagesWithOffsetNextOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] operation results.
    #
    def get_multiple_pages_with_offset_next(next_page_link, client_request_id = nil, paging_get_multiple_pages_with_offset_next_options = nil, custom_headers = nil)
      response = get_multiple_pages_with_offset_next_async(next_page_link, client_request_id, paging_get_multiple_pages_with_offset_next_options, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param client_request_id [String]
    # @param paging_get_multiple_pages_with_offset_next_options
    # [PagingGetMultiplePagesWithOffsetNextOptions] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_with_offset_next_with_http_info(next_page_link, client_request_id = nil, paging_get_multiple_pages_with_offset_next_options = nil, custom_headers = nil)
      get_multiple_pages_with_offset_next_async(next_page_link, client_request_id, paging_get_multiple_pages_with_offset_next_options, custom_headers).value!
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param client_request_id [String]
    # @param paging_get_multiple_pages_with_offset_next_options
    # [PagingGetMultiplePagesWithOffsetNextOptions] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_with_offset_next_async(next_page_link, client_request_id = nil, paging_get_multiple_pages_with_offset_next_options = nil, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?

      maxresults = nil
      timeout = nil
      unless paging_get_multiple_pages_with_offset_next_options.nil?
        maxresults = paging_get_multiple_pages_with_offset_next_options.maxresults
      end
      unless paging_get_multiple_pages_with_offset_next_options.nil?
        timeout = paging_get_multiple_pages_with_offset_next_options.timeout
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['client-request-id'] = client_request_id unless client_request_id.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['maxresults'] = maxresults.to_s unless maxresults.to_s.nil?
      request_headers['timeout'] = timeout.to_s unless timeout.to_s.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that fails on the first call with 500 and then retries and
    # then get a response including a nextLink that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] operation results.
    #
    def get_multiple_pages_retry_first_next(next_page_link, custom_headers = nil)
      response = get_multiple_pages_retry_first_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # A paging operation that fails on the first call with 500 and then retries and
    # then get a response including a nextLink that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_retry_first_next_with_http_info(next_page_link, custom_headers = nil)
      get_multiple_pages_retry_first_next_async(next_page_link, custom_headers).value!
    end

    #
    # A paging operation that fails on the first call with 500 and then retries and
    # then get a response including a nextLink that has 10 pages
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_retry_first_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that includes a nextLink that has 10 pages, of which the
    # 2nd call fails first with 500. The client should retry and finish all 10
    # pages eventually.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] operation results.
    #
    def get_multiple_pages_retry_second_next(next_page_link, custom_headers = nil)
      response = get_multiple_pages_retry_second_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # A paging operation that includes a nextLink that has 10 pages, of which the
    # 2nd call fails first with 500. The client should retry and finish all 10
    # pages eventually.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_retry_second_next_with_http_info(next_page_link, custom_headers = nil)
      get_multiple_pages_retry_second_next_async(next_page_link, custom_headers).value!
    end

    #
    # A paging operation that includes a nextLink that has 10 pages, of which the
    # 2nd call fails first with 500. The client should retry and finish all 10
    # pages eventually.
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_retry_second_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that receives a 400 on the first call
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] operation results.
    #
    def get_single_pages_failure_next(next_page_link, custom_headers = nil)
      response = get_single_pages_failure_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # A paging operation that receives a 400 on the first call
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_single_pages_failure_next_with_http_info(next_page_link, custom_headers = nil)
      get_single_pages_failure_next_async(next_page_link, custom_headers).value!
    end

    #
    # A paging operation that receives a 400 on the first call
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_single_pages_failure_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that receives a 400 on the second call
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] operation results.
    #
    def get_multiple_pages_failure_next(next_page_link, custom_headers = nil)
      response = get_multiple_pages_failure_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # A paging operation that receives a 400 on the second call
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_failure_next_with_http_info(next_page_link, custom_headers = nil)
      get_multiple_pages_failure_next_async(next_page_link, custom_headers).value!
    end

    #
    # A paging operation that receives a 400 on the second call
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_failure_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that receives an invalid nextLink
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] operation results.
    #
    def get_multiple_pages_failure_uri_next(next_page_link, custom_headers = nil)
      response = get_multiple_pages_failure_uri_next_async(next_page_link, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # A paging operation that receives an invalid nextLink
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_multiple_pages_failure_uri_next_with_http_info(next_page_link, custom_headers = nil)
      get_multiple_pages_failure_uri_next_async(next_page_link, custom_headers).value!
    end

    #
    # A paging operation that receives an invalid nextLink
    #
    # @param next_page_link [String] The NextLink from the previous successful call
    # to List operation.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_multiple_pages_failure_uri_next_async(next_page_link, custom_headers = nil)
      fail ArgumentError, 'next_page_link is nil' if next_page_link.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = '{nextLink}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'nextLink' => next_page_link},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = PagingModule::Models::ProductResult.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # A paging operation that finishes on the first call without a nextlink
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] which provide lazy access to pages of the response.
    #
    def get_single_pages_as_lazy(custom_headers = nil)
      response = get_single_pages_async(custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          get_single_pages_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param client_request_id [String]
    # @param paging_get_multiple_pages_options [PagingGetMultiplePagesOptions]
    # Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] which provide lazy access to pages of the response.
    #
    def get_multiple_pages_as_lazy(client_request_id = nil, paging_get_multiple_pages_options = nil, custom_headers = nil)
      response = get_multiple_pages_async(client_request_id, paging_get_multiple_pages_options, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          get_multiple_pages_next_async(next_page_link, client_request_id, paging_get_multiple_pages_options, custom_headers)
        end
        page
      end
    end

    #
    # A paging operation that includes a nextLink in odata format that has 10 pages
    #
    # @param client_request_id [String]
    # @param paging_get_odata_multiple_pages_options
    # [PagingGetOdataMultiplePagesOptions] Additional parameters for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OdataProductResult] which provide lazy access to pages of the
    # response.
    #
    def get_odata_multiple_pages_as_lazy(client_request_id = nil, paging_get_odata_multiple_pages_options = nil, custom_headers = nil)
      response = get_odata_multiple_pages_async(client_request_id, paging_get_odata_multiple_pages_options, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          get_odata_multiple_pages_next_async(next_page_link, client_request_id, paging_get_odata_multiple_pages_options, custom_headers)
        end
        page
      end
    end

    #
    # A paging operation that includes a nextLink that has 10 pages
    #
    # @param paging_get_multiple_pages_with_offset_options
    # [PagingGetMultiplePagesWithOffsetOptions] Additional parameters for the
    # operation
    # @param client_request_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] which provide lazy access to pages of the response.
    #
    def get_multiple_pages_with_offset_as_lazy(paging_get_multiple_pages_with_offset_options, client_request_id = nil, custom_headers = nil)
      response = get_multiple_pages_with_offset_async(paging_get_multiple_pages_with_offset_options, client_request_id, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          paging_get_multiple_pages_with_offset_next_options = paging_get_multiple_pages_with_offset_options
          get_multiple_pages_with_offset_next_async(next_page_link, client_request_id, paging_get_multiple_pages_with_offset_next_options, custom_headers)
        end
        page
      end
    end

    #
    # A paging operation that fails on the first call with 500 and then retries and
    # then get a response including a nextLink that has 10 pages
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] which provide lazy access to pages of the response.
    #
    def get_multiple_pages_retry_first_as_lazy(custom_headers = nil)
      response = get_multiple_pages_retry_first_async(custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          get_multiple_pages_retry_first_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

    #
    # A paging operation that includes a nextLink that has 10 pages, of which the
    # 2nd call fails first with 500. The client should retry and finish all 10
    # pages eventually.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] which provide lazy access to pages of the response.
    #
    def get_multiple_pages_retry_second_as_lazy(custom_headers = nil)
      response = get_multiple_pages_retry_second_async(custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          get_multiple_pages_retry_second_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

    #
    # A paging operation that receives a 400 on the first call
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] which provide lazy access to pages of the response.
    #
    def get_single_pages_failure_as_lazy(custom_headers = nil)
      response = get_single_pages_failure_async(custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          get_single_pages_failure_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

    #
    # A paging operation that receives a 400 on the second call
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] which provide lazy access to pages of the response.
    #
    def get_multiple_pages_failure_as_lazy(custom_headers = nil)
      response = get_multiple_pages_failure_async(custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          get_multiple_pages_failure_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

    #
    # A paging operation that receives an invalid nextLink
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ProductResult] which provide lazy access to pages of the response.
    #
    def get_multiple_pages_failure_uri_as_lazy(custom_headers = nil)
      response = get_multiple_pages_failure_uri_async(custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_page_link|
          get_multiple_pages_failure_uri_next_async(next_page_link, custom_headers)
        end
        page
      end
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment
    #
    # @param api_version [String] Sets the api version to use.
    # @param tenant [String] Sets the tenant to use.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OdataProductResult] which provide lazy access to pages of the
    # response.
    #
    def get_multiple_pages_fragment_next_link_as_lazy(api_version, tenant, custom_headers = nil)
      response = get_multiple_pages_fragment_next_link_async(api_version, tenant, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          next_fragment_async(api_version, tenant, next_link, custom_headers)
        end
        page
      end
    end

    #
    # A paging operation that doesn't return a full URL, just a fragment with
    # parameters grouped
    #
    # @param custom_parameter_group [CustomParameterGroup] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OdataProductResult] which provide lazy access to pages of the
    # response.
    #
    def get_multiple_pages_fragment_with_grouping_next_link_as_lazy(custom_parameter_group, custom_headers = nil)
      response = get_multiple_pages_fragment_with_grouping_next_link_async(custom_parameter_group, custom_headers).value!
      unless response.nil?
        page = response.body
        page.next_method = Proc.new do |next_link|
          next_fragment_with_grouping_async(next_link, custom_parameter_group, custom_headers)
        end
        page
      end
    end

  end
end
