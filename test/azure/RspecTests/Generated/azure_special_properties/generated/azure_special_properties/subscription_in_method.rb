# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module AzureSpecialPropertiesModule
  #
  # Test Infrastructure for AutoRest
  #
  class SubscriptionInMethod
    include MsRestAzure

    #
    # Creates and initializes a new instance of the SubscriptionInMethod class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestAzureSpecialParametersTestClient] reference to the AutoRestAzureSpecialParametersTestClient
    attr_reader :client

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = '1234-5678-9012-3456' to succeed
    #
    # @param subscription_id [String] This should appear as a method parameter, use
    # value '1234-5678-9012-3456'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_method_local_valid(subscription_id, custom_headers = nil)
      response = post_method_local_valid_async(subscription_id, custom_headers).value!
      nil
    end

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = '1234-5678-9012-3456' to succeed
    #
    # @param subscription_id [String] This should appear as a method parameter, use
    # value '1234-5678-9012-3456'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def post_method_local_valid_with_http_info(subscription_id, custom_headers = nil)
      post_method_local_valid_async(subscription_id, custom_headers).value!
    end

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = '1234-5678-9012-3456' to succeed
    #
    # @param subscription_id [String] This should appear as a method parameter, use
    # value '1234-5678-9012-3456'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_method_local_valid_async(subscription_id, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/subscriptionId/method/string/none/path/local/1234-5678-9012-3456/{subscriptionId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = null, client-side validation should prevent you from making this call
    #
    # @param subscription_id [String] This should appear as a method parameter, use
    # value null, client-side validation should prvenet the call
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_method_local_null(subscription_id, custom_headers = nil)
      response = post_method_local_null_async(subscription_id, custom_headers).value!
      nil
    end

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = null, client-side validation should prevent you from making this call
    #
    # @param subscription_id [String] This should appear as a method parameter, use
    # value null, client-side validation should prvenet the call
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def post_method_local_null_with_http_info(subscription_id, custom_headers = nil)
      post_method_local_null_async(subscription_id, custom_headers).value!
    end

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = null, client-side validation should prevent you from making this call
    #
    # @param subscription_id [String] This should appear as a method parameter, use
    # value null, client-side validation should prvenet the call
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_method_local_null_async(subscription_id, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/subscriptionId/method/string/none/path/local/null/{subscriptionId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = '1234-5678-9012-3456' to succeed
    #
    # @param subscription_id [String] Should appear as a method parameter -use
    # value '1234-5678-9012-3456'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_path_local_valid(subscription_id, custom_headers = nil)
      response = post_path_local_valid_async(subscription_id, custom_headers).value!
      nil
    end

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = '1234-5678-9012-3456' to succeed
    #
    # @param subscription_id [String] Should appear as a method parameter -use
    # value '1234-5678-9012-3456'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def post_path_local_valid_with_http_info(subscription_id, custom_headers = nil)
      post_path_local_valid_async(subscription_id, custom_headers).value!
    end

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = '1234-5678-9012-3456' to succeed
    #
    # @param subscription_id [String] Should appear as a method parameter -use
    # value '1234-5678-9012-3456'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_path_local_valid_async(subscription_id, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/subscriptionId/path/string/none/path/local/1234-5678-9012-3456/{subscriptionId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = '1234-5678-9012-3456' to succeed
    #
    # @param subscription_id [String] The subscriptionId, which appears in the
    # path, the value is always '1234-5678-9012-3456'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_swagger_local_valid(subscription_id, custom_headers = nil)
      response = post_swagger_local_valid_async(subscription_id, custom_headers).value!
      nil
    end

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = '1234-5678-9012-3456' to succeed
    #
    # @param subscription_id [String] The subscriptionId, which appears in the
    # path, the value is always '1234-5678-9012-3456'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def post_swagger_local_valid_with_http_info(subscription_id, custom_headers = nil)
      post_swagger_local_valid_async(subscription_id, custom_headers).value!
    end

    #
    # POST method with subscriptionId modeled in the method.  pass in subscription
    # id = '1234-5678-9012-3456' to succeed
    #
    # @param subscription_id [String] The subscriptionId, which appears in the
    # path, the value is always '1234-5678-9012-3456'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_swagger_local_valid_async(subscription_id, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/subscriptionId/swagger/string/none/path/local/1234-5678-9012-3456/{subscriptionId}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

  end
end
