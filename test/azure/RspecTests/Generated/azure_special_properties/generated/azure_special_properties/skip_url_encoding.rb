# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module AzureSpecialPropertiesModule
  #
  # Test Infrastructure for AutoRest
  #
  class SkipUrlEncoding
    include MsRestAzure

    #
    # Creates and initializes a new instance of the SkipUrlEncoding class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestAzureSpecialParametersTestClient] reference to the AutoRestAzureSpecialParametersTestClient
    attr_reader :client

    #
    # Get method with unencoded path parameter with value 'path1/path2/path3'
    #
    # @param unencoded_path_param [String] Unencoded path parameter with value
    # 'path1/path2/path3'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_method_path_valid(unencoded_path_param, custom_headers = nil)
      response = get_method_path_valid_async(unencoded_path_param, custom_headers).value!
      nil
    end

    #
    # Get method with unencoded path parameter with value 'path1/path2/path3'
    #
    # @param unencoded_path_param [String] Unencoded path parameter with value
    # 'path1/path2/path3'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_method_path_valid_with_http_info(unencoded_path_param, custom_headers = nil)
      get_method_path_valid_async(unencoded_path_param, custom_headers).value!
    end

    #
    # Get method with unencoded path parameter with value 'path1/path2/path3'
    #
    # @param unencoded_path_param [String] Unencoded path parameter with value
    # 'path1/path2/path3'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_method_path_valid_async(unencoded_path_param, custom_headers = nil)
      fail ArgumentError, 'unencoded_path_param is nil' if unencoded_path_param.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/skipUrlEncoding/method/path/valid/{unencodedPathParam}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'unencodedPathParam' => unencoded_path_param},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Get method with unencoded path parameter with value 'path1/path2/path3'
    #
    # @param unencoded_path_param [String] Unencoded path parameter with value
    # 'path1/path2/path3'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_path_path_valid(unencoded_path_param, custom_headers = nil)
      response = get_path_path_valid_async(unencoded_path_param, custom_headers).value!
      nil
    end

    #
    # Get method with unencoded path parameter with value 'path1/path2/path3'
    #
    # @param unencoded_path_param [String] Unencoded path parameter with value
    # 'path1/path2/path3'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_path_path_valid_with_http_info(unencoded_path_param, custom_headers = nil)
      get_path_path_valid_async(unencoded_path_param, custom_headers).value!
    end

    #
    # Get method with unencoded path parameter with value 'path1/path2/path3'
    #
    # @param unencoded_path_param [String] Unencoded path parameter with value
    # 'path1/path2/path3'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_path_path_valid_async(unencoded_path_param, custom_headers = nil)
      fail ArgumentError, 'unencoded_path_param is nil' if unencoded_path_param.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/skipUrlEncoding/path/path/valid/{unencodedPathParam}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'unencodedPathParam' => unencoded_path_param},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Get method with unencoded path parameter with value 'path1/path2/path3'
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_swagger_path_valid(custom_headers = nil)
      response = get_swagger_path_valid_async(custom_headers).value!
      nil
    end

    #
    # Get method with unencoded path parameter with value 'path1/path2/path3'
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_swagger_path_valid_with_http_info(custom_headers = nil)
      get_swagger_path_valid_async(custom_headers).value!
    end

    #
    # Get method with unencoded path parameter with value 'path1/path2/path3'
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_swagger_path_valid_async(custom_headers = nil)
      unencoded_path_param = 'path1/path2/path3'


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/skipUrlEncoding/swagger/path/valid/{unencodedPathParam}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_path_params: {'unencodedPathParam' => unencoded_path_param},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Get method with unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    #
    # @param q1 [String] Unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_method_query_valid(q1, custom_headers = nil)
      response = get_method_query_valid_async(q1, custom_headers).value!
      nil
    end

    #
    # Get method with unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    #
    # @param q1 [String] Unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_method_query_valid_with_http_info(q1, custom_headers = nil)
      get_method_query_valid_async(q1, custom_headers).value!
    end

    #
    # Get method with unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    #
    # @param q1 [String] Unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_method_query_valid_async(q1, custom_headers = nil)
      fail ArgumentError, 'q1 is nil' if q1.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/skipUrlEncoding/method/query/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_query_params: {'q1' => q1},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Get method with unencoded query parameter with value null
    #
    # @param q1 [String] Unencoded query parameter with value null
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_method_query_null(q1 = nil, custom_headers = nil)
      response = get_method_query_null_async(q1, custom_headers).value!
      nil
    end

    #
    # Get method with unencoded query parameter with value null
    #
    # @param q1 [String] Unencoded query parameter with value null
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_method_query_null_with_http_info(q1 = nil, custom_headers = nil)
      get_method_query_null_async(q1, custom_headers).value!
    end

    #
    # Get method with unencoded query parameter with value null
    #
    # @param q1 [String] Unencoded query parameter with value null
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_method_query_null_async(q1 = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/skipUrlEncoding/method/query/null'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_query_params: {'q1' => q1},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Get method with unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    #
    # @param q1 [String] Unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_path_query_valid(q1, custom_headers = nil)
      response = get_path_query_valid_async(q1, custom_headers).value!
      nil
    end

    #
    # Get method with unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    #
    # @param q1 [String] Unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_path_query_valid_with_http_info(q1, custom_headers = nil)
      get_path_query_valid_async(q1, custom_headers).value!
    end

    #
    # Get method with unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    #
    # @param q1 [String] Unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_path_query_valid_async(q1, custom_headers = nil)
      fail ArgumentError, 'q1 is nil' if q1.nil?


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/skipUrlEncoding/path/query/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_query_params: {'q1' => q1},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Get method with unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_swagger_query_valid(custom_headers = nil)
      response = get_swagger_query_valid_async(custom_headers).value!
      nil
    end

    #
    # Get method with unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def get_swagger_query_valid_with_http_info(custom_headers = nil)
      get_swagger_query_valid_async(custom_headers).value!
    end

    #
    # Get method with unencoded query parameter with value
    # 'value1&q2=value2&q3=value3'
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_swagger_query_valid_async(custom_headers = nil)
      q1 = 'value1&q2=value2&q3=value3'


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/skipUrlEncoding/swagger/query/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          skip_encoding_query_params: {'q1' => q1},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

  end
end
