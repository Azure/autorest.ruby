# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module AzureSpecialPropertiesModule
  #
  # Test Infrastructure for AutoRest
  #
  class Header
    include MsRestAzure

    #
    # Creates and initializes a new instance of the Header class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestAzureSpecialParametersTestClient] reference to the AutoRestAzureSpecialParametersTestClient
    attr_reader :client

    #
    # Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request
    #
    # @param foo_client_request_id [String] The fooRequestId
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def custom_named_request_id(foo_client_request_id, custom_headers = nil)
      response = custom_named_request_id_async(foo_client_request_id, custom_headers).value!
      nil
    end

    #
    # Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request
    #
    # @param foo_client_request_id [String] The fooRequestId
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def custom_named_request_id_with_http_info(foo_client_request_id, custom_headers = nil)
      custom_named_request_id_async(foo_client_request_id, custom_headers).value!
    end

    #
    # Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request
    #
    # @param foo_client_request_id [String] The fooRequestId
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def custom_named_request_id_async(foo_client_request_id, custom_headers = nil)
      fail ArgumentError, 'foo_client_request_id is nil' if foo_client_request_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['foo-client-request-id'] = SecureRandom.uuid
      request_headers['foo-client-request-id'] = foo_client_request_id unless foo_client_request_id.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/customNamedRequestId'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['foo-request-id'] unless http_response['foo-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request, via a parameter group
    #
    # @param header_custom_named_request_id_param_grouping_parameters
    # [HeaderCustomNamedRequestIdParamGroupingParameters] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def custom_named_request_id_param_grouping(header_custom_named_request_id_param_grouping_parameters, custom_headers = nil)
      response = custom_named_request_id_param_grouping_async(header_custom_named_request_id_param_grouping_parameters, custom_headers).value!
      nil
    end

    #
    # Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request, via a parameter group
    #
    # @param header_custom_named_request_id_param_grouping_parameters
    # [HeaderCustomNamedRequestIdParamGroupingParameters] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def custom_named_request_id_param_grouping_with_http_info(header_custom_named_request_id_param_grouping_parameters, custom_headers = nil)
      custom_named_request_id_param_grouping_async(header_custom_named_request_id_param_grouping_parameters, custom_headers).value!
    end

    #
    # Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request, via a parameter group
    #
    # @param header_custom_named_request_id_param_grouping_parameters
    # [HeaderCustomNamedRequestIdParamGroupingParameters] Additional parameters for
    # the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def custom_named_request_id_param_grouping_async(header_custom_named_request_id_param_grouping_parameters, custom_headers = nil)
      fail ArgumentError, 'header_custom_named_request_id_param_grouping_parameters is nil' if header_custom_named_request_id_param_grouping_parameters.nil?

      foo_client_request_id = nil
      unless header_custom_named_request_id_param_grouping_parameters.nil?
        foo_client_request_id = header_custom_named_request_id_param_grouping_parameters.foo_client_request_id
      end

      request_headers = {}

      # Set Headers
      request_headers['foo-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['foo-client-request-id'] = foo_client_request_id unless foo_client_request_id.nil?
      path_template = 'azurespecials/customNamedRequestIdParamGrouping'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['foo-request-id'] unless http_response['foo-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request
    #
    # @param foo_client_request_id [String] The fooRequestId
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Boolean] operation results.
    #
    def custom_named_request_id_head(foo_client_request_id, custom_headers = nil)
      response = custom_named_request_id_head_async(foo_client_request_id, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request
    #
    # @param foo_client_request_id [String] The fooRequestId
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def custom_named_request_id_head_with_http_info(foo_client_request_id, custom_headers = nil)
      custom_named_request_id_head_async(foo_client_request_id, custom_headers).value!
    end

    #
    # Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request
    #
    # @param foo_client_request_id [String] The fooRequestId
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def custom_named_request_id_head_async(foo_client_request_id, custom_headers = nil)
      fail ArgumentError, 'foo_client_request_id is nil' if foo_client_request_id.nil?


      request_headers = {}

      # Set Headers
      request_headers['foo-client-request-id'] = SecureRandom.uuid
      request_headers['foo-client-request-id'] = foo_client_request_id unless foo_client_request_id.nil?
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'azurespecials/customNamedRequestIdHead'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.body = (status_code == 200)
        result.request_id = http_response['foo-request-id'] unless http_response['foo-request-id'].nil?

        result
      end

      promise.execute
    end

  end
end
