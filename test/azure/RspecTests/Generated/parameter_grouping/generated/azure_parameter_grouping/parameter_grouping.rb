# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module ParameterGroupingModule
  #
  # Test Infrastructure for AutoRest
  #
  class ParameterGrouping
    include MsRestAzure

    #
    # Creates and initializes a new instance of the ParameterGrouping class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestParameterGroupingTestService] reference to the AutoRestParameterGroupingTestService
    attr_reader :client

    #
    # Post a bunch of required parameters grouped
    #
    # @param parameter_grouping_post_required_parameters
    # [ParameterGroupingPostRequiredParameters] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_required(parameter_grouping_post_required_parameters, custom_headers = nil)
      response = post_required_async(parameter_grouping_post_required_parameters, custom_headers).value!
      nil
    end

    #
    # Post a bunch of required parameters grouped
    #
    # @param parameter_grouping_post_required_parameters
    # [ParameterGroupingPostRequiredParameters] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def post_required_with_http_info(parameter_grouping_post_required_parameters, custom_headers = nil)
      post_required_async(parameter_grouping_post_required_parameters, custom_headers).value!
    end

    #
    # Post a bunch of required parameters grouped
    #
    # @param parameter_grouping_post_required_parameters
    # [ParameterGroupingPostRequiredParameters] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_async(parameter_grouping_post_required_parameters, custom_headers = nil)
      fail ArgumentError, 'parameter_grouping_post_required_parameters is nil' if parameter_grouping_post_required_parameters.nil?

      body = nil
      custom_header = nil
      query = nil
      path = nil
      unless parameter_grouping_post_required_parameters.nil?
        body = parameter_grouping_post_required_parameters.body
      end
      unless parameter_grouping_post_required_parameters.nil?
        custom_header = parameter_grouping_post_required_parameters.custom_header
      end
      unless parameter_grouping_post_required_parameters.nil?
        query = parameter_grouping_post_required_parameters.query
      end
      unless parameter_grouping_post_required_parameters.nil?
        path = parameter_grouping_post_required_parameters.path
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['customHeader'] = custom_header unless custom_header.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'body',
        type: {
          name: 'Number'
        }
      }
      request_content = @client.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'parameterGrouping/postRequired/{path}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'path' => path},
          query_params: {'query' => query},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Post a bunch of optional parameters grouped
    #
    # @param parameter_grouping_post_optional_parameters
    # [ParameterGroupingPostOptionalParameters] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional(parameter_grouping_post_optional_parameters = nil, custom_headers = nil)
      response = post_optional_async(parameter_grouping_post_optional_parameters, custom_headers).value!
      nil
    end

    #
    # Post a bunch of optional parameters grouped
    #
    # @param parameter_grouping_post_optional_parameters
    # [ParameterGroupingPostOptionalParameters] Additional parameters for the
    # operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def post_optional_with_http_info(parameter_grouping_post_optional_parameters = nil, custom_headers = nil)
      post_optional_async(parameter_grouping_post_optional_parameters, custom_headers).value!
    end

    #
    # Post a bunch of optional parameters grouped
    #
    # @param parameter_grouping_post_optional_parameters
    # [ParameterGroupingPostOptionalParameters] Additional parameters for the
    # operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_async(parameter_grouping_post_optional_parameters = nil, custom_headers = nil)

      custom_header = nil
      query = nil
      unless parameter_grouping_post_optional_parameters.nil?
        custom_header = parameter_grouping_post_optional_parameters.custom_header
      end
      unless parameter_grouping_post_optional_parameters.nil?
        query = parameter_grouping_post_optional_parameters.query
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['customHeader'] = custom_header unless custom_header.nil?
      path_template = 'parameterGrouping/postOptional'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'query' => query},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Post parameters from multiple different parameter groups
    #
    # @param first_parameter_group [FirstParameterGroup] Additional parameters for
    # the operation
    # @param parameter_grouping_post_multi_param_groups_second_param_group
    # [ParameterGroupingPostMultiParamGroupsSecondParamGroup] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_multi_param_groups(first_parameter_group = nil, parameter_grouping_post_multi_param_groups_second_param_group = nil, custom_headers = nil)
      response = post_multi_param_groups_async(first_parameter_group, parameter_grouping_post_multi_param_groups_second_param_group, custom_headers).value!
      nil
    end

    #
    # Post parameters from multiple different parameter groups
    #
    # @param first_parameter_group [FirstParameterGroup] Additional parameters for
    # the operation
    # @param parameter_grouping_post_multi_param_groups_second_param_group
    # [ParameterGroupingPostMultiParamGroupsSecondParamGroup] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def post_multi_param_groups_with_http_info(first_parameter_group = nil, parameter_grouping_post_multi_param_groups_second_param_group = nil, custom_headers = nil)
      post_multi_param_groups_async(first_parameter_group, parameter_grouping_post_multi_param_groups_second_param_group, custom_headers).value!
    end

    #
    # Post parameters from multiple different parameter groups
    #
    # @param first_parameter_group [FirstParameterGroup] Additional parameters for
    # the operation
    # @param parameter_grouping_post_multi_param_groups_second_param_group
    # [ParameterGroupingPostMultiParamGroupsSecondParamGroup] Additional parameters
    # for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_multi_param_groups_async(first_parameter_group = nil, parameter_grouping_post_multi_param_groups_second_param_group = nil, custom_headers = nil)

      header_one = nil
      query_one = nil
      header_two = nil
      query_two = nil
      unless first_parameter_group.nil?
        header_one = first_parameter_group.header_one
      end
      unless first_parameter_group.nil?
        query_one = first_parameter_group.query_one
      end
      unless parameter_grouping_post_multi_param_groups_second_param_group.nil?
        header_two = parameter_grouping_post_multi_param_groups_second_param_group.header_two
      end
      unless parameter_grouping_post_multi_param_groups_second_param_group.nil?
        query_two = parameter_grouping_post_multi_param_groups_second_param_group.query_two
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['header-one'] = header_one unless header_one.nil?
      request_headers['header-two'] = header_two unless header_two.nil?
      path_template = 'parameterGrouping/postMultipleParameterGroups'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'query-one' => query_one,'query-two' => query_two},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Post parameters with a shared parameter group object
    #
    # @param first_parameter_group [FirstParameterGroup] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_shared_parameter_group_object(first_parameter_group = nil, custom_headers = nil)
      response = post_shared_parameter_group_object_async(first_parameter_group, custom_headers).value!
      nil
    end

    #
    # Post parameters with a shared parameter group object
    #
    # @param first_parameter_group [FirstParameterGroup] Additional parameters for
    # the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def post_shared_parameter_group_object_with_http_info(first_parameter_group = nil, custom_headers = nil)
      post_shared_parameter_group_object_async(first_parameter_group, custom_headers).value!
    end

    #
    # Post parameters with a shared parameter group object
    #
    # @param first_parameter_group [FirstParameterGroup] Additional parameters for
    # the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_shared_parameter_group_object_async(first_parameter_group = nil, custom_headers = nil)

      header_one = nil
      query_one = nil
      unless first_parameter_group.nil?
        header_one = first_parameter_group.header_one
      end
      unless first_parameter_group.nil?
        query_one = first_parameter_group.query_one
      end

      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      request_headers['header-one'] = header_one unless header_one.nil?
      path_template = 'parameterGrouping/sharedParameterGroupObject'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'query-one' => query_one},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

  end
end
