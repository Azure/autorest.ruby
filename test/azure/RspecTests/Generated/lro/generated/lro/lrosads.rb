# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module LroModule
  #
  # Long-running Operation for AutoRest
  #
  class LROSADs
    include MsRestAzure

    #
    # Creates and initializes a new instance of the LROSADs class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestLongRunningOperationTestService] reference to the AutoRestLongRunningOperationTestService
    attr_reader :client

    #
    # Long running put request, service returns a 400 to the initial request
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_non_retry400(product = nil, custom_headers = nil)
      response = put_non_retry400_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_non_retry400_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_non_retry400_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a Product with 'ProvisioningState'
    # = 'Creating' and 201 response code
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_non_retry201creating400(product = nil, custom_headers = nil)
      response = put_non_retry201creating400_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_non_retry201creating400_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_non_retry201creating400_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a Product with 'ProvisioningState'
    # = 'Creating' and 201 response code
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_non_retry201creating400invalid_json(product = nil, custom_headers = nil)
      response = put_non_retry201creating400invalid_json_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_non_retry201creating400invalid_json_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_non_retry201creating400invalid_json_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 with
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_async_relative_retry400(product = nil, custom_headers = nil)
      response = put_async_relative_retry400_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_relative_retry400_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_relative_retry400_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 400 with an error body
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete_non_retry400(custom_headers = nil)
      response = delete_non_retry400_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_non_retry400_async(custom_headers = nil)
      # Send request
      promise = begin_delete_non_retry400_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 with a location header
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete202non_retry400(custom_headers = nil)
      response = delete202non_retry400_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete202non_retry400_async(custom_headers = nil)
      # Send request
      promise = begin_delete202non_retry400_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete_async_relative_retry400(custom_headers = nil)
      response = delete_async_relative_retry400_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async_relative_retry400_async(custom_headers = nil)
      # Send request
      promise = begin_delete_async_relative_retry400_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 400 with no error body
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post_non_retry400(product = nil, custom_headers = nil)
      response = post_non_retry400_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post_non_retry400_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post_non_retry400_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 with a location header
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post202non_retry400(product = nil, custom_headers = nil)
      response = post202non_retry400_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post202non_retry400_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post202non_retry400_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request Poll
    # the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post_async_relative_retry400(product = nil, custom_headers = nil)
      response = post_async_relative_retry400_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post_async_relative_retry400_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post_async_relative_retry400_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 201 to the initial request with
    # no payload
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_error201no_provisioning_state_payload(product = nil, custom_headers = nil)
      response = put_error201no_provisioning_state_payload_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_error201no_provisioning_state_payload_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_error201no_provisioning_state_payload_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_async_relative_retry_no_status(product = nil, custom_headers = nil)
      response = put_async_relative_retry_no_status_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_relative_retry_no_status_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_relative_retry_no_status_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_async_relative_retry_no_status_payload(product = nil, custom_headers = nil)
      response = put_async_relative_retry_no_status_payload_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_relative_retry_no_status_payload_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_relative_retry_no_status_payload_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 204 to the initial request,
    # indicating success.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete204succeeded(custom_headers = nil)
      response = delete204succeeded_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete204succeeded_async(custom_headers = nil)
      # Send request
      promise = begin_delete204succeeded_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete_async_relative_retry_no_status(custom_headers = nil)
      response = delete_async_relative_retry_no_status_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async_relative_retry_no_status_async(custom_headers = nil)
      # Send request
      promise = begin_delete_async_relative_retry_no_status_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request,
    # without a location header.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post202no_location(product = nil, custom_headers = nil)
      response = post202no_location_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post202no_location_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post202no_location_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post_async_relative_retry_no_payload(product = nil, custom_headers = nil)
      response = post_async_relative_retry_no_payload_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post_async_relative_retry_no_payload_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post_async_relative_retry_no_payload_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that is not a valid json
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put200invalid_json(product = nil, custom_headers = nil)
      response = put200invalid_json_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put200invalid_json_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put200invalid_json_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. The endpoint indicated
    # in the Azure-AsyncOperation header is invalid.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_async_relative_retry_invalid_header(product = nil, custom_headers = nil)
      response = put_async_relative_retry_invalid_header_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_relative_retry_invalid_header_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_relative_retry_invalid_header_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_async_relative_retry_invalid_json_polling(product = nil, custom_headers = nil)
      response = put_async_relative_retry_invalid_json_polling_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_relative_retry_invalid_json_polling_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_relative_retry_invalid_json_polling_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request
    # receing a reponse with an invalid 'Location' and 'Retry-After' headers
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete202retry_invalid_header(custom_headers = nil)
      response = delete202retry_invalid_header_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete202retry_invalid_header_async(custom_headers = nil)
      # Send request
      promise = begin_delete202retry_invalid_header_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # The endpoint indicated in the Azure-AsyncOperation header is invalid
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete_async_relative_retry_invalid_header(custom_headers = nil)
      response = delete_async_relative_retry_invalid_header_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async_relative_retry_invalid_header_async(custom_headers = nil)
      # Send request
      promise = begin_delete_async_relative_retry_invalid_header_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete_async_relative_retry_invalid_json_polling(custom_headers = nil)
      response = delete_async_relative_retry_invalid_json_polling_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async_relative_retry_invalid_json_polling_async(custom_headers = nil)
      # Send request
      promise = begin_delete_async_relative_retry_invalid_json_polling_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # invalid 'Location' and 'Retry-After' headers.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post202retry_invalid_header(product = nil, custom_headers = nil)
      response = post202retry_invalid_header_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post202retry_invalid_header_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post202retry_invalid_header_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. The endpoint indicated
    # in the Azure-AsyncOperation header is invalid.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post_async_relative_retry_invalid_header(product = nil, custom_headers = nil)
      response = post_async_relative_retry_invalid_header_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post_async_relative_retry_invalid_header_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post_async_relative_retry_invalid_header_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post_async_relative_retry_invalid_json_polling(product = nil, custom_headers = nil)
      response = post_async_relative_retry_invalid_json_polling_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post_async_relative_retry_invalid_json_polling_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post_async_relative_retry_invalid_json_polling_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 400 to the initial request
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_non_retry400(product = nil, custom_headers = nil)
      response = begin_put_non_retry400_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 400 to the initial request
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_non_retry400_with_http_info(product = nil, custom_headers = nil)
      begin_put_non_retry400_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 400 to the initial request
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_non_retry400_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/nonretryerror/put/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a Product with 'ProvisioningState'
    # = 'Creating' and 201 response code
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_non_retry201creating400(product = nil, custom_headers = nil)
      response = begin_put_non_retry201creating400_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a Product with 'ProvisioningState'
    # = 'Creating' and 201 response code
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_non_retry201creating400_with_http_info(product = nil, custom_headers = nil)
      begin_put_non_retry201creating400_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a Product with 'ProvisioningState'
    # = 'Creating' and 201 response code
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_non_retry201creating400_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/nonretryerror/put/201/creating/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a Product with 'ProvisioningState'
    # = 'Creating' and 201 response code
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_non_retry201creating400invalid_json(product = nil, custom_headers = nil)
      response = begin_put_non_retry201creating400invalid_json_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a Product with 'ProvisioningState'
    # = 'Creating' and 201 response code
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_non_retry201creating400invalid_json_with_http_info(product = nil, custom_headers = nil)
      begin_put_non_retry201creating400invalid_json_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a Product with 'ProvisioningState'
    # = 'Creating' and 201 response code
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_non_retry201creating400invalid_json_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/nonretryerror/put/201/creating/400/invalidjson'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 200 with
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_async_relative_retry400(product = nil, custom_headers = nil)
      response = begin_put_async_relative_retry400_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 with
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_relative_retry400_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_relative_retry400_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 with
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_relative_retry400_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/nonretryerror/putasync/retry/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 400 with an error body
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete_non_retry400(custom_headers = nil)
      response = begin_delete_non_retry400_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 400 with an error body
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_non_retry400_with_http_info(custom_headers = nil)
      begin_delete_non_retry400_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 400 with an error body
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_non_retry400_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/nonretryerror/delete/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 with a location header
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete202non_retry400(custom_headers = nil)
      response = begin_delete202non_retry400_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 202 with a location header
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete202non_retry400_with_http_info(custom_headers = nil)
      begin_delete202non_retry400_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 with a location header
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete202non_retry400_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/nonretryerror/delete/202/retry/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete_async_relative_retry400(custom_headers = nil)
      response = begin_delete_async_relative_retry400_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_async_relative_retry400_with_http_info(custom_headers = nil)
      begin_delete_async_relative_retry400_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async_relative_retry400_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/nonretryerror/deleteasync/retry/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 400 with no error body
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post_non_retry400(product = nil, custom_headers = nil)
      response = begin_post_non_retry400_async(product, custom_headers).value!
      nil
    end

    #
    # Long running post request, service returns a 400 with no error body
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post_non_retry400_with_http_info(product = nil, custom_headers = nil)
      begin_post_non_retry400_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 400 with no error body
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post_non_retry400_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/nonretryerror/post/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 with a location header
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post202non_retry400(product = nil, custom_headers = nil)
      response = begin_post202non_retry400_async(product, custom_headers).value!
      nil
    end

    #
    # Long running post request, service returns a 202 with a location header
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post202non_retry400_with_http_info(product = nil, custom_headers = nil)
      begin_post202non_retry400_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 with a location header
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post202non_retry400_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/nonretryerror/post/202/retry/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request Poll
    # the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post_async_relative_retry400(product = nil, custom_headers = nil)
      response = begin_post_async_relative_retry400_async(product, custom_headers).value!
      nil
    end

    #
    # Long running post request, service returns a 202 to the initial request Poll
    # the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post_async_relative_retry400_with_http_info(product = nil, custom_headers = nil)
      begin_post_async_relative_retry400_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request Poll
    # the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post_async_relative_retry400_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/nonretryerror/postasync/retry/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 201 to the initial request with
    # no payload
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_error201no_provisioning_state_payload(product = nil, custom_headers = nil)
      response = begin_put_error201no_provisioning_state_payload_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 201 to the initial request with
    # no payload
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_error201no_provisioning_state_payload_with_http_info(product = nil, custom_headers = nil)
      begin_put_error201no_provisioning_state_payload_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 201 to the initial request with
    # no payload
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_error201no_provisioning_state_payload_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/error/put/201/noprovisioningstatepayload'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_async_relative_retry_no_status(product = nil, custom_headers = nil)
      response = begin_put_async_relative_retry_no_status_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_relative_retry_no_status_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_relative_retry_no_status_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_relative_retry_no_status_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/error/putasync/retry/nostatus'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_async_relative_retry_no_status_payload(product = nil, custom_headers = nil)
      response = begin_put_async_relative_retry_no_status_payload_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_relative_retry_no_status_payload_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_relative_retry_no_status_payload_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_relative_retry_no_status_payload_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/error/putasync/retry/nostatuspayload'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 204 to the initial request,
    # indicating success.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete204succeeded(custom_headers = nil)
      response = begin_delete204succeeded_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 204 to the initial request,
    # indicating success.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete204succeeded_with_http_info(custom_headers = nil)
      begin_delete204succeeded_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 204 to the initial request,
    # indicating success.
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete204succeeded_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/error/delete/204/nolocation'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete_async_relative_retry_no_status(custom_headers = nil)
      response = begin_delete_async_relative_retry_no_status_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_async_relative_retry_no_status_with_http_info(custom_headers = nil)
      begin_delete_async_relative_retry_no_status_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async_relative_retry_no_status_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/error/deleteasync/retry/nostatus'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request,
    # without a location header.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post202no_location(product = nil, custom_headers = nil)
      response = begin_post202no_location_async(product, custom_headers).value!
      nil
    end

    #
    # Long running post request, service returns a 202 to the initial request,
    # without a location header.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post202no_location_with_http_info(product = nil, custom_headers = nil)
      begin_post202no_location_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request,
    # without a location header.
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post202no_location_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/error/post/202/nolocation'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post_async_relative_retry_no_payload(product = nil, custom_headers = nil)
      response = begin_post_async_relative_retry_no_payload_async(product, custom_headers).value!
      nil
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post_async_relative_retry_no_payload_with_http_info(product = nil, custom_headers = nil)
      begin_post_async_relative_retry_no_payload_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post_async_relative_retry_no_payload_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/error/postasync/retry/nopayload'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that is not a valid json
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put200invalid_json(product = nil, custom_headers = nil)
      response = begin_put200invalid_json_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that is not a valid json
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put200invalid_json_with_http_info(product = nil, custom_headers = nil)
      begin_put200invalid_json_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that is not a valid json
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put200invalid_json_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/error/put/200/invalidjson'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. The endpoint indicated
    # in the Azure-AsyncOperation header is invalid.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_async_relative_retry_invalid_header(product = nil, custom_headers = nil)
      response = begin_put_async_relative_retry_invalid_header_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. The endpoint indicated
    # in the Azure-AsyncOperation header is invalid.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_relative_retry_invalid_header_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_relative_retry_invalid_header_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. The endpoint indicated
    # in the Azure-AsyncOperation header is invalid.
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_relative_retry_invalid_header_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/error/putasync/retry/invalidheader'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_async_relative_retry_invalid_json_polling(product = nil, custom_headers = nil)
      response = begin_put_async_relative_retry_invalid_json_polling_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_relative_retry_invalid_json_polling_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_relative_retry_invalid_json_polling_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_relative_retry_invalid_json_polling_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/error/putasync/retry/invalidjsonpolling'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request
    # receing a reponse with an invalid 'Location' and 'Retry-After' headers
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete202retry_invalid_header(custom_headers = nil)
      response = begin_delete202retry_invalid_header_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 202 to the initial request
    # receing a reponse with an invalid 'Location' and 'Retry-After' headers
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete202retry_invalid_header_with_http_info(custom_headers = nil)
      begin_delete202retry_invalid_header_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request
    # receing a reponse with an invalid 'Location' and 'Retry-After' headers
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete202retry_invalid_header_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/error/delete/202/retry/invalidheader'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # The endpoint indicated in the Azure-AsyncOperation header is invalid
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete_async_relative_retry_invalid_header(custom_headers = nil)
      response = begin_delete_async_relative_retry_invalid_header_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # The endpoint indicated in the Azure-AsyncOperation header is invalid
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_async_relative_retry_invalid_header_with_http_info(custom_headers = nil)
      begin_delete_async_relative_retry_invalid_header_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # The endpoint indicated in the Azure-AsyncOperation header is invalid
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async_relative_retry_invalid_header_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/error/deleteasync/retry/invalidheader'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete_async_relative_retry_invalid_json_polling(custom_headers = nil)
      response = begin_delete_async_relative_retry_invalid_json_polling_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_async_relative_retry_invalid_json_polling_with_http_info(custom_headers = nil)
      begin_delete_async_relative_retry_invalid_json_polling_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async_relative_retry_invalid_json_polling_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/error/deleteasync/retry/invalidjsonpolling'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # invalid 'Location' and 'Retry-After' headers.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post202retry_invalid_header(product = nil, custom_headers = nil)
      response = begin_post202retry_invalid_header_async(product, custom_headers).value!
      nil
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # invalid 'Location' and 'Retry-After' headers.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post202retry_invalid_header_with_http_info(product = nil, custom_headers = nil)
      begin_post202retry_invalid_header_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # invalid 'Location' and 'Retry-After' headers.
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post202retry_invalid_header_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/error/post/202/retry/invalidheader'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. The endpoint indicated
    # in the Azure-AsyncOperation header is invalid.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post_async_relative_retry_invalid_header(product = nil, custom_headers = nil)
      response = begin_post_async_relative_retry_invalid_header_async(product, custom_headers).value!
      nil
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. The endpoint indicated
    # in the Azure-AsyncOperation header is invalid.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post_async_relative_retry_invalid_header_with_http_info(product = nil, custom_headers = nil)
      begin_post_async_relative_retry_invalid_header_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. The endpoint indicated
    # in the Azure-AsyncOperation header is invalid.
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post_async_relative_retry_invalid_header_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/error/postasync/retry/invalidheader'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post_async_relative_retry_invalid_json_polling(product = nil, custom_headers = nil)
      response = begin_post_async_relative_retry_invalid_json_polling_async(product, custom_headers).value!
      nil
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post_async_relative_retry_invalid_json_polling_with_http_info(product = nil, custom_headers = nil)
      begin_post_async_relative_retry_invalid_json_polling_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post_async_relative_retry_invalid_json_polling_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/error/postasync/retry/invalidjsonpolling'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

  end
end
