# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module LroModule
  #
  # Long-running Operation for AutoRest
  #
  class LROsCustomHeader
    include MsRestAzure

    #
    # Creates and initializes a new instance of the LROsCustomHeader class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestLongRunningOperationTestService] reference to the AutoRestLongRunningOperationTestService
    attr_reader :client

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running put request, service returns a
    # 200 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_async_retry_succeeded(product = nil, custom_headers = nil)
      response = put_async_retry_succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_retry_succeeded_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_retry_succeeded_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running put request, service returns a
    # 201 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’.  Polls return this value until the last poll
    # returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put201creating_succeeded200(product = nil, custom_headers = nil)
      response = put201creating_succeeded200_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put201creating_succeeded200_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put201creating_succeeded200_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running post request, service returns a
    # 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls
    # return a 200 with a response body after success
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post202retry200(product = nil, custom_headers = nil)
      response = post202retry200_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post202retry200_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post202retry200_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running post request, service returns a
    # 202 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post_async_retry_succeeded(product = nil, custom_headers = nil)
      response = post_async_retry_succeeded_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post_async_retry_succeeded_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post_async_retry_succeeded_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running put request, service returns a
    # 200 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_async_retry_succeeded(product = nil, custom_headers = nil)
      response = begin_put_async_retry_succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running put request, service returns a
    # 200 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_retry_succeeded_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_retry_succeeded_async(product, custom_headers).value!
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running put request, service returns a
    # 200 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_retry_succeeded_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/customheader/putasync/retry/succeeded'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running put request, service returns a
    # 201 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’.  Polls return this value until the last poll
    # returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put201creating_succeeded200(product = nil, custom_headers = nil)
      response = begin_put201creating_succeeded200_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running put request, service returns a
    # 201 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’.  Polls return this value until the last poll
    # returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put201creating_succeeded200_with_http_info(product = nil, custom_headers = nil)
      begin_put201creating_succeeded200_async(product, custom_headers).value!
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running put request, service returns a
    # 201 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’.  Polls return this value until the last poll
    # returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put201creating_succeeded200_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/customheader/put/201/creating/succeeded/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running post request, service returns a
    # 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls
    # return a 200 with a response body after success
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post202retry200(product = nil, custom_headers = nil)
      response = begin_post202retry200_async(product, custom_headers).value!
      nil
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running post request, service returns a
    # 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls
    # return a 200 with a response body after success
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post202retry200_with_http_info(product = nil, custom_headers = nil)
      begin_post202retry200_async(product, custom_headers).value!
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running post request, service returns a
    # 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls
    # return a 200 with a response body after success
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post202retry200_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/customheader/post/202/retry/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running post request, service returns a
    # 202 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post_async_retry_succeeded(product = nil, custom_headers = nil)
      response = begin_post_async_retry_succeeded_async(product, custom_headers).value!
      nil
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running post request, service returns a
    # 202 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post_async_retry_succeeded_with_http_info(product = nil, custom_headers = nil)
      begin_post_async_retry_succeeded_async(product, custom_headers).value!
    end

    #
    # x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 is required
    # message header for all requests. Long running post request, service returns a
    # 202 to the initial request, with an entity that contains
    # ProvisioningState=’Creating’. Poll the endpoint indicated in the
    # Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post_async_retry_succeeded_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/customheader/postasync/retry/succeeded'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

  end
end
