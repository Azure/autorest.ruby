# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module LroModule
  #
  # Long-running Operation for AutoRest
  #
  class LROs
    include MsRestAzure

    #
    # Creates and initializes a new instance of the LROs class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestLongRunningOperationTestService] reference to the AutoRestLongRunningOperationTestService
    attr_reader :client

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Succeeded’.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put200succeeded(product = nil, custom_headers = nil)
      response = put200succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put200succeeded_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put200succeeded_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that does not contain ProvisioningState=’Succeeded’.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put200succeeded_no_state(product = nil, custom_headers = nil)
      response = put200succeeded_no_state_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put200succeeded_no_state_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put200succeeded_no_state_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 202 to the initial request, with
    # a location header that points to a polling URL that returns a 200 and an
    # entity that doesn't contains ProvisioningState
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put202retry200(product = nil, custom_headers = nil)
      response = put202retry200_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put202retry200_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put202retry200_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put201creating_succeeded200(product = nil, custom_headers = nil)
      response = put201creating_succeeded200_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put201creating_succeeded200_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put201creating_succeeded200_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Updating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put200updating_succeeded204(product = nil, custom_headers = nil)
      response = put200updating_succeeded204_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put200updating_succeeded204_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put200updating_succeeded204_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Created’.  Polls return this value
    # until the last poll returns a ‘200’ with ProvisioningState=’Failed’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put201creating_failed200(product = nil, custom_headers = nil)
      response = put201creating_failed200_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put201creating_failed200_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put201creating_failed200_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put200acceptedcanceled200(product = nil, custom_headers = nil)
      response = put200acceptedcanceled200_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put200acceptedcanceled200_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put200acceptedcanceled200_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 202 to the initial request with
    # location header. Subsequent calls to operation status do not contain location
    # header.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_no_header_in_retry(product = nil, custom_headers = nil)
      response = put_no_header_in_retry_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_no_header_in_retry_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_no_header_in_retry_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_async_retry_succeeded(product = nil, custom_headers = nil)
      response = put_async_retry_succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_retry_succeeded_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_retry_succeeded_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_async_no_retry_succeeded(product = nil, custom_headers = nil)
      response = put_async_no_retry_succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_no_retry_succeeded_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_no_retry_succeeded_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_async_retry_failed(product = nil, custom_headers = nil)
      response = put_async_retry_failed_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_retry_failed_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_retry_failed_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_async_no_retrycanceled(product = nil, custom_headers = nil)
      response = put_async_no_retrycanceled_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_no_retrycanceled_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_no_retrycanceled_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 202 to the initial request with
    # Azure-AsyncOperation header. Subsequent calls to operation status do not
    # contain Azure-AsyncOperation header.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def put_async_no_header_in_retry(product = nil, custom_headers = nil)
      response = put_async_no_header_in_retry_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_no_header_in_retry_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_no_header_in_retry_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request with non resource.
    #
    # @param sku [Sku] sku to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Sku] operation results.
    #
    def put_non_resource(sku = nil, custom_headers = nil)
      response = put_non_resource_async(sku, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param sku [Sku] sku to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_non_resource_async(sku = nil, custom_headers = nil)
      # Send request
      promise = begin_put_non_resource_async(sku, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Sku.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request with non resource.
    #
    # @param sku [Sku] Sku to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Sku] operation results.
    #
    def put_async_non_resource(sku = nil, custom_headers = nil)
      response = put_async_non_resource_async(sku, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param sku [Sku] Sku to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_non_resource_async(sku = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_non_resource_async(sku, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Sku.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request with sub resource.
    #
    # @param product [SubProduct] Sub Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SubProduct] operation results.
    #
    def put_sub_resource(product = nil, custom_headers = nil)
      response = put_sub_resource_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [SubProduct] Sub Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_sub_resource_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_sub_resource_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::SubProduct.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request with sub resource.
    #
    # @param product [SubProduct] Sub Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SubProduct] operation results.
    #
    def put_async_sub_resource(product = nil, custom_headers = nil)
      response = put_async_sub_resource_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [SubProduct] Sub Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def put_async_sub_resource_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_put_async_sub_resource_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::SubProduct.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Accepted’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def delete_provisioning202accepted200succeeded(custom_headers = nil)
      response = delete_provisioning202accepted200succeeded_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_provisioning202accepted200succeeded_async(custom_headers = nil)
      # Send request
      promise = begin_delete_provisioning202accepted200succeeded_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def delete_provisioning202deleting_failed200(custom_headers = nil)
      response = delete_provisioning202deleting_failed200_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_provisioning202deleting_failed200_async(custom_headers = nil)
      # Send request
      promise = begin_delete_provisioning202deleting_failed200_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def delete_provisioning202deletingcanceled200(custom_headers = nil)
      response = delete_provisioning202deletingcanceled200_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_provisioning202deletingcanceled200_async(custom_headers = nil)
      # Send request
      promise = begin_delete_provisioning202deletingcanceled200_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete succeeds and returns right away
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete204succeeded(custom_headers = nil)
      response = delete204succeeded_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete204succeeded_async(custom_headers = nil)
      # Send request
      promise = begin_delete204succeeded_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Polls return this value until the last poll returns a ‘200’ with
    # ProvisioningState=’Succeeded’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def delete202retry200(custom_headers = nil)
      response = delete202retry200_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete202retry200_async(custom_headers = nil)
      # Send request
      promise = begin_delete202retry200_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Polls return this value until the last poll returns a ‘200’ with
    # ProvisioningState=’Succeeded’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def delete202no_retry204(custom_headers = nil)
      response = delete202no_retry204_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete202no_retry204_async(custom_headers = nil)
      # Send request
      promise = begin_delete202no_retry204_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a location header in the initial
    # request. Subsequent calls to operation status do not contain location header.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete_no_header_in_retry(custom_headers = nil)
      response = delete_no_header_in_retry_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_no_header_in_retry_async(custom_headers = nil)
      # Send request
      promise = begin_delete_no_header_in_retry_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns an Azure-AsyncOperation header
    # in the initial request. Subsequent calls to operation status do not contain
    # Azure-AsyncOperation header.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete_async_no_header_in_retry(custom_headers = nil)
      response = delete_async_no_header_in_retry_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async_no_header_in_retry_async(custom_headers = nil)
      # Send request
      promise = begin_delete_async_no_header_in_retry_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete_async_retry_succeeded(custom_headers = nil)
      response = delete_async_retry_succeeded_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async_retry_succeeded_async(custom_headers = nil)
      # Send request
      promise = begin_delete_async_retry_succeeded_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete_async_no_retry_succeeded(custom_headers = nil)
      response = delete_async_no_retry_succeeded_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async_no_retry_succeeded_async(custom_headers = nil)
      # Send request
      promise = begin_delete_async_no_retry_succeeded_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete_async_retry_failed(custom_headers = nil)
      response = delete_async_retry_failed_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async_retry_failed_async(custom_headers = nil)
      # Send request
      promise = begin_delete_async_retry_failed_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def delete_async_retrycanceled(custom_headers = nil)
      response = delete_async_retrycanceled_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def delete_async_retrycanceled_async(custom_headers = nil)
      # Send request
      promise = begin_delete_async_retrycanceled_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' header. Poll returns a 200 with a response body after success.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Sku] operation results.
    #
    def post200with_payload(custom_headers = nil)
      response = post200with_payload_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post200with_payload_async(custom_headers = nil)
      # Send request
      promise = begin_post200with_payload_async(custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Sku.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' and 'Retry-After' headers, Polls return a 200 with a response body
    # after success
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post202retry200(product = nil, custom_headers = nil)
      response = post202retry200_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post202retry200_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post202retry200_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' header, 204 with noresponse body after success
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def post202no_retry204(product = nil, custom_headers = nil)
      response = post202no_retry204_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post202no_retry204_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post202no_retry204_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def post_async_retry_succeeded(product = nil, custom_headers = nil)
      response = post_async_retry_succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post_async_retry_succeeded_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post_async_retry_succeeded_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def post_async_no_retry_succeeded(product = nil, custom_headers = nil)
      response = post_async_no_retry_succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post_async_no_retry_succeeded_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post_async_no_retry_succeeded_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
          result_mapper = LroModule::Models::Product.mapper()
          parsed_response = @client.deserialize(result_mapper, parsed_response)
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post_async_retry_failed(product = nil, custom_headers = nil)
      response = post_async_retry_failed_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post_async_retry_failed_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post_async_retry_failed_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    def post_async_retrycanceled(product = nil, custom_headers = nil)
      response = post_async_retrycanceled_async(product, custom_headers).value!
      nil
    end

    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Concurrent::Promise] promise which provides async access to http
    # response.
    #
    def post_async_retrycanceled_async(product = nil, custom_headers = nil)
      # Send request
      promise = begin_post_async_retrycanceled_async(product, custom_headers)

      promise = promise.then do |response|
        # Defining deserialization method.
        deserialize_method = lambda do |parsed_response|
        end

        # Waiting for response.
        @client.get_long_running_operation_result(response, deserialize_method)
      end

      promise
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Succeeded’.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put200succeeded(product = nil, custom_headers = nil)
      response = begin_put200succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Succeeded’.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put200succeeded_with_http_info(product = nil, custom_headers = nil)
      begin_put200succeeded_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Succeeded’.
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put200succeeded_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/put/200/succeeded'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that does not contain ProvisioningState=’Succeeded’.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put200succeeded_no_state(product = nil, custom_headers = nil)
      response = begin_put200succeeded_no_state_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that does not contain ProvisioningState=’Succeeded’.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put200succeeded_no_state_with_http_info(product = nil, custom_headers = nil)
      begin_put200succeeded_no_state_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that does not contain ProvisioningState=’Succeeded’.
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put200succeeded_no_state_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/put/200/succeeded/nostate'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 202 to the initial request, with
    # a location header that points to a polling URL that returns a 200 and an
    # entity that doesn't contains ProvisioningState
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put202retry200(product = nil, custom_headers = nil)
      response = begin_put202retry200_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 202 to the initial request, with
    # a location header that points to a polling URL that returns a 200 and an
    # entity that doesn't contains ProvisioningState
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put202retry200_with_http_info(product = nil, custom_headers = nil)
      begin_put202retry200_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 202 to the initial request, with
    # a location header that points to a polling URL that returns a 200 and an
    # entity that doesn't contains ProvisioningState
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put202retry200_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/put/202/retry/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put201creating_succeeded200(product = nil, custom_headers = nil)
      response = begin_put201creating_succeeded200_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put201creating_succeeded200_with_http_info(product = nil, custom_headers = nil)
      begin_put201creating_succeeded200_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put201creating_succeeded200_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/put/201/creating/succeeded/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Updating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put200updating_succeeded204(product = nil, custom_headers = nil)
      response = begin_put200updating_succeeded204_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Updating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put200updating_succeeded204_with_http_info(product = nil, custom_headers = nil)
      begin_put200updating_succeeded204_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Updating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put200updating_succeeded204_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/put/200/updating/succeeded/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Created’.  Polls return this value
    # until the last poll returns a ‘200’ with ProvisioningState=’Failed’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put201creating_failed200(product = nil, custom_headers = nil)
      response = begin_put201creating_failed200_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Created’.  Polls return this value
    # until the last poll returns a ‘200’ with ProvisioningState=’Failed’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put201creating_failed200_with_http_info(product = nil, custom_headers = nil)
      begin_put201creating_failed200_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Created’.  Polls return this value
    # until the last poll returns a ‘200’ with ProvisioningState=’Failed’
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put201creating_failed200_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/put/201/created/failed/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put200acceptedcanceled200(product = nil, custom_headers = nil)
      response = begin_put200acceptedcanceled200_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put200acceptedcanceled200_with_http_info(product = nil, custom_headers = nil)
      begin_put200acceptedcanceled200_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 201 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put200acceptedcanceled200_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/put/200/accepted/canceled/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 202 to the initial request with
    # location header. Subsequent calls to operation status do not contain location
    # header.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_no_header_in_retry(product = nil, custom_headers = nil)
      response = begin_put_no_header_in_retry_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 202 to the initial request with
    # location header. Subsequent calls to operation status do not contain location
    # header.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_no_header_in_retry_with_http_info(product = nil, custom_headers = nil)
      begin_put_no_header_in_retry_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 202 to the initial request with
    # location header. Subsequent calls to operation status do not contain location
    # header.
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_no_header_in_retry_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/put/noheader/202/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_async_retry_succeeded(product = nil, custom_headers = nil)
      response = begin_put_async_retry_succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_retry_succeeded_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_retry_succeeded_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_retry_succeeded_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/putasync/retry/succeeded'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_async_no_retry_succeeded(product = nil, custom_headers = nil)
      response = begin_put_async_no_retry_succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_no_retry_succeeded_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_no_retry_succeeded_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_no_retry_succeeded_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/putasync/noretry/succeeded'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_async_retry_failed(product = nil, custom_headers = nil)
      response = begin_put_async_retry_failed_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_retry_failed_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_retry_failed_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_retry_failed_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/putasync/retry/failed'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_async_no_retrycanceled(product = nil, custom_headers = nil)
      response = begin_put_async_no_retrycanceled_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_no_retrycanceled_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_no_retrycanceled_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 200 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_no_retrycanceled_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/putasync/noretry/canceled'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request, service returns a 202 to the initial request with
    # Azure-AsyncOperation header. Subsequent calls to operation status do not
    # contain Azure-AsyncOperation header.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_put_async_no_header_in_retry(product = nil, custom_headers = nil)
      response = begin_put_async_no_header_in_retry_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request, service returns a 202 to the initial request with
    # Azure-AsyncOperation header. Subsequent calls to operation status do not
    # contain Azure-AsyncOperation header.
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_no_header_in_retry_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_no_header_in_retry_async(product, custom_headers).value!
    end

    #
    # Long running put request, service returns a 202 to the initial request with
    # Azure-AsyncOperation header. Subsequent calls to operation status do not
    # contain Azure-AsyncOperation header.
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_no_header_in_retry_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/putasync/noheader/201/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request with non resource.
    #
    # @param sku [Sku] sku to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Sku] operation results.
    #
    def begin_put_non_resource(sku = nil, custom_headers = nil)
      response = begin_put_non_resource_async(sku, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request with non resource.
    #
    # @param sku [Sku] sku to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_non_resource_with_http_info(sku = nil, custom_headers = nil)
      begin_put_non_resource_async(sku, custom_headers).value!
    end

    #
    # Long running put request with non resource.
    #
    # @param sku [Sku] sku to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_non_resource_async(sku = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Sku.mapper()
      request_content = @client.serialize(request_mapper,  sku)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/putnonresource/202/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Sku.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request with non resource.
    #
    # @param sku [Sku] Sku to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Sku] operation results.
    #
    def begin_put_async_non_resource(sku = nil, custom_headers = nil)
      response = begin_put_async_non_resource_async(sku, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request with non resource.
    #
    # @param sku [Sku] Sku to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_non_resource_with_http_info(sku = nil, custom_headers = nil)
      begin_put_async_non_resource_async(sku, custom_headers).value!
    end

    #
    # Long running put request with non resource.
    #
    # @param sku [Sku] Sku to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_non_resource_async(sku = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Sku.mapper()
      request_content = @client.serialize(request_mapper,  sku)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/putnonresourceasync/202/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Sku.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request with sub resource.
    #
    # @param product [SubProduct] Sub Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SubProduct] operation results.
    #
    def begin_put_sub_resource(product = nil, custom_headers = nil)
      response = begin_put_sub_resource_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request with sub resource.
    #
    # @param product [SubProduct] Sub Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_sub_resource_with_http_info(product = nil, custom_headers = nil)
      begin_put_sub_resource_async(product, custom_headers).value!
    end

    #
    # Long running put request with sub resource.
    #
    # @param product [SubProduct] Sub Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_sub_resource_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::SubProduct.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/putsubresource/202/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::SubProduct.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running put request with sub resource.
    #
    # @param product [SubProduct] Sub Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SubProduct] operation results.
    #
    def begin_put_async_sub_resource(product = nil, custom_headers = nil)
      response = begin_put_async_sub_resource_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running put request with sub resource.
    #
    # @param product [SubProduct] Sub Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_put_async_sub_resource_with_http_info(product = nil, custom_headers = nil)
      begin_put_async_sub_resource_async(product, custom_headers).value!
    end

    #
    # Long running put request with sub resource.
    #
    # @param product [SubProduct] Sub Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_put_async_sub_resource_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::SubProduct.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/putsubresourceasync/202/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::SubProduct.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Accepted’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_delete_provisioning202accepted200succeeded(custom_headers = nil)
      response = begin_delete_provisioning202accepted200succeeded_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Accepted’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_provisioning202accepted200succeeded_with_http_info(custom_headers = nil)
      begin_delete_provisioning202accepted200succeeded_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Accepted’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_provisioning202accepted200succeeded_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/delete/provisioning/202/accepted/200/succeeded'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_delete_provisioning202deleting_failed200(custom_headers = nil)
      response = begin_delete_provisioning202deleting_failed200_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_provisioning202deleting_failed200_with_http_info(custom_headers = nil)
      begin_delete_provisioning202deleting_failed200_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_provisioning202deleting_failed200_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/delete/provisioning/202/deleting/200/failed'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_delete_provisioning202deletingcanceled200(custom_headers = nil)
      response = begin_delete_provisioning202deletingcanceled200_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_provisioning202deletingcanceled200_with_http_info(custom_headers = nil)
      begin_delete_provisioning202deletingcanceled200_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request,
    # with an entity that contains ProvisioningState=’Creating’.  Polls return this
    # value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_provisioning202deletingcanceled200_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/delete/provisioning/202/deleting/200/canceled'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running delete succeeds and returns right away
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete204succeeded(custom_headers = nil)
      response = begin_delete204succeeded_async(custom_headers).value!
      nil
    end

    #
    # Long running delete succeeds and returns right away
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete204succeeded_with_http_info(custom_headers = nil)
      begin_delete204succeeded_async(custom_headers).value!
    end

    #
    # Long running delete succeeds and returns right away
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete204succeeded_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/delete/204/succeeded'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Polls return this value until the last poll returns a ‘200’ with
    # ProvisioningState=’Succeeded’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_delete202retry200(custom_headers = nil)
      response = begin_delete202retry200_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Polls return this value until the last poll returns a ‘200’ with
    # ProvisioningState=’Succeeded’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete202retry200_with_http_info(custom_headers = nil)
      begin_delete202retry200_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Polls return this value until the last poll returns a ‘200’ with
    # ProvisioningState=’Succeeded’
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete202retry200_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/delete/202/retry/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Polls return this value until the last poll returns a ‘200’ with
    # ProvisioningState=’Succeeded’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_delete202no_retry204(custom_headers = nil)
      response = begin_delete202no_retry204_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Polls return this value until the last poll returns a ‘200’ with
    # ProvisioningState=’Succeeded’
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete202no_retry204_with_http_info(custom_headers = nil)
      begin_delete202no_retry204_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Polls return this value until the last poll returns a ‘200’ with
    # ProvisioningState=’Succeeded’
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete202no_retry204_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/delete/202/noretry/204'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a location header in the initial
    # request. Subsequent calls to operation status do not contain location header.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete_no_header_in_retry(custom_headers = nil)
      response = begin_delete_no_header_in_retry_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a location header in the initial
    # request. Subsequent calls to operation status do not contain location header.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_no_header_in_retry_with_http_info(custom_headers = nil)
      begin_delete_no_header_in_retry_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a location header in the initial
    # request. Subsequent calls to operation status do not contain location header.
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_no_header_in_retry_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/delete/noheader'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns an Azure-AsyncOperation header
    # in the initial request. Subsequent calls to operation status do not contain
    # Azure-AsyncOperation header.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete_async_no_header_in_retry(custom_headers = nil)
      response = begin_delete_async_no_header_in_retry_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns an Azure-AsyncOperation header
    # in the initial request. Subsequent calls to operation status do not contain
    # Azure-AsyncOperation header.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_async_no_header_in_retry_with_http_info(custom_headers = nil)
      begin_delete_async_no_header_in_retry_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns an Azure-AsyncOperation header
    # in the initial request. Subsequent calls to operation status do not contain
    # Azure-AsyncOperation header.
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async_no_header_in_retry_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/deleteasync/noheader/202/204'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204 || status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete_async_retry_succeeded(custom_headers = nil)
      response = begin_delete_async_retry_succeeded_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_async_retry_succeeded_with_http_info(custom_headers = nil)
      begin_delete_async_retry_succeeded_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async_retry_succeeded_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/deleteasync/retry/succeeded'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete_async_no_retry_succeeded(custom_headers = nil)
      response = begin_delete_async_no_retry_succeeded_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_async_no_retry_succeeded_with_http_info(custom_headers = nil)
      begin_delete_async_no_retry_succeeded_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async_no_retry_succeeded_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/deleteasync/noretry/succeeded'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete_async_retry_failed(custom_headers = nil)
      response = begin_delete_async_retry_failed_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_async_retry_failed_with_http_info(custom_headers = nil)
      begin_delete_async_retry_failed_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async_retry_failed_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/deleteasync/retry/failed'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_delete_async_retrycanceled(custom_headers = nil)
      response = begin_delete_async_retrycanceled_async(custom_headers).value!
      nil
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_delete_async_retrycanceled_with_http_info(custom_headers = nil)
      begin_delete_async_retrycanceled_async(custom_headers).value!
    end

    #
    # Long running delete request, service returns a 202 to the initial request.
    # Poll the endpoint indicated in the Azure-AsyncOperation header for operation
    # status
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_delete_async_retrycanceled_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/deleteasync/retry/canceled'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' header. Poll returns a 200 with a response body after success.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Sku] operation results.
    #
    def begin_post200with_payload(custom_headers = nil)
      response = begin_post200with_payload_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' header. Poll returns a 200 with a response body after success.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post200with_payload_with_http_info(custom_headers = nil)
      begin_post200with_payload_async(custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' header. Poll returns a 200 with a response body after success.
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post200with_payload_async(custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?
      path_template = 'lro/post/payload/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Sku.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Sku.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' and 'Retry-After' headers, Polls return a 200 with a response body
    # after success
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post202retry200(product = nil, custom_headers = nil)
      response = begin_post202retry200_async(product, custom_headers).value!
      nil
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' and 'Retry-After' headers, Polls return a 200 with a response body
    # after success
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post202retry200_with_http_info(product = nil, custom_headers = nil)
      begin_post202retry200_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' and 'Retry-After' headers, Polls return a 200 with a response body
    # after success
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post202retry200_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/post/202/retry/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' header, 204 with noresponse body after success
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_post202no_retry204(product = nil, custom_headers = nil)
      response = begin_post202no_retry204_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' header, 204 with noresponse body after success
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post202no_retry204_with_http_info(product = nil, custom_headers = nil)
      begin_post202no_retry204_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # 'Location' header, 204 with noresponse body after success
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post202no_retry204_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/post/202/noretry/204'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 202
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_post_async_retry_succeeded(product = nil, custom_headers = nil)
      response = begin_post_async_retry_succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post_async_retry_succeeded_with_http_info(product = nil, custom_headers = nil)
      begin_post_async_retry_succeeded_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post_async_retry_succeeded_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/postasync/retry/succeeded'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def begin_post_async_no_retry_succeeded(product = nil, custom_headers = nil)
      response = begin_post_async_no_retry_succeeded_async(product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post_async_no_retry_succeeded_with_http_info(product = nil, custom_headers = nil)
      begin_post_async_no_retry_succeeded_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post_async_no_retry_succeeded_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/postasync/noretry/succeeded'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 200
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?
        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = LroModule::Models::Product.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post_async_retry_failed(product = nil, custom_headers = nil)
      response = begin_post_async_retry_failed_async(product, custom_headers).value!
      nil
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post_async_retry_failed_with_http_info(product = nil, custom_headers = nil)
      begin_post_async_retry_failed_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post_async_retry_failed_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/postasync/retry/failed'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def begin_post_async_retrycanceled(product = nil, custom_headers = nil)
      response = begin_post_async_retrycanceled_async(product, custom_headers).value!
      nil
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRestAzure::AzureOperationResponse] HTTP response information.
    #
    def begin_post_async_retrycanceled_with_http_info(product = nil, custom_headers = nil)
      begin_post_async_retrycanceled_async(product, custom_headers).value!
    end

    #
    # Long running post request, service returns a 202 to the initial request, with
    # an entity that contains ProvisioningState=’Creating’. Poll the endpoint
    # indicated in the Azure-AsyncOperation header for operation status
    #
    # @param product [Product] Product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def begin_post_async_retrycanceled_async(product = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['x-ms-client-request-id'] = SecureRandom.uuid
      request_headers['accept-language'] = @client.accept_language unless @client.accept_language.nil?

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = LroModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'lro/postasync/retry/canceled'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRestAzure::AzureOperationError.new(result.request, http_response, error_model)
        end

        result.request_id = http_response['x-ms-request-id'] unless http_response['x-ms-request-id'].nil?

        result
      end

      promise.execute
    end

  end
end
