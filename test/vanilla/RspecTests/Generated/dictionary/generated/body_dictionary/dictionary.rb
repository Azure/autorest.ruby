# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module DictionaryModule
  #
  # Test Infrastructure for AutoRest Swagger BAT
  #
  class Dictionary

    #
    # Creates and initializes a new instance of the Dictionary class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestSwaggerBATdictionaryService] reference to the AutoRestSwaggerBATdictionaryService
    attr_reader :client

    #
    # Get null dictionary value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_null(custom_headers = nil)
      response = get_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get null dictionary value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_null_with_http_info(custom_headers = nil)
      get_null_async(custom_headers).value!
    end

    #
    # Get null dictionary value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/null'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'NumberElementType',
                    type: {
                      name: 'Number'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get empty dictionary value {}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_empty(custom_headers = nil)
      response = get_empty_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get empty dictionary value {}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_empty_with_http_info(custom_headers = nil)
      get_empty_async(custom_headers).value!
    end

    #
    # Get empty dictionary value {}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_empty_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/empty'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'NumberElementType',
                    type: {
                      name: 'Number'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Set dictionary value empty {}
    #
    # @param array_body [Hash{String => String}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_empty(array_body, custom_headers = nil)
      response = put_empty_async(array_body, custom_headers).value!
      nil
    end

    #
    # Set dictionary value empty {}
    #
    # @param array_body [Hash{String => String}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_empty_with_http_info(array_body, custom_headers = nil)
      put_empty_async(array_body, custom_headers).value!
    end

    #
    # Set dictionary value empty {}
    #
    # @param array_body [Hash{String => String}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_empty_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'StringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/empty'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get Dictionary with null value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_null_value(custom_headers = nil)
      response = get_null_value_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get Dictionary with null value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_null_value_with_http_info(custom_headers = nil)
      get_null_value_async(custom_headers).value!
    end

    #
    # Get Dictionary with null value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_null_value_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/nullvalue'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'StringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get Dictionary with null key
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_null_key(custom_headers = nil)
      response = get_null_key_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get Dictionary with null key
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_null_key_with_http_info(custom_headers = nil)
      get_null_key_async(custom_headers).value!
    end

    #
    # Get Dictionary with null key
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_null_key_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/nullkey'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'StringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get Dictionary with key as empty string
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_empty_string_key(custom_headers = nil)
      response = get_empty_string_key_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get Dictionary with key as empty string
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_empty_string_key_with_http_info(custom_headers = nil)
      get_empty_string_key_async(custom_headers).value!
    end

    #
    # Get Dictionary with key as empty string
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_empty_string_key_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/keyemptystring'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'StringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get invalid Dictionary value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_invalid(custom_headers = nil)
      response = get_invalid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get invalid Dictionary value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_invalid_with_http_info(custom_headers = nil)
      get_invalid_async(custom_headers).value!
    end

    #
    # Get invalid Dictionary value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_invalid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/invalid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'StringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_boolean_tfft(custom_headers = nil)
      response = get_boolean_tfft_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_boolean_tfft_with_http_info(custom_headers = nil)
      get_boolean_tfft_async(custom_headers).value!
    end

    #
    # Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_boolean_tfft_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/boolean/tfft'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'BooleanElementType',
                    type: {
                      name: 'Boolean'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
    #
    # @param array_body [Hash{String => Boolean}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_boolean_tfft(array_body, custom_headers = nil)
      response = put_boolean_tfft_async(array_body, custom_headers).value!
      nil
    end

    #
    # Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
    #
    # @param array_body [Hash{String => Boolean}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_boolean_tfft_with_http_info(array_body, custom_headers = nil)
      put_boolean_tfft_async(array_body, custom_headers).value!
    end

    #
    # Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
    #
    # @param array_body [Hash{String => Boolean}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_boolean_tfft_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'BooleanElementType',
              type: {
                name: 'Boolean'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/prim/boolean/tfft'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get boolean dictionary value {"0": true, "1": null, "2": false }
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_boolean_invalid_null(custom_headers = nil)
      response = get_boolean_invalid_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get boolean dictionary value {"0": true, "1": null, "2": false }
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_boolean_invalid_null_with_http_info(custom_headers = nil)
      get_boolean_invalid_null_async(custom_headers).value!
    end

    #
    # Get boolean dictionary value {"0": true, "1": null, "2": false }
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_boolean_invalid_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/boolean/true.null.false'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'BooleanElementType',
                    type: {
                      name: 'Boolean'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_boolean_invalid_string(custom_headers = nil)
      response = get_boolean_invalid_string_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_boolean_invalid_string_with_http_info(custom_headers = nil)
      get_boolean_invalid_string_async(custom_headers).value!
    end

    #
    # Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_boolean_invalid_string_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/boolean/true.boolean.false'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'BooleanElementType',
                    type: {
                      name: 'Boolean'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_integer_valid(custom_headers = nil)
      response = get_integer_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_integer_valid_with_http_info(custom_headers = nil)
      get_integer_valid_async(custom_headers).value!
    end

    #
    # Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_integer_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/integer/1.-1.3.300'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'NumberElementType',
                    type: {
                      name: 'Number'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param array_body [Hash{String => Integer}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_integer_valid(array_body, custom_headers = nil)
      response = put_integer_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param array_body [Hash{String => Integer}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_integer_valid_with_http_info(array_body, custom_headers = nil)
      put_integer_valid_async(array_body, custom_headers).value!
    end

    #
    # Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param array_body [Hash{String => Integer}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_integer_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'NumberElementType',
              type: {
                name: 'Number'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/prim/integer/1.-1.3.300'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get integer dictionary value {"0": 1, "1": null, "2": 0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_int_invalid_null(custom_headers = nil)
      response = get_int_invalid_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get integer dictionary value {"0": 1, "1": null, "2": 0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_int_invalid_null_with_http_info(custom_headers = nil)
      get_int_invalid_null_async(custom_headers).value!
    end

    #
    # Get integer dictionary value {"0": 1, "1": null, "2": 0}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_int_invalid_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/integer/1.null.zero'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'NumberElementType',
                    type: {
                      name: 'Number'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_int_invalid_string(custom_headers = nil)
      response = get_int_invalid_string_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_int_invalid_string_with_http_info(custom_headers = nil)
      get_int_invalid_string_async(custom_headers).value!
    end

    #
    # Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_int_invalid_string_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/integer/1.integer.0'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'NumberElementType',
                    type: {
                      name: 'Number'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_long_valid(custom_headers = nil)
      response = get_long_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_long_valid_with_http_info(custom_headers = nil)
      get_long_valid_async(custom_headers).value!
    end

    #
    # Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_long_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/long/1.-1.3.300'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'BignumElementType',
                    type: {
                      name: 'Number'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param array_body [Hash{String => Integer}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_long_valid(array_body, custom_headers = nil)
      response = put_long_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param array_body [Hash{String => Integer}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_long_valid_with_http_info(array_body, custom_headers = nil)
      put_long_valid_async(array_body, custom_headers).value!
    end

    #
    # Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
    #
    # @param array_body [Hash{String => Integer}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_long_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'BignumElementType',
              type: {
                name: 'Number'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/prim/long/1.-1.3.300'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get long dictionary value {"0": 1, "1": null, "2": 0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_long_invalid_null(custom_headers = nil)
      response = get_long_invalid_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get long dictionary value {"0": 1, "1": null, "2": 0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_long_invalid_null_with_http_info(custom_headers = nil)
      get_long_invalid_null_async(custom_headers).value!
    end

    #
    # Get long dictionary value {"0": 1, "1": null, "2": 0}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_long_invalid_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/long/1.null.zero'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'BignumElementType',
                    type: {
                      name: 'Number'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get long dictionary value {"0": 1, "1": "integer", "2": 0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_long_invalid_string(custom_headers = nil)
      response = get_long_invalid_string_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get long dictionary value {"0": 1, "1": "integer", "2": 0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_long_invalid_string_with_http_info(custom_headers = nil)
      get_long_invalid_string_async(custom_headers).value!
    end

    #
    # Get long dictionary value {"0": 1, "1": "integer", "2": 0}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_long_invalid_string_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/long/1.integer.0'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'BignumElementType',
                    type: {
                      name: 'Number'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_float_valid(custom_headers = nil)
      response = get_float_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_float_valid_with_http_info(custom_headers = nil)
      get_float_valid_async(custom_headers).value!
    end

    #
    # Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_float_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/float/0--0.01-1.2e20'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'FloatElementType',
                    type: {
                      name: 'Double'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param array_body [Hash{String => Float}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_float_valid(array_body, custom_headers = nil)
      response = put_float_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param array_body [Hash{String => Float}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_float_valid_with_http_info(array_body, custom_headers = nil)
      put_float_valid_async(array_body, custom_headers).value!
    end

    #
    # Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param array_body [Hash{String => Float}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_float_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'FloatElementType',
              type: {
                name: 'Double'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/prim/float/0--0.01-1.2e20'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_float_invalid_null(custom_headers = nil)
      response = get_float_invalid_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_float_invalid_null_with_http_info(custom_headers = nil)
      get_float_invalid_null_async(custom_headers).value!
    end

    #
    # Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_float_invalid_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/float/0.0-null-1.2e20'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'FloatElementType',
                    type: {
                      name: 'Double'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_float_invalid_string(custom_headers = nil)
      response = get_float_invalid_string_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_float_invalid_string_with_http_info(custom_headers = nil)
      get_float_invalid_string_async(custom_headers).value!
    end

    #
    # Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_float_invalid_string_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/float/1.number.0'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'FloatElementType',
                    type: {
                      name: 'Double'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_double_valid(custom_headers = nil)
      response = get_double_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_double_valid_with_http_info(custom_headers = nil)
      get_double_valid_async(custom_headers).value!
    end

    #
    # Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_double_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/double/0--0.01-1.2e20'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'FloatElementType',
                    type: {
                      name: 'Double'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param array_body [Hash{String => Float}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_double_valid(array_body, custom_headers = nil)
      response = put_double_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param array_body [Hash{String => Float}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_double_valid_with_http_info(array_body, custom_headers = nil)
      put_double_valid_async(array_body, custom_headers).value!
    end

    #
    # Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
    #
    # @param array_body [Hash{String => Float}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_double_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'FloatElementType',
              type: {
                name: 'Double'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/prim/double/0--0.01-1.2e20'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_double_invalid_null(custom_headers = nil)
      response = get_double_invalid_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_double_invalid_null_with_http_info(custom_headers = nil)
      get_double_invalid_null_async(custom_headers).value!
    end

    #
    # Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_double_invalid_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/double/0.0-null-1.2e20'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'FloatElementType',
                    type: {
                      name: 'Double'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_double_invalid_string(custom_headers = nil)
      response = get_double_invalid_string_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_double_invalid_string_with_http_info(custom_headers = nil)
      get_double_invalid_string_async(custom_headers).value!
    end

    #
    # Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_double_invalid_string_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/double/1.number.0'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'FloatElementType',
                    type: {
                      name: 'Double'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_string_valid(custom_headers = nil)
      response = get_string_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_string_valid_with_http_info(custom_headers = nil)
      get_string_valid_async(custom_headers).value!
    end

    #
    # Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_string_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/string/foo1.foo2.foo3'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'StringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
    #
    # @param array_body [Hash{String => String}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_string_valid(array_body, custom_headers = nil)
      response = put_string_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
    #
    # @param array_body [Hash{String => String}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_string_valid_with_http_info(array_body, custom_headers = nil)
      put_string_valid_async(array_body, custom_headers).value!
    end

    #
    # Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
    #
    # @param array_body [Hash{String => String}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_string_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'StringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/prim/string/foo1.foo2.foo3'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_string_with_null(custom_headers = nil)
      response = get_string_with_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_string_with_null_with_http_info(custom_headers = nil)
      get_string_with_null_async(custom_headers).value!
    end

    #
    # Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_string_with_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/string/foo.null.foo2'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'StringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_string_with_invalid(custom_headers = nil)
      response = get_string_with_invalid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_string_with_invalid_with_http_info(custom_headers = nil)
      get_string_with_invalid_async(custom_headers).value!
    end

    #
    # Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_string_with_invalid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/string/foo.123.foo2'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'StringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2":
    # "1492-10-12"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_date_valid(custom_headers = nil)
      response = get_date_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2":
    # "1492-10-12"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_date_valid_with_http_info(custom_headers = nil)
      get_date_valid_async(custom_headers).value!
    end

    #
    # Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2":
    # "1492-10-12"}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_date_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/date/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'DateElementType',
                    type: {
                      name: 'Date'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2":
    # "1492-10-12"}
    #
    # @param array_body [Hash{String => Date}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_date_valid(array_body, custom_headers = nil)
      response = put_date_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2":
    # "1492-10-12"}
    #
    # @param array_body [Hash{String => Date}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_date_valid_with_http_info(array_body, custom_headers = nil)
      put_date_valid_async(array_body, custom_headers).value!
    end

    #
    # Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2":
    # "1492-10-12"}
    #
    # @param array_body [Hash{String => Date}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_date_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'DateElementType',
              type: {
                name: 'Date'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/prim/date/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_date_invalid_null(custom_headers = nil)
      response = get_date_invalid_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_date_invalid_null_with_http_info(custom_headers = nil)
      get_date_invalid_null_async(custom_headers).value!
    end

    #
    # Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_date_invalid_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/date/invalidnull'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'DateElementType',
                    type: {
                      name: 'Date'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get date dictionary value {"0": "2011-03-22", "1": "date"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_date_invalid_chars(custom_headers = nil)
      response = get_date_invalid_chars_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get date dictionary value {"0": "2011-03-22", "1": "date"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_date_invalid_chars_with_http_info(custom_headers = nil)
      get_date_invalid_chars_async(custom_headers).value!
    end

    #
    # Get date dictionary value {"0": "2011-03-22", "1": "date"}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_date_invalid_chars_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/date/invalidchars'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'DateElementType',
                    type: {
                      name: 'Date'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1":
    # "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_date_time_valid(custom_headers = nil)
      response = get_date_time_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1":
    # "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_date_time_valid_with_http_info(custom_headers = nil)
      get_date_time_valid_async(custom_headers).value!
    end

    #
    # Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1":
    # "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_date_time_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/date-time/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'DateTimeElementType',
                    type: {
                      name: 'DateTime'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Set dictionary value  {"0": "2000-12-01t00:00:01z", "1":
    # "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
    #
    # @param array_body [Hash{String => DateTime}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_date_time_valid(array_body, custom_headers = nil)
      response = put_date_time_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Set dictionary value  {"0": "2000-12-01t00:00:01z", "1":
    # "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
    #
    # @param array_body [Hash{String => DateTime}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_date_time_valid_with_http_info(array_body, custom_headers = nil)
      put_date_time_valid_async(array_body, custom_headers).value!
    end

    #
    # Set dictionary value  {"0": "2000-12-01t00:00:01z", "1":
    # "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
    #
    # @param array_body [Hash{String => DateTime}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_date_time_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'DateTimeElementType',
              type: {
                name: 'DateTime'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/prim/date-time/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_date_time_invalid_null(custom_headers = nil)
      response = get_date_time_invalid_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_date_time_invalid_null_with_http_info(custom_headers = nil)
      get_date_time_invalid_null_async(custom_headers).value!
    end

    #
    # Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_date_time_invalid_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/date-time/invalidnull'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'DateTimeElementType',
                    type: {
                      name: 'DateTime'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_date_time_invalid_chars(custom_headers = nil)
      response = get_date_time_invalid_chars_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_date_time_invalid_chars_with_http_info(custom_headers = nil)
      get_date_time_invalid_chars_async(custom_headers).value!
    end

    #
    # Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_date_time_invalid_chars_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/date-time/invalidchars'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'DateTimeElementType',
                    type: {
                      name: 'DateTime'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT",
    # "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_date_time_rfc1123valid(custom_headers = nil)
      response = get_date_time_rfc1123valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT",
    # "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_date_time_rfc1123valid_with_http_info(custom_headers = nil)
      get_date_time_rfc1123valid_async(custom_headers).value!
    end

    #
    # Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT",
    # "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_date_time_rfc1123valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/date-time-rfc1123/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'DateTimeElementType',
                    type: {
                      name: 'DateTimeRfc1123'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed,
    # 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
    #
    # @param array_body [Hash{String => DateTime}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_date_time_rfc1123valid(array_body, custom_headers = nil)
      response = put_date_time_rfc1123valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed,
    # 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
    #
    # @param array_body [Hash{String => DateTime}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_date_time_rfc1123valid_with_http_info(array_body, custom_headers = nil)
      put_date_time_rfc1123valid_async(array_body, custom_headers).value!
    end

    #
    # Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed,
    # 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
    #
    # @param array_body [Hash{String => DateTime}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_date_time_rfc1123valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'DateTimeElementType',
              type: {
                name: 'DateTimeRfc1123'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/prim/date-time-rfc1123/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_duration_valid(custom_headers = nil)
      response = get_duration_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_duration_valid_with_http_info(custom_headers = nil)
      get_duration_valid_async(custom_headers).value!
    end

    #
    # Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_duration_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/duration/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'DurationElementType',
                    type: {
                      name: 'TimeSpan'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
    #
    # @param array_body [Hash{String => Duration}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_duration_valid(array_body, custom_headers = nil)
      response = put_duration_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
    #
    # @param array_body [Hash{String => Duration}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_duration_valid_with_http_info(array_body, custom_headers = nil)
      put_duration_valid_async(array_body, custom_headers).value!
    end

    #
    # Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
    #
    # @param array_body [Hash{String => Duration}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_duration_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'DurationElementType',
              type: {
                name: 'TimeSpan'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/prim/duration/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2":
    # hex (25, 29, 43)} with each item encoded in base64
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_byte_valid(custom_headers = nil)
      response = get_byte_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2":
    # hex (25, 29, 43)} with each item encoded in base64
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_byte_valid_with_http_info(custom_headers = nil)
      get_byte_valid_async(custom_headers).value!
    end

    #
    # Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2":
    # hex (25, 29, 43)} with each item encoded in base64
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_byte_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/byte/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'ArrayElementType',
                    type: {
                      name: 'ByteArray'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex
    # (25, 29, 43)} with each elementencoded in base 64
    #
    # @param array_body [Hash{String => Array<Integer>}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_byte_valid(array_body, custom_headers = nil)
      response = put_byte_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex
    # (25, 29, 43)} with each elementencoded in base 64
    #
    # @param array_body [Hash{String => Array<Integer>}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_byte_valid_with_http_info(array_body, custom_headers = nil)
      put_byte_valid_async(array_body, custom_headers).value!
    end

    #
    # Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex
    # (25, 29, 43)} with each elementencoded in base 64
    #
    # @param array_body [Hash{String => Array<Integer>}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_byte_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'ArrayElementType',
              type: {
                name: 'ByteArray'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/prim/byte/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first
    # item base64 encoded
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_byte_invalid_null(custom_headers = nil)
      response = get_byte_invalid_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first
    # item base64 encoded
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_byte_invalid_null_with_http_info(custom_headers = nil)
      get_byte_invalid_null_async(custom_headers).value!
    end

    #
    # Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first
    # item base64 encoded
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_byte_invalid_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/byte/invalidnull'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'ArrayElementType',
                    type: {
                      name: 'ByteArray'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get base64url dictionary value {"0": "a string that gets encoded with
    # base64url", "1": "test string", "2": "Lorem ipsum"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_base64url(custom_headers = nil)
      response = get_base64url_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get base64url dictionary value {"0": "a string that gets encoded with
    # base64url", "1": "test string", "2": "Lorem ipsum"}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_base64url_with_http_info(custom_headers = nil)
      get_base64url_async(custom_headers).value!
    end

    #
    # Get base64url dictionary value {"0": "a string that gets encoded with
    # base64url", "1": "test string", "2": "Lorem ipsum"}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_base64url_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/prim/base64url/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'StringElementType',
                    type: {
                      name: 'Base64Url'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get dictionary of complex type null value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_complex_null(custom_headers = nil)
      response = get_complex_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get dictionary of complex type null value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_complex_null_with_http_info(custom_headers = nil)
      get_complex_null_async(custom_headers).value!
    end

    #
    # Get dictionary of complex type null value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_complex_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/complex/null'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'WidgetElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'Widget'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get empty dictionary of complex type {}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_complex_empty(custom_headers = nil)
      response = get_complex_empty_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get empty dictionary of complex type {}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_complex_empty_with_http_info(custom_headers = nil)
      get_complex_empty_async(custom_headers).value!
    end

    #
    # Get empty dictionary of complex type {}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_complex_empty_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/complex/empty'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'WidgetElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'Widget'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get dictionary of complex type with null item {"0": {"integer": 1, "string":
    # "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_complex_item_null(custom_headers = nil)
      response = get_complex_item_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get dictionary of complex type with null item {"0": {"integer": 1, "string":
    # "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_complex_item_null_with_http_info(custom_headers = nil)
      get_complex_item_null_async(custom_headers).value!
    end

    #
    # Get dictionary of complex type with null item {"0": {"integer": 1, "string":
    # "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_complex_item_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/complex/itemnull'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'WidgetElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'Widget'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get dictionary of complex type with empty item {"0": {"integer": 1, "string":
    # "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_complex_item_empty(custom_headers = nil)
      response = get_complex_item_empty_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get dictionary of complex type with empty item {"0": {"integer": 1, "string":
    # "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_complex_item_empty_with_http_info(custom_headers = nil)
      get_complex_item_empty_async(custom_headers).value!
    end

    #
    # Get dictionary of complex type with empty item {"0": {"integer": 1, "string":
    # "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_complex_item_empty_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/complex/itemempty'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'WidgetElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'Widget'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1":
    # {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_complex_valid(custom_headers = nil)
      response = get_complex_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1":
    # {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_complex_valid_with_http_info(custom_headers = nil)
      get_complex_valid_async(custom_headers).value!
    end

    #
    # Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1":
    # {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_complex_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/complex/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'WidgetElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'Widget'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put an dictionary of complex type with values {"0": {"integer": 1, "string":
    # "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
    #
    # @param array_body [Hash{String => Widget}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_complex_valid(array_body, custom_headers = nil)
      response = put_complex_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Put an dictionary of complex type with values {"0": {"integer": 1, "string":
    # "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
    #
    # @param array_body [Hash{String => Widget}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_complex_valid_with_http_info(array_body, custom_headers = nil)
      put_complex_valid_async(array_body, custom_headers).value!
    end

    #
    # Put an dictionary of complex type with values {"0": {"integer": 1, "string":
    # "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
    #
    # @param array_body [Hash{String => Widget}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_complex_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'WidgetElementType',
              type: {
                name: 'Composite',
                class_name: 'Widget'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/complex/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a null array
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_array_null(custom_headers = nil)
      response = get_array_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get a null array
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_array_null_with_http_info(custom_headers = nil)
      get_array_null_async(custom_headers).value!
    end

    #
    # Get a null array
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_array_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/array/null'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'ArrayElementType',
                    type: {
                      name: 'Sequence',
                      element: {
                          required: false,
                          serialized_name: 'StringElementType',
                          type: {
                            name: 'String'
                          }
                      }
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get an empty dictionary {}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_array_empty(custom_headers = nil)
      response = get_array_empty_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get an empty dictionary {}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_array_empty_with_http_info(custom_headers = nil)
      get_array_empty_async(custom_headers).value!
    end

    #
    # Get an empty dictionary {}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_array_empty_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/array/empty'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'ArrayElementType',
                    type: {
                      name: 'Sequence',
                      element: {
                          required: false,
                          serialized_name: 'StringElementType',
                          type: {
                            name: 'String'
                          }
                      }
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2":
    # ["7", "8", "9"]}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_array_item_null(custom_headers = nil)
      response = get_array_item_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2":
    # ["7", "8", "9"]}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_array_item_null_with_http_info(custom_headers = nil)
      get_array_item_null_async(custom_headers).value!
    end

    #
    # Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2":
    # ["7", "8", "9"]}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_array_item_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/array/itemnull'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'ArrayElementType',
                    type: {
                      name: 'Sequence',
                      element: {
                          required: false,
                          serialized_name: 'StringElementType',
                          type: {
                            name: 'String'
                          }
                      }
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7",
    # "8", "9"]}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_array_item_empty(custom_headers = nil)
      response = get_array_item_empty_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7",
    # "8", "9"]}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_array_item_empty_with_http_info(custom_headers = nil)
      get_array_item_empty_async(custom_headers).value!
    end

    #
    # Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7",
    # "8", "9"]}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_array_item_empty_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/array/itemempty'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'ArrayElementType',
                    type: {
                      name: 'Sequence',
                      element: {
                          required: false,
                          serialized_name: 'StringElementType',
                          type: {
                            name: 'String'
                          }
                      }
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"],
    # "2": ["7", "8", "9"]}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_array_valid(custom_headers = nil)
      response = get_array_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"],
    # "2": ["7", "8", "9"]}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_array_valid_with_http_info(custom_headers = nil)
      get_array_valid_async(custom_headers).value!
    end

    #
    # Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"],
    # "2": ["7", "8", "9"]}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_array_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/array/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'ArrayElementType',
                    type: {
                      name: 'Sequence',
                      element: {
                          required: false,
                          serialized_name: 'StringElementType',
                          type: {
                            name: 'String'
                          }
                      }
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"],
    # "2": ["7", "8", "9"]}
    #
    # @param array_body [Hash{String => Array<String>}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_array_valid(array_body, custom_headers = nil)
      response = put_array_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"],
    # "2": ["7", "8", "9"]}
    #
    # @param array_body [Hash{String => Array<String>}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_array_valid_with_http_info(array_body, custom_headers = nil)
      put_array_valid_async(array_body, custom_headers).value!
    end

    #
    # Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"],
    # "2": ["7", "8", "9"]}
    #
    # @param array_body [Hash{String => Array<String>}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_array_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'ArrayElementType',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'StringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/array/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get an dictionaries of dictionaries with value null
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_dictionary_null(custom_headers = nil)
      response = get_dictionary_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get an dictionaries of dictionaries with value null
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_dictionary_null_with_http_info(custom_headers = nil)
      get_dictionary_null_async(custom_headers).value!
    end

    #
    # Get an dictionaries of dictionaries with value null
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_dictionary_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/dictionary/null'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'HashElementType',
                    type: {
                      name: 'Dictionary',
                      value: {
                          required: false,
                          serialized_name: 'StringElementType',
                          type: {
                            name: 'String'
                          }
                      }
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_dictionary_empty(custom_headers = nil)
      response = get_dictionary_empty_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_dictionary_empty_with_http_info(custom_headers = nil)
      get_dictionary_empty_async(custom_headers).value!
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_dictionary_empty_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/dictionary/empty'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'HashElementType',
                    type: {
                      name: 'Dictionary',
                      value: {
                          required: false,
                          serialized_name: 'StringElementType',
                          type: {
                            name: 'String'
                          }
                      }
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8":
    # "eight", "9": "nine"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_dictionary_item_null(custom_headers = nil)
      response = get_dictionary_item_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8":
    # "eight", "9": "nine"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_dictionary_item_null_with_http_info(custom_headers = nil)
      get_dictionary_item_null_async(custom_headers).value!
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8":
    # "eight", "9": "nine"}}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_dictionary_item_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/dictionary/itemnull'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'HashElementType',
                    type: {
                      name: 'Dictionary',
                      value: {
                          required: false,
                          serialized_name: 'StringElementType',
                          type: {
                            name: 'String'
                          }
                      }
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8":
    # "eight", "9": "nine"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_dictionary_item_empty(custom_headers = nil)
      response = get_dictionary_item_empty_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8":
    # "eight", "9": "nine"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_dictionary_item_empty_with_http_info(custom_headers = nil)
      get_dictionary_item_empty_async(custom_headers).value!
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8":
    # "eight", "9": "nine"}}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_dictionary_item_empty_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/dictionary/itemempty'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'HashElementType',
                    type: {
                      name: 'Dictionary',
                      value: {
                          required: false,
                          serialized_name: 'StringElementType',
                          type: {
                            name: 'String'
                          }
                      }
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6":
    # "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_dictionary_valid(custom_headers = nil)
      response = get_dictionary_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6":
    # "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_dictionary_valid_with_http_info(custom_headers = nil)
      get_dictionary_valid_async(custom_headers).value!
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6":
    # "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_dictionary_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'dictionary/dictionary/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'HashElementType',
                    type: {
                      name: 'Dictionary',
                      value: {
                          required: false,
                          serialized_name: 'StringElementType',
                          type: {
                            name: 'String'
                          }
                      }
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6":
    # "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
    #
    # @param array_body [Hash{String => Hash{String => String}}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_dictionary_valid(array_body, custom_headers = nil)
      response = put_dictionary_valid_async(array_body, custom_headers).value!
      nil
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6":
    # "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
    #
    # @param array_body [Hash{String => Hash{String => String}}]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_dictionary_valid_with_http_info(array_body, custom_headers = nil)
      put_dictionary_valid_async(array_body, custom_headers).value!
    end

    #
    # Get an dictionaries of dictionaries of type <string, string> with value {"0":
    # {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6":
    # "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
    #
    # @param array_body [Hash{String => Hash{String => String}}]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_dictionary_valid_async(array_body, custom_headers = nil)
      fail ArgumentError, 'array_body is nil' if array_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'arrayBody',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'HashElementType',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'StringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  array_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'dictionary/dictionary/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
