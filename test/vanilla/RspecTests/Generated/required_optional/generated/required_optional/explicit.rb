# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module RequiredOptionalModule
  #
  # Test Infrastructure for AutoRest
  #
  class Explicit

    #
    # Creates and initializes a new instance of the Explicit class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestRequiredOptionalTestService] reference to the AutoRestRequiredOptionalTestService
    attr_reader :client

    #
    # Test explicitly required integer. Please put null and the client library
    # should throw before the request is sent.
    #
    # @param body_parameter [Integer]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post_required_integer_parameter(body_parameter, custom_headers = nil)
      response = post_required_integer_parameter_async(body_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test explicitly required integer. Please put null and the client library
    # should throw before the request is sent.
    #
    # @param body_parameter [Integer]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_required_integer_parameter_with_http_info(body_parameter, custom_headers = nil)
      post_required_integer_parameter_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly required integer. Please put null and the client library
    # should throw before the request is sent.
    #
    # @param body_parameter [Integer]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_integer_parameter_async(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'bodyParameter',
        type: {
          name: 'Number'
        }
      }
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/requied/integer/parameter'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional integer. Please put null.
    #
    # @param body_parameter [Integer]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional_integer_parameter(body_parameter = nil, custom_headers = nil)
      response = post_optional_integer_parameter_async(body_parameter, custom_headers).value!
      nil
    end

    #
    # Test explicitly optional integer. Please put null.
    #
    # @param body_parameter [Integer]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_optional_integer_parameter_with_http_info(body_parameter = nil, custom_headers = nil)
      post_optional_integer_parameter_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly optional integer. Please put null.
    #
    # @param body_parameter [Integer]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_integer_parameter_async(body_parameter = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'bodyParameter',
        type: {
          name: 'Number'
        }
      }
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/optional/integer/parameter'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test explicitly required integer. Please put a valid int-wrapper with 'value'
    # = null and the client library should throw before the request is sent.
    #
    # @param body_parameter [IntWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post_required_integer_property(body_parameter, custom_headers = nil)
      response = post_required_integer_property_async(body_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test explicitly required integer. Please put a valid int-wrapper with 'value'
    # = null and the client library should throw before the request is sent.
    #
    # @param body_parameter [IntWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_required_integer_property_with_http_info(body_parameter, custom_headers = nil)
      post_required_integer_property_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly required integer. Please put a valid int-wrapper with 'value'
    # = null and the client library should throw before the request is sent.
    #
    # @param body_parameter [IntWrapper]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_integer_property_async(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = RequiredOptionalModule::Models::IntWrapper.mapper()
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/requied/integer/property'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional integer. Please put a valid int-wrapper with 'value'
    # = null.
    #
    # @param body_parameter [IntOptionalWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional_integer_property(body_parameter = nil, custom_headers = nil)
      response = post_optional_integer_property_async(body_parameter, custom_headers).value!
      nil
    end

    #
    # Test explicitly optional integer. Please put a valid int-wrapper with 'value'
    # = null.
    #
    # @param body_parameter [IntOptionalWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_optional_integer_property_with_http_info(body_parameter = nil, custom_headers = nil)
      post_optional_integer_property_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly optional integer. Please put a valid int-wrapper with 'value'
    # = null.
    #
    # @param body_parameter [IntOptionalWrapper]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_integer_property_async(body_parameter = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = RequiredOptionalModule::Models::IntOptionalWrapper.mapper()
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/optional/integer/property'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test explicitly required integer. Please put a header 'headerParameter' =>
    # null and the client library should throw before the request is sent.
    #
    # @param header_parameter [Integer]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post_required_integer_header(header_parameter, custom_headers = nil)
      response = post_required_integer_header_async(header_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test explicitly required integer. Please put a header 'headerParameter' =>
    # null and the client library should throw before the request is sent.
    #
    # @param header_parameter [Integer]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_required_integer_header_with_http_info(header_parameter, custom_headers = nil)
      post_required_integer_header_async(header_parameter, custom_headers).value!
    end

    #
    # Test explicitly required integer. Please put a header 'headerParameter' =>
    # null and the client library should throw before the request is sent.
    #
    # @param header_parameter [Integer]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_integer_header_async(header_parameter, custom_headers = nil)
      fail ArgumentError, 'header_parameter is nil' if header_parameter.nil?


      request_headers = {}

      # Set Headers
      request_headers['headerParameter'] = header_parameter.to_s unless header_parameter.to_s.nil?
      path_template = 'reqopt/requied/integer/header'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional integer. Please put a header 'headerParameter' =>
    # null.
    #
    # @param header_parameter [Integer]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional_integer_header(header_parameter = nil, custom_headers = nil)
      response = post_optional_integer_header_async(header_parameter, custom_headers).value!
      nil
    end

    #
    # Test explicitly optional integer. Please put a header 'headerParameter' =>
    # null.
    #
    # @param header_parameter [Integer]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_optional_integer_header_with_http_info(header_parameter = nil, custom_headers = nil)
      post_optional_integer_header_async(header_parameter, custom_headers).value!
    end

    #
    # Test explicitly optional integer. Please put a header 'headerParameter' =>
    # null.
    #
    # @param header_parameter [Integer]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_integer_header_async(header_parameter = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['headerParameter'] = header_parameter.to_s unless header_parameter.to_s.nil?
      path_template = 'reqopt/optional/integer/header'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test explicitly required string. Please put null and the client library
    # should throw before the request is sent.
    #
    # @param body_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post_required_string_parameter(body_parameter, custom_headers = nil)
      response = post_required_string_parameter_async(body_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test explicitly required string. Please put null and the client library
    # should throw before the request is sent.
    #
    # @param body_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_required_string_parameter_with_http_info(body_parameter, custom_headers = nil)
      post_required_string_parameter_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly required string. Please put null and the client library
    # should throw before the request is sent.
    #
    # @param body_parameter [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_string_parameter_async(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'bodyParameter',
        type: {
          name: 'String'
        }
      }
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/requied/string/parameter'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional string. Please put null.
    #
    # @param body_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional_string_parameter(body_parameter = nil, custom_headers = nil)
      response = post_optional_string_parameter_async(body_parameter, custom_headers).value!
      nil
    end

    #
    # Test explicitly optional string. Please put null.
    #
    # @param body_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_optional_string_parameter_with_http_info(body_parameter = nil, custom_headers = nil)
      post_optional_string_parameter_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly optional string. Please put null.
    #
    # @param body_parameter [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_string_parameter_async(body_parameter = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'bodyParameter',
        type: {
          name: 'String'
        }
      }
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/optional/string/parameter'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test explicitly required string. Please put a valid string-wrapper with
    # 'value' = null and the client library should throw before the request is
    # sent.
    #
    # @param body_parameter [StringWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post_required_string_property(body_parameter, custom_headers = nil)
      response = post_required_string_property_async(body_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test explicitly required string. Please put a valid string-wrapper with
    # 'value' = null and the client library should throw before the request is
    # sent.
    #
    # @param body_parameter [StringWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_required_string_property_with_http_info(body_parameter, custom_headers = nil)
      post_required_string_property_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly required string. Please put a valid string-wrapper with
    # 'value' = null and the client library should throw before the request is
    # sent.
    #
    # @param body_parameter [StringWrapper]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_string_property_async(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = RequiredOptionalModule::Models::StringWrapper.mapper()
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/requied/string/property'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional integer. Please put a valid string-wrapper with
    # 'value' = null.
    #
    # @param body_parameter [StringOptionalWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional_string_property(body_parameter = nil, custom_headers = nil)
      response = post_optional_string_property_async(body_parameter, custom_headers).value!
      nil
    end

    #
    # Test explicitly optional integer. Please put a valid string-wrapper with
    # 'value' = null.
    #
    # @param body_parameter [StringOptionalWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_optional_string_property_with_http_info(body_parameter = nil, custom_headers = nil)
      post_optional_string_property_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly optional integer. Please put a valid string-wrapper with
    # 'value' = null.
    #
    # @param body_parameter [StringOptionalWrapper]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_string_property_async(body_parameter = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = RequiredOptionalModule::Models::StringOptionalWrapper.mapper()
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/optional/string/property'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test explicitly required string. Please put a header 'headerParameter' =>
    # null and the client library should throw before the request is sent.
    #
    # @param header_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post_required_string_header(header_parameter, custom_headers = nil)
      response = post_required_string_header_async(header_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test explicitly required string. Please put a header 'headerParameter' =>
    # null and the client library should throw before the request is sent.
    #
    # @param header_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_required_string_header_with_http_info(header_parameter, custom_headers = nil)
      post_required_string_header_async(header_parameter, custom_headers).value!
    end

    #
    # Test explicitly required string. Please put a header 'headerParameter' =>
    # null and the client library should throw before the request is sent.
    #
    # @param header_parameter [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_string_header_async(header_parameter, custom_headers = nil)
      fail ArgumentError, 'header_parameter is nil' if header_parameter.nil?


      request_headers = {}

      # Set Headers
      request_headers['headerParameter'] = header_parameter unless header_parameter.nil?
      path_template = 'reqopt/requied/string/header'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional string. Please put a header 'headerParameter' =>
    # null.
    #
    # @param body_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional_string_header(body_parameter = nil, custom_headers = nil)
      response = post_optional_string_header_async(body_parameter, custom_headers).value!
      nil
    end

    #
    # Test explicitly optional string. Please put a header 'headerParameter' =>
    # null.
    #
    # @param body_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_optional_string_header_with_http_info(body_parameter = nil, custom_headers = nil)
      post_optional_string_header_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly optional string. Please put a header 'headerParameter' =>
    # null.
    #
    # @param body_parameter [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_string_header_async(body_parameter = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['bodyParameter'] = body_parameter unless body_parameter.nil?
      path_template = 'reqopt/optional/string/header'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test explicitly required complex object. Please put null and the client
    # library should throw before the request is sent.
    #
    # @param body_parameter [Product]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post_required_class_parameter(body_parameter, custom_headers = nil)
      response = post_required_class_parameter_async(body_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test explicitly required complex object. Please put null and the client
    # library should throw before the request is sent.
    #
    # @param body_parameter [Product]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_required_class_parameter_with_http_info(body_parameter, custom_headers = nil)
      post_required_class_parameter_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly required complex object. Please put null and the client
    # library should throw before the request is sent.
    #
    # @param body_parameter [Product]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_class_parameter_async(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = RequiredOptionalModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/requied/class/parameter'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional complex object. Please put null.
    #
    # @param body_parameter [Product]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional_class_parameter(body_parameter = nil, custom_headers = nil)
      response = post_optional_class_parameter_async(body_parameter, custom_headers).value!
      nil
    end

    #
    # Test explicitly optional complex object. Please put null.
    #
    # @param body_parameter [Product]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_optional_class_parameter_with_http_info(body_parameter = nil, custom_headers = nil)
      post_optional_class_parameter_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly optional complex object. Please put null.
    #
    # @param body_parameter [Product]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_class_parameter_async(body_parameter = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = RequiredOptionalModule::Models::Product.mapper()
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/optional/class/parameter'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test explicitly required complex object. Please put a valid class-wrapper
    # with 'value' = null and the client library should throw before the request is
    # sent.
    #
    # @param body_parameter [ClassWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post_required_class_property(body_parameter, custom_headers = nil)
      response = post_required_class_property_async(body_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test explicitly required complex object. Please put a valid class-wrapper
    # with 'value' = null and the client library should throw before the request is
    # sent.
    #
    # @param body_parameter [ClassWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_required_class_property_with_http_info(body_parameter, custom_headers = nil)
      post_required_class_property_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly required complex object. Please put a valid class-wrapper
    # with 'value' = null and the client library should throw before the request is
    # sent.
    #
    # @param body_parameter [ClassWrapper]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_class_property_async(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = RequiredOptionalModule::Models::ClassWrapper.mapper()
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/requied/class/property'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional complex object. Please put a valid class-wrapper
    # with 'value' = null.
    #
    # @param body_parameter [ClassOptionalWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional_class_property(body_parameter = nil, custom_headers = nil)
      response = post_optional_class_property_async(body_parameter, custom_headers).value!
      nil
    end

    #
    # Test explicitly optional complex object. Please put a valid class-wrapper
    # with 'value' = null.
    #
    # @param body_parameter [ClassOptionalWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_optional_class_property_with_http_info(body_parameter = nil, custom_headers = nil)
      post_optional_class_property_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly optional complex object. Please put a valid class-wrapper
    # with 'value' = null.
    #
    # @param body_parameter [ClassOptionalWrapper]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_class_property_async(body_parameter = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = RequiredOptionalModule::Models::ClassOptionalWrapper.mapper()
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/optional/class/property'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test explicitly required array. Please put null and the client library should
    # throw before the request is sent.
    #
    # @param body_parameter [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post_required_array_parameter(body_parameter, custom_headers = nil)
      response = post_required_array_parameter_async(body_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test explicitly required array. Please put null and the client library should
    # throw before the request is sent.
    #
    # @param body_parameter [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_required_array_parameter_with_http_info(body_parameter, custom_headers = nil)
      post_required_array_parameter_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly required array. Please put null and the client library should
    # throw before the request is sent.
    #
    # @param body_parameter [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_array_parameter_async(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'bodyParameter',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serialized_name: 'StringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/requied/array/parameter'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional array. Please put null.
    #
    # @param body_parameter [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional_array_parameter(body_parameter = nil, custom_headers = nil)
      response = post_optional_array_parameter_async(body_parameter, custom_headers).value!
      nil
    end

    #
    # Test explicitly optional array. Please put null.
    #
    # @param body_parameter [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_optional_array_parameter_with_http_info(body_parameter = nil, custom_headers = nil)
      post_optional_array_parameter_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly optional array. Please put null.
    #
    # @param body_parameter [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_array_parameter_async(body_parameter = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'bodyParameter',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serialized_name: 'StringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/optional/array/parameter'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test explicitly required array. Please put a valid array-wrapper with 'value'
    # = null and the client library should throw before the request is sent.
    #
    # @param body_parameter [ArrayWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post_required_array_property(body_parameter, custom_headers = nil)
      response = post_required_array_property_async(body_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test explicitly required array. Please put a valid array-wrapper with 'value'
    # = null and the client library should throw before the request is sent.
    #
    # @param body_parameter [ArrayWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_required_array_property_with_http_info(body_parameter, custom_headers = nil)
      post_required_array_property_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly required array. Please put a valid array-wrapper with 'value'
    # = null and the client library should throw before the request is sent.
    #
    # @param body_parameter [ArrayWrapper]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_array_property_async(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = RequiredOptionalModule::Models::ArrayWrapper.mapper()
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/requied/array/property'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional array. Please put a valid array-wrapper with 'value'
    # = null.
    #
    # @param body_parameter [ArrayOptionalWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional_array_property(body_parameter = nil, custom_headers = nil)
      response = post_optional_array_property_async(body_parameter, custom_headers).value!
      nil
    end

    #
    # Test explicitly optional array. Please put a valid array-wrapper with 'value'
    # = null.
    #
    # @param body_parameter [ArrayOptionalWrapper]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_optional_array_property_with_http_info(body_parameter = nil, custom_headers = nil)
      post_optional_array_property_async(body_parameter, custom_headers).value!
    end

    #
    # Test explicitly optional array. Please put a valid array-wrapper with 'value'
    # = null.
    #
    # @param body_parameter [ArrayOptionalWrapper]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_array_property_async(body_parameter = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = RequiredOptionalModule::Models::ArrayOptionalWrapper.mapper()
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/optional/array/property'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test explicitly required array. Please put a header 'headerParameter' => null
    # and the client library should throw before the request is sent.
    #
    # @param header_parameter [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post_required_array_header(header_parameter, custom_headers = nil)
      response = post_required_array_header_async(header_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test explicitly required array. Please put a header 'headerParameter' => null
    # and the client library should throw before the request is sent.
    #
    # @param header_parameter [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_required_array_header_with_http_info(header_parameter, custom_headers = nil)
      post_required_array_header_async(header_parameter, custom_headers).value!
    end

    #
    # Test explicitly required array. Please put a header 'headerParameter' => null
    # and the client library should throw before the request is sent.
    #
    # @param header_parameter [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_required_array_header_async(header_parameter, custom_headers = nil)
      fail ArgumentError, 'header_parameter is nil' if header_parameter.nil?


      request_headers = {}

      # Set Headers
      request_headers['headerParameter'] = header_parameter.to_s unless header_parameter.to_s.nil?
      path_template = 'reqopt/requied/array/header'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional integer. Please put a header 'headerParameter' =>
    # null.
    #
    # @param header_parameter [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_optional_array_header(header_parameter = nil, custom_headers = nil)
      response = post_optional_array_header_async(header_parameter, custom_headers).value!
      nil
    end

    #
    # Test explicitly optional integer. Please put a header 'headerParameter' =>
    # null.
    #
    # @param header_parameter [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_optional_array_header_with_http_info(header_parameter = nil, custom_headers = nil)
      post_optional_array_header_async(header_parameter, custom_headers).value!
    end

    #
    # Test explicitly optional integer. Please put a header 'headerParameter' =>
    # null.
    #
    # @param header_parameter [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_optional_array_header_async(header_parameter = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['headerParameter'] = header_parameter.to_s unless header_parameter.to_s.nil?
      path_template = 'reqopt/optional/array/header'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
