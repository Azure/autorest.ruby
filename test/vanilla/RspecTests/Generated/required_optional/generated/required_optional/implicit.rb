# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module RequiredOptionalModule
  #
  # Test Infrastructure for AutoRest
  #
  class Implicit

    #
    # Creates and initializes a new instance of the Implicit class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestRequiredOptionalTestService] reference to the AutoRestRequiredOptionalTestService
    attr_reader :client

    #
    # Test implicitly required path parameter
    #
    # @param path_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def get_required_path(path_parameter, custom_headers = nil)
      response = get_required_path_async(path_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test implicitly required path parameter
    #
    # @param path_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_required_path_with_http_info(path_parameter, custom_headers = nil)
      get_required_path_async(path_parameter, custom_headers).value!
    end

    #
    # Test implicitly required path parameter
    #
    # @param path_parameter [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_required_path_async(path_parameter, custom_headers = nil)
      fail ArgumentError, 'path_parameter is nil' if path_parameter.nil?


      request_headers = {}
      path_template = 'reqopt/implicit/required/path/{pathParameter}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'pathParameter' => path_parameter},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test implicitly optional query parameter
    #
    # @param query_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_optional_query(query_parameter = nil, custom_headers = nil)
      response = put_optional_query_async(query_parameter, custom_headers).value!
      nil
    end

    #
    # Test implicitly optional query parameter
    #
    # @param query_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_optional_query_with_http_info(query_parameter = nil, custom_headers = nil)
      put_optional_query_async(query_parameter, custom_headers).value!
    end

    #
    # Test implicitly optional query parameter
    #
    # @param query_parameter [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_optional_query_async(query_parameter = nil, custom_headers = nil)


      request_headers = {}
      path_template = 'reqopt/implicit/optional/query'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'queryParameter' => query_parameter},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test implicitly optional header parameter
    #
    # @param query_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_optional_header(query_parameter = nil, custom_headers = nil)
      response = put_optional_header_async(query_parameter, custom_headers).value!
      nil
    end

    #
    # Test implicitly optional header parameter
    #
    # @param query_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_optional_header_with_http_info(query_parameter = nil, custom_headers = nil)
      put_optional_header_async(query_parameter, custom_headers).value!
    end

    #
    # Test implicitly optional header parameter
    #
    # @param query_parameter [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_optional_header_async(query_parameter = nil, custom_headers = nil)


      request_headers = {}

      # Set Headers
      request_headers['queryParameter'] = query_parameter unless query_parameter.nil?
      path_template = 'reqopt/implicit/optional/header'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test implicitly optional body parameter
    #
    # @param body_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_optional_body(body_parameter = nil, custom_headers = nil)
      response = put_optional_body_async(body_parameter, custom_headers).value!
      nil
    end

    #
    # Test implicitly optional body parameter
    #
    # @param body_parameter [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_optional_body_with_http_info(body_parameter = nil, custom_headers = nil)
      put_optional_body_async(body_parameter, custom_headers).value!
    end

    #
    # Test implicitly optional body parameter
    #
    # @param body_parameter [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_optional_body_async(body_parameter = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'bodyParameter',
        type: {
          name: 'String'
        }
      }
      request_content = @client.serialize(request_mapper,  body_parameter)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'reqopt/implicit/optional/body'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Test implicitly required path parameter
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def get_required_global_path(custom_headers = nil)
      response = get_required_global_path_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test implicitly required path parameter
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_required_global_path_with_http_info(custom_headers = nil)
      get_required_global_path_async(custom_headers).value!
    end

    #
    # Test implicitly required path parameter
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_required_global_path_async(custom_headers = nil)
      fail ArgumentError, '@client.required_global_path is nil' if @client.required_global_path.nil?


      request_headers = {}
      path_template = 'reqopt/global/required/path/{required-global-path}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'required-global-path' => @client.required_global_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test implicitly required query parameter
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def get_required_global_query(custom_headers = nil)
      response = get_required_global_query_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test implicitly required query parameter
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_required_global_query_with_http_info(custom_headers = nil)
      get_required_global_query_async(custom_headers).value!
    end

    #
    # Test implicitly required query parameter
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_required_global_query_async(custom_headers = nil)
      fail ArgumentError, '@client.required_global_query is nil' if @client.required_global_query.nil?


      request_headers = {}
      path_template = 'reqopt/global/required/query'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'required-global-query' => @client.required_global_query},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Test implicitly optional query parameter
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def get_optional_global_query(custom_headers = nil)
      response = get_optional_global_query_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Test implicitly optional query parameter
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_optional_global_query_with_http_info(custom_headers = nil)
      get_optional_global_query_async(custom_headers).value!
    end

    #
    # Test implicitly optional query parameter
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_optional_global_query_async(custom_headers = nil)


      request_headers = {}
      path_template = 'reqopt/global/optional/query'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'optional-global-query' => @client.optional_global_query},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = RequiredOptionalModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

  end
end
