# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module ComplexModule
  #
  # Test Infrastructure for AutoRest
  #
  class Primitive

    #
    # Creates and initializes a new instance of the Primitive class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestComplexTestService] reference to the AutoRestComplexTestService
    attr_reader :client

    #
    # Get complex types with integer properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [IntWrapper] operation results.
    #
    def get_int(custom_headers = nil)
      response = get_int_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with integer properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_int_with_http_info(custom_headers = nil)
      get_int_async(custom_headers).value!
    end

    #
    # Get complex types with integer properties
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_int_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/primitive/integer'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::IntWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with integer properties
    #
    # @param complex_body [IntWrapper] Please put -1 and 2
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_int(complex_body, custom_headers = nil)
      response = put_int_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with integer properties
    #
    # @param complex_body [IntWrapper] Please put -1 and 2
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_int_with_http_info(complex_body, custom_headers = nil)
      put_int_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with integer properties
    #
    # @param complex_body [IntWrapper] Please put -1 and 2
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_int_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::IntWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/primitive/integer'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with long properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [LongWrapper] operation results.
    #
    def get_long(custom_headers = nil)
      response = get_long_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with long properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_long_with_http_info(custom_headers = nil)
      get_long_async(custom_headers).value!
    end

    #
    # Get complex types with long properties
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_long_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/primitive/long'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::LongWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with long properties
    #
    # @param complex_body [LongWrapper] Please put 1099511627775 and -999511627788
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_long(complex_body, custom_headers = nil)
      response = put_long_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with long properties
    #
    # @param complex_body [LongWrapper] Please put 1099511627775 and -999511627788
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_long_with_http_info(complex_body, custom_headers = nil)
      put_long_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with long properties
    #
    # @param complex_body [LongWrapper] Please put 1099511627775 and -999511627788
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_long_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::LongWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/primitive/long'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with float properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [FloatWrapper] operation results.
    #
    def get_float(custom_headers = nil)
      response = get_float_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with float properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_float_with_http_info(custom_headers = nil)
      get_float_async(custom_headers).value!
    end

    #
    # Get complex types with float properties
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_float_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/primitive/float'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::FloatWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with float properties
    #
    # @param complex_body [FloatWrapper] Please put 1.05 and -0.003
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_float(complex_body, custom_headers = nil)
      response = put_float_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with float properties
    #
    # @param complex_body [FloatWrapper] Please put 1.05 and -0.003
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_float_with_http_info(complex_body, custom_headers = nil)
      put_float_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with float properties
    #
    # @param complex_body [FloatWrapper] Please put 1.05 and -0.003
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_float_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::FloatWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/primitive/float'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with double properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DoubleWrapper] operation results.
    #
    def get_double(custom_headers = nil)
      response = get_double_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with double properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_double_with_http_info(custom_headers = nil)
      get_double_async(custom_headers).value!
    end

    #
    # Get complex types with double properties
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_double_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/primitive/double'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::DoubleWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with double properties
    #
    # @param complex_body [DoubleWrapper] Please put 3e-100 and
    # -0.000000000000000000000000000000000000000000000000000000005
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_double(complex_body, custom_headers = nil)
      response = put_double_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with double properties
    #
    # @param complex_body [DoubleWrapper] Please put 3e-100 and
    # -0.000000000000000000000000000000000000000000000000000000005
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_double_with_http_info(complex_body, custom_headers = nil)
      put_double_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with double properties
    #
    # @param complex_body [DoubleWrapper] Please put 3e-100 and
    # -0.000000000000000000000000000000000000000000000000000000005
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_double_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::DoubleWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/primitive/double'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with bool properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BooleanWrapper] operation results.
    #
    def get_bool(custom_headers = nil)
      response = get_bool_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with bool properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_bool_with_http_info(custom_headers = nil)
      get_bool_async(custom_headers).value!
    end

    #
    # Get complex types with bool properties
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_bool_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/primitive/bool'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::BooleanWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with bool properties
    #
    # @param complex_body [BooleanWrapper] Please put true and false
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_bool(complex_body, custom_headers = nil)
      response = put_bool_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with bool properties
    #
    # @param complex_body [BooleanWrapper] Please put true and false
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_bool_with_http_info(complex_body, custom_headers = nil)
      put_bool_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with bool properties
    #
    # @param complex_body [BooleanWrapper] Please put true and false
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_bool_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::BooleanWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/primitive/bool'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with string properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [StringWrapper] operation results.
    #
    def get_string(custom_headers = nil)
      response = get_string_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with string properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_string_with_http_info(custom_headers = nil)
      get_string_async(custom_headers).value!
    end

    #
    # Get complex types with string properties
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_string_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/primitive/string'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::StringWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with string properties
    #
    # @param complex_body [StringWrapper] Please put 'goodrequest', '', and null
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_string(complex_body, custom_headers = nil)
      response = put_string_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with string properties
    #
    # @param complex_body [StringWrapper] Please put 'goodrequest', '', and null
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_string_with_http_info(complex_body, custom_headers = nil)
      put_string_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with string properties
    #
    # @param complex_body [StringWrapper] Please put 'goodrequest', '', and null
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_string_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::StringWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/primitive/string'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with date properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateWrapper] operation results.
    #
    def get_date(custom_headers = nil)
      response = get_date_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with date properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_date_with_http_info(custom_headers = nil)
      get_date_async(custom_headers).value!
    end

    #
    # Get complex types with date properties
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_date_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/primitive/date'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::DateWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with date properties
    #
    # @param complex_body [DateWrapper] Please put '0001-01-01' and '2016-02-29'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_date(complex_body, custom_headers = nil)
      response = put_date_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with date properties
    #
    # @param complex_body [DateWrapper] Please put '0001-01-01' and '2016-02-29'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_date_with_http_info(complex_body, custom_headers = nil)
      put_date_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with date properties
    #
    # @param complex_body [DateWrapper] Please put '0001-01-01' and '2016-02-29'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_date_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::DateWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/primitive/date'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with datetime properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DatetimeWrapper] operation results.
    #
    def get_date_time(custom_headers = nil)
      response = get_date_time_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with datetime properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_date_time_with_http_info(custom_headers = nil)
      get_date_time_async(custom_headers).value!
    end

    #
    # Get complex types with datetime properties
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_date_time_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/primitive/datetime'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::DatetimeWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with datetime properties
    #
    # @param complex_body [DatetimeWrapper] Please put '0001-01-01T12:00:00-04:00'
    # and '2015-05-18T11:38:00-08:00'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_date_time(complex_body, custom_headers = nil)
      response = put_date_time_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with datetime properties
    #
    # @param complex_body [DatetimeWrapper] Please put '0001-01-01T12:00:00-04:00'
    # and '2015-05-18T11:38:00-08:00'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_date_time_with_http_info(complex_body, custom_headers = nil)
      put_date_time_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with datetime properties
    #
    # @param complex_body [DatetimeWrapper] Please put '0001-01-01T12:00:00-04:00'
    # and '2015-05-18T11:38:00-08:00'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_date_time_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::DatetimeWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/primitive/datetime'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with datetimeRfc1123 properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Datetimerfc1123Wrapper] operation results.
    #
    def get_date_time_rfc1123(custom_headers = nil)
      response = get_date_time_rfc1123_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with datetimeRfc1123 properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_date_time_rfc1123_with_http_info(custom_headers = nil)
      get_date_time_rfc1123_async(custom_headers).value!
    end

    #
    # Get complex types with datetimeRfc1123 properties
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_date_time_rfc1123_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/primitive/datetimerfc1123'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::Datetimerfc1123Wrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with datetimeRfc1123 properties
    #
    # @param complex_body [Datetimerfc1123Wrapper] Please put 'Mon, 01 Jan 0001
    # 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_date_time_rfc1123(complex_body, custom_headers = nil)
      response = put_date_time_rfc1123_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with datetimeRfc1123 properties
    #
    # @param complex_body [Datetimerfc1123Wrapper] Please put 'Mon, 01 Jan 0001
    # 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_date_time_rfc1123_with_http_info(complex_body, custom_headers = nil)
      put_date_time_rfc1123_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with datetimeRfc1123 properties
    #
    # @param complex_body [Datetimerfc1123Wrapper] Please put 'Mon, 01 Jan 0001
    # 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_date_time_rfc1123_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::Datetimerfc1123Wrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/primitive/datetimerfc1123'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with duration properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DurationWrapper] operation results.
    #
    def get_duration(custom_headers = nil)
      response = get_duration_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with duration properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_duration_with_http_info(custom_headers = nil)
      get_duration_async(custom_headers).value!
    end

    #
    # Get complex types with duration properties
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_duration_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/primitive/duration'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::DurationWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with duration properties
    #
    # @param complex_body [DurationWrapper] Please put 'P123DT22H14M12.011S'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_duration(complex_body, custom_headers = nil)
      response = put_duration_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with duration properties
    #
    # @param complex_body [DurationWrapper] Please put 'P123DT22H14M12.011S'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_duration_with_http_info(complex_body, custom_headers = nil)
      put_duration_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with duration properties
    #
    # @param complex_body [DurationWrapper] Please put 'P123DT22H14M12.011S'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_duration_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::DurationWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/primitive/duration'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with byte properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ByteWrapper] operation results.
    #
    def get_byte(custom_headers = nil)
      response = get_byte_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with byte properties
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_byte_with_http_info(custom_headers = nil)
      get_byte_async(custom_headers).value!
    end

    #
    # Get complex types with byte properties
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_byte_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/primitive/byte'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::ByteWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with byte properties
    #
    # @param complex_body [ByteWrapper] Please put non-ascii byte string hex(FF FE
    # FD FC 00 FA F9 F8 F7 F6)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_byte(complex_body, custom_headers = nil)
      response = put_byte_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with byte properties
    #
    # @param complex_body [ByteWrapper] Please put non-ascii byte string hex(FF FE
    # FD FC 00 FA F9 F8 F7 F6)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_byte_with_http_info(complex_body, custom_headers = nil)
      put_byte_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with byte properties
    #
    # @param complex_body [ByteWrapper] Please put non-ascii byte string hex(FF FE
    # FD FC 00 FA F9 F8 F7 F6)
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_byte_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::ByteWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/primitive/byte'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
