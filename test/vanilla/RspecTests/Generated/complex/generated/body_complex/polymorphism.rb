# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module ComplexModule
  #
  # Test Infrastructure for AutoRest
  #
  class Polymorphism

    #
    # Creates and initializes a new instance of the Polymorphism class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestComplexTestService] reference to the AutoRestComplexTestService
    attr_reader :client

    #
    # Get complex types that are polymorphic
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Fish] operation results.
    #
    def get_valid(custom_headers = nil)
      response = get_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types that are polymorphic
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_valid_with_http_info(custom_headers = nil)
      get_valid_async(custom_headers).value!
    end

    #
    # Get complex types that are polymorphic
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/polymorphism/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::Fish.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types that are polymorphic
    #
    # @param complex_body [Fish] Please put a salmon that looks like this:
    # {
    # 'fishtype':'Salmon',
    # 'location':'alaska',
    # 'iswild':true,
    # 'species':'king',
    # 'length':1.0,
    # 'siblings':[
    # {
    # 'fishtype':'Shark',
    # 'age':6,
    # 'birthday': '2012-01-05T01:00:00Z',
    # 'length':20.0,
    # 'species':'predator',
    # },
    # {
    # 'fishtype':'Sawshark',
    # 'age':105,
    # 'birthday': '1900-01-05T01:00:00Z',
    # 'length':10.0,
    # 'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
    # 'species':'dangerous',
    # },
    # {
    # 'fishtype': 'goblin',
    # 'age': 1,
    # 'birthday': '2015-08-08T00:00:00Z',
    # 'length': 30.0,
    # 'species': 'scary',
    # 'jawsize': 5
    # }
    # ]
    # };
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_valid(complex_body, custom_headers = nil)
      response = put_valid_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types that are polymorphic
    #
    # @param complex_body [Fish] Please put a salmon that looks like this:
    # {
    # 'fishtype':'Salmon',
    # 'location':'alaska',
    # 'iswild':true,
    # 'species':'king',
    # 'length':1.0,
    # 'siblings':[
    # {
    # 'fishtype':'Shark',
    # 'age':6,
    # 'birthday': '2012-01-05T01:00:00Z',
    # 'length':20.0,
    # 'species':'predator',
    # },
    # {
    # 'fishtype':'Sawshark',
    # 'age':105,
    # 'birthday': '1900-01-05T01:00:00Z',
    # 'length':10.0,
    # 'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
    # 'species':'dangerous',
    # },
    # {
    # 'fishtype': 'goblin',
    # 'age': 1,
    # 'birthday': '2015-08-08T00:00:00Z',
    # 'length': 30.0,
    # 'species': 'scary',
    # 'jawsize': 5
    # }
    # ]
    # };
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_valid_with_http_info(complex_body, custom_headers = nil)
      put_valid_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types that are polymorphic
    #
    # @param complex_body [Fish] Please put a salmon that looks like this:
    # {
    # 'fishtype':'Salmon',
    # 'location':'alaska',
    # 'iswild':true,
    # 'species':'king',
    # 'length':1.0,
    # 'siblings':[
    # {
    # 'fishtype':'Shark',
    # 'age':6,
    # 'birthday': '2012-01-05T01:00:00Z',
    # 'length':20.0,
    # 'species':'predator',
    # },
    # {
    # 'fishtype':'Sawshark',
    # 'age':105,
    # 'birthday': '1900-01-05T01:00:00Z',
    # 'length':10.0,
    # 'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
    # 'species':'dangerous',
    # },
    # {
    # 'fishtype': 'goblin',
    # 'age': 1,
    # 'birthday': '2015-08-08T00:00:00Z',
    # 'length': 30.0,
    # 'species': 'scary',
    # 'jawsize': 5
    # }
    # ]
    # };
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_valid_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::Fish.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/polymorphism/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Put complex types that are polymorphic, attempting to omit required
    # 'birthday' field - the request should not be allowed from the client
    #
    # @param complex_body [Fish] Please attempt put a sawshark that looks like
    # this, the client should not allow this data to be sent:
    # {
    # "fishtype": "sawshark",
    # "species": "snaggle toothed",
    # "length": 18.5,
    # "age": 2,
    # "birthday": "2013-06-01T01:00:00Z",
    # "location": "alaska",
    # "picture": base64(FF FF FF FF FE),
    # "siblings": [
    # {
    # "fishtype": "shark",
    # "species": "predator",
    # "birthday": "2012-01-05T01:00:00Z",
    # "length": 20,
    # "age": 6
    # },
    # {
    # "fishtype": "sawshark",
    # "species": "dangerous",
    # "picture": base64(FF FF FF FF FE),
    # "length": 10,
    # "age": 105
    # }
    # ]
    # }
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_valid_missing_required(complex_body, custom_headers = nil)
      response = put_valid_missing_required_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types that are polymorphic, attempting to omit required
    # 'birthday' field - the request should not be allowed from the client
    #
    # @param complex_body [Fish] Please attempt put a sawshark that looks like
    # this, the client should not allow this data to be sent:
    # {
    # "fishtype": "sawshark",
    # "species": "snaggle toothed",
    # "length": 18.5,
    # "age": 2,
    # "birthday": "2013-06-01T01:00:00Z",
    # "location": "alaska",
    # "picture": base64(FF FF FF FF FE),
    # "siblings": [
    # {
    # "fishtype": "shark",
    # "species": "predator",
    # "birthday": "2012-01-05T01:00:00Z",
    # "length": 20,
    # "age": 6
    # },
    # {
    # "fishtype": "sawshark",
    # "species": "dangerous",
    # "picture": base64(FF FF FF FF FE),
    # "length": 10,
    # "age": 105
    # }
    # ]
    # }
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_valid_missing_required_with_http_info(complex_body, custom_headers = nil)
      put_valid_missing_required_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types that are polymorphic, attempting to omit required
    # 'birthday' field - the request should not be allowed from the client
    #
    # @param complex_body [Fish] Please attempt put a sawshark that looks like
    # this, the client should not allow this data to be sent:
    # {
    # "fishtype": "sawshark",
    # "species": "snaggle toothed",
    # "length": 18.5,
    # "age": 2,
    # "birthday": "2013-06-01T01:00:00Z",
    # "location": "alaska",
    # "picture": base64(FF FF FF FF FE),
    # "siblings": [
    # {
    # "fishtype": "shark",
    # "species": "predator",
    # "birthday": "2012-01-05T01:00:00Z",
    # "length": 20,
    # "age": 6
    # },
    # {
    # "fishtype": "sawshark",
    # "species": "dangerous",
    # "picture": base64(FF FF FF FF FE),
    # "length": 10,
    # "age": 105
    # }
    # ]
    # }
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_valid_missing_required_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::Fish.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/polymorphism/missingrequired/invalid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
