# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module ComplexModule
  #
  # Test Infrastructure for AutoRest
  #
  class Dictionary

    #
    # Creates and initializes a new instance of the Dictionary class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestComplexTestService] reference to the AutoRestComplexTestService
    attr_reader :client

    #
    # Get complex types with dictionary property
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DictionaryWrapper] operation results.
    #
    def get_valid(custom_headers = nil)
      response = get_valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with dictionary property
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_valid_with_http_info(custom_headers = nil)
      get_valid_async(custom_headers).value!
    end

    #
    # Get complex types with dictionary property
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/dictionary/typed/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::DictionaryWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with dictionary property
    #
    # @param complex_body [DictionaryWrapper] Please put a dictionary with 5
    # key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"",
    # "":null
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_valid(complex_body, custom_headers = nil)
      response = put_valid_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with dictionary property
    #
    # @param complex_body [DictionaryWrapper] Please put a dictionary with 5
    # key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"",
    # "":null
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_valid_with_http_info(complex_body, custom_headers = nil)
      put_valid_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with dictionary property
    #
    # @param complex_body [DictionaryWrapper] Please put a dictionary with 5
    # key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"",
    # "":null
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_valid_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::DictionaryWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/dictionary/typed/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with dictionary property which is empty
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DictionaryWrapper] operation results.
    #
    def get_empty(custom_headers = nil)
      response = get_empty_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with dictionary property which is empty
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_empty_with_http_info(custom_headers = nil)
      get_empty_async(custom_headers).value!
    end

    #
    # Get complex types with dictionary property which is empty
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_empty_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/dictionary/typed/empty'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::DictionaryWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put complex types with dictionary property which is empty
    #
    # @param complex_body [DictionaryWrapper] Please put an empty dictionary
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_empty(complex_body, custom_headers = nil)
      response = put_empty_async(complex_body, custom_headers).value!
      nil
    end

    #
    # Put complex types with dictionary property which is empty
    #
    # @param complex_body [DictionaryWrapper] Please put an empty dictionary
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_empty_with_http_info(complex_body, custom_headers = nil)
      put_empty_async(complex_body, custom_headers).value!
    end

    #
    # Put complex types with dictionary property which is empty
    #
    # @param complex_body [DictionaryWrapper] Please put an empty dictionary
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_empty_async(complex_body, custom_headers = nil)
      fail ArgumentError, 'complex_body is nil' if complex_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ComplexModule::Models::DictionaryWrapper.mapper()
      request_content = @client.serialize(request_mapper,  complex_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'complex/dictionary/typed/empty'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get complex types with dictionary property which is null
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DictionaryWrapper] operation results.
    #
    def get_null(custom_headers = nil)
      response = get_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with dictionary property which is null
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_null_with_http_info(custom_headers = nil)
      get_null_async(custom_headers).value!
    end

    #
    # Get complex types with dictionary property which is null
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/dictionary/typed/null'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::DictionaryWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get complex types with dictionary property while server doesn't provide a
    # response payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DictionaryWrapper] operation results.
    #
    def get_not_provided(custom_headers = nil)
      response = get_not_provided_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get complex types with dictionary property while server doesn't provide a
    # response payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_not_provided_with_http_info(custom_headers = nil)
      get_not_provided_async(custom_headers).value!
    end

    #
    # Get complex types with dictionary property while server doesn't provide a
    # response payload
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_not_provided_async(custom_headers = nil)


      request_headers = {}
      path_template = 'complex/dictionary/typed/notprovided'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ComplexModule::Models::DictionaryWrapper.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end
