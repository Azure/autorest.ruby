# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module CustomBaseUriMoreModule
  #
  # Test Infrastructure for AutoRest
  #
  class Paths

    #
    # Creates and initializes a new instance of the Paths class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestParameterizedCustomHostTestClient] reference to the AutoRestParameterizedCustomHostTestClient
    attr_reader :client

    #
    # Get a 200 to test a valid base uri
    #
    # @param vault [String] The vault name, e.g. https://myvault
    # @param secret [String] Secret value.
    # @param key_name [String] The key name with value 'key1'.
    # @param key_version [String] The key version. Default value 'v1'.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_empty(vault, secret, key_name, key_version = 'v1', custom_headers = nil)
      response = get_empty_async(vault, secret, key_name, key_version, custom_headers).value!
      nil
    end

    #
    # Get a 200 to test a valid base uri
    #
    # @param vault [String] The vault name, e.g. https://myvault
    # @param secret [String] Secret value.
    # @param key_name [String] The key name with value 'key1'.
    # @param key_version [String] The key version. Default value 'v1'.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_empty_with_http_info(vault, secret, key_name, key_version = 'v1', custom_headers = nil)
      get_empty_async(vault, secret, key_name, key_version, custom_headers).value!
    end

    #
    # Get a 200 to test a valid base uri
    #
    # @param vault [String] The vault name, e.g. https://myvault
    # @param secret [String] Secret value.
    # @param key_name [String] The key name with value 'key1'.
    # @param key_version [String] The key version. Default value 'v1'.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_empty_async(vault, secret, key_name, key_version = 'v1', custom_headers = nil)
      fail ArgumentError, 'vault is nil' if vault.nil?
      fail ArgumentError, 'secret is nil' if secret.nil?
      fail ArgumentError, '@client.dns_suffix is nil' if @client.dns_suffix.nil?
      fail ArgumentError, 'key_name is nil' if key_name.nil?
      fail ArgumentError, '@client.subscription_id is nil' if @client.subscription_id.nil?


      request_headers = {}
      path_template = 'customuri/{subscriptionId}/{keyName}'

      request_url = @base_url || @client.base_url
    request_url = request_url.gsub('{vault}', vault)
    request_url = request_url.gsub('{secret}', secret)
    request_url = request_url.gsub('{dnsSuffix}', @client.dns_suffix)

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'keyName' => key_name,'subscriptionId' => @client.subscription_id},
          query_params: {'keyVersion' => key_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
