# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module ModelFlatteningModule
  #
  # A service client - single point of access to the REST API.
  #
  class AutoRestResourceFlatteningTestService < MsRest::ServiceClient
    include MsRest::Serialization

    # @return [String] the base URI of the service.
    attr_accessor :base_url

    #
    # Creates initializes a new instance of the AutoRestResourceFlatteningTestService class.
    # @param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    # @param base_url [String] the base URI of the service.
    # @param options [Array] filters to be applied to the HTTP requests.
    #
    def initialize(credentials = nil, base_url = nil, options = nil)
      super(credentials, options)
      @base_url = base_url || 'http://localhost'

      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials) unless credentials.nil?
      @credentials = credentials

      add_telemetry
    end

    #
    # Makes a request and returns the body of the response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Hash{String=>String}] containing the body of the response.
    # Example:
    #
    #  request_content = "{'location':'westus','tags':{'tag1':'val1','tag2':'val2'}}"
    #  path = "/path"
    #  options = {
    #    body: request_content,
    #    query_params: {'api-version' => '2016-02-01'}
    #  }
    #  result = @client.make_request(:put, path, options)
    #
    def make_request(method, path, options = {})
      result = make_request_with_http_info(method, path, options)
      result.body unless result.nil?
    end

    #
    # Makes a request and returns the operation response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [MsRest::HttpOperationResponse] Operation response containing the request, response and status.
    #
    def make_request_with_http_info(method, path, options = {})
      result = make_request_async(method, path, options).value!
      result.body = result.response.body.to_s.empty? ? nil : JSON.load(result.response.body)
      result
    end

    #
    # Makes a request asynchronously.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def make_request_async(method, path, options = {})
      fail ArgumentError, 'method is nil' if method.nil?
      fail ArgumentError, 'path is nil' if path.nil?

      request_url = options[:base_url] || @base_url

      request_headers = @request_headers
      options.merge!({headers: request_headers.merge(options[:headers] || {})})
      options.merge!({credentials: @credentials}) unless @credentials.nil?

      super(request_url, method, path, options)
    end

    #
    # Put External Resource as an Array
    #
    # @param resource_array [Array<Resource>] External Resource as an Array to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_array(resource_array = nil, custom_headers = nil)
      response = put_array_async(resource_array, custom_headers).value!
      nil
    end

    #
    # Put External Resource as an Array
    #
    # @param resource_array [Array<Resource>] External Resource as an Array to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_array_with_http_info(resource_array = nil, custom_headers = nil)
      put_array_async(resource_array, custom_headers).value!
    end

    #
    # Put External Resource as an Array
    #
    # @param resource_array [Array<Resource>] External Resource as an Array to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_array_async(resource_array = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'ResourceArray',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serialized_name: 'ResourceElementType',
              type: {
                name: 'Composite',
                class_name: 'Resource'
              }
          }
        }
      }
      request_content = self.serialize(request_mapper,  resource_array)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'model-flatten/array'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get External Resource as an Array
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_array(custom_headers = nil)
      response = get_array_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get External Resource as an Array
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_array_with_http_info(custom_headers = nil)
      get_array_async(custom_headers).value!
    end

    #
    # Get External Resource as an Array
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_array_async(custom_headers = nil)


      request_headers = {}
      path_template = 'model-flatten/array'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'FlattenedProductElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'FlattenedProduct'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # No need to have a route in Express server for this operation. Used to verify
    # the type flattened is not removed if it's referenced in an array
    #
    # @param resource_array [Array<WrappedProduct>] External Resource as an Array
    # to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_wrapped_array(resource_array = nil, custom_headers = nil)
      response = put_wrapped_array_async(resource_array, custom_headers).value!
      nil
    end

    #
    # No need to have a route in Express server for this operation. Used to verify
    # the type flattened is not removed if it's referenced in an array
    #
    # @param resource_array [Array<WrappedProduct>] External Resource as an Array
    # to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_wrapped_array_with_http_info(resource_array = nil, custom_headers = nil)
      put_wrapped_array_async(resource_array, custom_headers).value!
    end

    #
    # No need to have a route in Express server for this operation. Used to verify
    # the type flattened is not removed if it's referenced in an array
    #
    # @param resource_array [Array<WrappedProduct>] External Resource as an Array
    # to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_wrapped_array_async(resource_array = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'ResourceArray',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serialized_name: 'WrappedProductElementType',
              type: {
                name: 'Composite',
                class_name: 'WrappedProduct'
              }
          }
        }
      }
      request_content = self.serialize(request_mapper,  resource_array)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'model-flatten/wrappedarray'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # No need to have a route in Express server for this operation. Used to verify
    # the type flattened is not removed if it's referenced in an array
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_wrapped_array(custom_headers = nil)
      response = get_wrapped_array_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # No need to have a route in Express server for this operation. Used to verify
    # the type flattened is not removed if it's referenced in an array
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_wrapped_array_with_http_info(custom_headers = nil)
      get_wrapped_array_async(custom_headers).value!
    end

    #
    # No need to have a route in Express server for this operation. Used to verify
    # the type flattened is not removed if it's referenced in an array
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_wrapped_array_async(custom_headers = nil)


      request_headers = {}
      path_template = 'model-flatten/wrappedarray'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'ProductWrapperElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'ProductWrapper'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put External Resource as a Dictionary
    #
    # @param resource_dictionary [Hash{String => FlattenedProduct}] External
    # Resource as a Dictionary to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_dictionary(resource_dictionary = nil, custom_headers = nil)
      response = put_dictionary_async(resource_dictionary, custom_headers).value!
      nil
    end

    #
    # Put External Resource as a Dictionary
    #
    # @param resource_dictionary [Hash{String => FlattenedProduct}] External
    # Resource as a Dictionary to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_dictionary_with_http_info(resource_dictionary = nil, custom_headers = nil)
      put_dictionary_async(resource_dictionary, custom_headers).value!
    end

    #
    # Put External Resource as a Dictionary
    #
    # @param resource_dictionary [Hash{String => FlattenedProduct}] External
    # Resource as a Dictionary to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_dictionary_async(resource_dictionary = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'ResourceDictionary',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serialized_name: 'FlattenedProductElementType',
              type: {
                name: 'Composite',
                class_name: 'FlattenedProduct'
              }
          }
        }
      }
      request_content = self.serialize(request_mapper,  resource_dictionary)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'model-flatten/dictionary'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get External Resource as a Dictionary
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Hash] operation results.
    #
    def get_dictionary(custom_headers = nil)
      response = get_dictionary_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get External Resource as a Dictionary
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_dictionary_with_http_info(custom_headers = nil)
      get_dictionary_async(custom_headers).value!
    end

    #
    # Get External Resource as a Dictionary
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_dictionary_async(custom_headers = nil)


      request_headers = {}
      path_template = 'model-flatten/dictionary'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Dictionary',
                value: {
                    required: false,
                    serialized_name: 'FlattenedProductElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'FlattenedProduct'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put External Resource as a ResourceCollection
    #
    # @param resource_complex_object [ResourceCollection] External Resource as a
    # ResourceCollection to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_resource_collection(resource_complex_object = nil, custom_headers = nil)
      response = put_resource_collection_async(resource_complex_object, custom_headers).value!
      nil
    end

    #
    # Put External Resource as a ResourceCollection
    #
    # @param resource_complex_object [ResourceCollection] External Resource as a
    # ResourceCollection to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_resource_collection_with_http_info(resource_complex_object = nil, custom_headers = nil)
      put_resource_collection_async(resource_complex_object, custom_headers).value!
    end

    #
    # Put External Resource as a ResourceCollection
    #
    # @param resource_complex_object [ResourceCollection] External Resource as a
    # ResourceCollection to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_resource_collection_async(resource_complex_object = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ModelFlatteningModule::Models::ResourceCollection.mapper()
      request_content = self.serialize(request_mapper,  resource_complex_object)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'model-flatten/resourcecollection'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get External Resource as a ResourceCollection
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ResourceCollection] operation results.
    #
    def get_resource_collection(custom_headers = nil)
      response = get_resource_collection_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get External Resource as a ResourceCollection
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_resource_collection_with_http_info(custom_headers = nil)
      get_resource_collection_async(custom_headers).value!
    end

    #
    # Get External Resource as a ResourceCollection
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_resource_collection_async(custom_headers = nil)


      request_headers = {}
      path_template = 'model-flatten/resourcecollection'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ModelFlatteningModule::Models::ResourceCollection.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put Simple Product with client flattening true on the model
    #
    # @param simple_body_product [SimpleProduct] Simple body product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SimpleProduct] operation results.
    #
    def put_simple_product(simple_body_product = nil, custom_headers = nil)
      response = put_simple_product_async(simple_body_product, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Put Simple Product with client flattening true on the model
    #
    # @param simple_body_product [SimpleProduct] Simple body product to put
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_simple_product_with_http_info(simple_body_product = nil, custom_headers = nil)
      put_simple_product_async(simple_body_product, custom_headers).value!
    end

    #
    # Put Simple Product with client flattening true on the model
    #
    # @param simple_body_product [SimpleProduct] Simple body product to put
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_simple_product_async(simple_body_product = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ModelFlatteningModule::Models::SimpleProduct.mapper()
      request_content = self.serialize(request_mapper,  simple_body_product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'model-flatten/customFlattening'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ModelFlatteningModule::Models::SimpleProduct.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put Flattened Simple Product with client flattening true on the parameter
    #
    # @param product_id [String] Unique identifier representing a specific product
    # for a given latitude & longitude. For example, uberX in San Francisco will
    # have a different product_id than uberX in Los Angeles.
    # @param max_product_display_name [String] Display name of product.
    # @param description [String] Description of product.
    # @param generic_value [String] Generic URL value.
    # @param odatavalue [String] URL value.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SimpleProduct] operation results.
    #
    def post_flattened_simple_product(product_id, max_product_display_name, description = nil, generic_value = nil, odatavalue = nil, custom_headers = nil)
      response = post_flattened_simple_product_async(product_id, max_product_display_name, description, generic_value, odatavalue, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Put Flattened Simple Product with client flattening true on the parameter
    #
    # @param product_id [String] Unique identifier representing a specific product
    # for a given latitude & longitude. For example, uberX in San Francisco will
    # have a different product_id than uberX in Los Angeles.
    # @param max_product_display_name [String] Display name of product.
    # @param description [String] Description of product.
    # @param generic_value [String] Generic URL value.
    # @param odatavalue [String] URL value.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_flattened_simple_product_with_http_info(product_id, max_product_display_name, description = nil, generic_value = nil, odatavalue = nil, custom_headers = nil)
      post_flattened_simple_product_async(product_id, max_product_display_name, description, generic_value, odatavalue, custom_headers).value!
    end

    #
    # Put Flattened Simple Product with client flattening true on the parameter
    #
    # @param product_id [String] Unique identifier representing a specific product
    # for a given latitude & longitude. For example, uberX in San Francisco will
    # have a different product_id than uberX in Los Angeles.
    # @param max_product_display_name [String] Display name of product.
    # @param description [String] Description of product.
    # @param generic_value [String] Generic URL value.
    # @param odatavalue [String] URL value.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_flattened_simple_product_async(product_id, max_product_display_name, description = nil, generic_value = nil, odatavalue = nil, custom_headers = nil)
      fail ArgumentError, 'product_id is nil' if product_id.nil?
      fail ArgumentError, 'max_product_display_name is nil' if max_product_display_name.nil?

      simple_body_product = nil
      unless product_id.nil? && description.nil? && max_product_display_name.nil? && generic_value.nil? && odatavalue.nil?
        simple_body_product = SimpleProduct.new
        simple_body_product.product_id = product_id
        simple_body_product.description = description
        simple_body_product.max_product_display_name = max_product_display_name
        simple_body_product.generic_value = generic_value
        simple_body_product.odatavalue = odatavalue
      end

      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ModelFlatteningModule::Models::SimpleProduct.mapper()
      request_content = self.serialize(request_mapper,  simple_body_product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'model-flatten/customFlattening'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ModelFlatteningModule::Models::SimpleProduct.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put Simple Product with client flattening true on the model
    #
    # @param flatten_parameter_group [FlattenParameterGroup] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SimpleProduct] operation results.
    #
    def put_simple_product_with_grouping(flatten_parameter_group, custom_headers = nil)
      response = put_simple_product_with_grouping_async(flatten_parameter_group, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Put Simple Product with client flattening true on the model
    #
    # @param flatten_parameter_group [FlattenParameterGroup] Additional parameters
    # for the operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_simple_product_with_grouping_with_http_info(flatten_parameter_group, custom_headers = nil)
      put_simple_product_with_grouping_async(flatten_parameter_group, custom_headers).value!
    end

    #
    # Put Simple Product with client flattening true on the model
    #
    # @param flatten_parameter_group [FlattenParameterGroup] Additional parameters
    # for the operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_simple_product_with_grouping_async(flatten_parameter_group, custom_headers = nil)
      fail ArgumentError, 'flatten_parameter_group is nil' if flatten_parameter_group.nil?

      name = nil
      product_id = nil
      description = nil
      max_product_display_name = nil
      generic_value = nil
      odatavalue = nil
      simple_body_product = nil
      unless flatten_parameter_group.nil?
        name = flatten_parameter_group.name
      end
      unless flatten_parameter_group.nil?
        product_id = flatten_parameter_group.product_id
      end
      unless flatten_parameter_group.nil?
        description = flatten_parameter_group.description
      end
      unless flatten_parameter_group.nil?
        max_product_display_name = flatten_parameter_group.max_product_display_name
      end
      unless flatten_parameter_group.nil?
        generic_value = flatten_parameter_group.generic_value
      end
      unless flatten_parameter_group.nil?
        odatavalue = flatten_parameter_group.odatavalue
      end
      unless product_id.nil? && description.nil? && max_product_display_name.nil? && generic_value.nil? && odatavalue.nil?
        simple_body_product = SimpleProduct.new
        simple_body_product.product_id = product_id
        simple_body_product.description = description
        simple_body_product.max_product_display_name = max_product_display_name
        simple_body_product.generic_value = generic_value
        simple_body_product.odatavalue = odatavalue
      end

      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ModelFlatteningModule::Models::SimpleProduct.mapper()
      request_content = self.serialize(request_mapper,  simple_body_product)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'model-flatten/customFlattening/parametergrouping/{name}/'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'name' => name},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ModelFlatteningModule::Models::SimpleProduct.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end


    private
    #
    # Adds telemetry information.
    #
    def add_telemetry
        sdk_information = 'model_flattening'
        if defined? ModelFlatteningModule::VERSION
          sdk_information = "#{sdk_information}/#{ModelFlatteningModule::VERSION}"
        end
        add_user_agent_information(sdk_information)
    end
  end
end
