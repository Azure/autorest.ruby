# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module ParameterFlatteningModule
  #
  # Resource Flattening for AutoRest
  #
  class AvailabilitySets

    #
    # Creates and initializes a new instance of the AvailabilitySets class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestParameterFlattening] reference to the AutoRestParameterFlattening
    attr_reader :client

    #
    # Updates the tags for an availability set.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param avset [String] The name of the storage availability set.
    # @param tags [Hash{String => String}] A set of tags. A description about the
    # set of tags.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def update(resource_group_name, avset, tags, custom_headers = nil)
      response = update_async(resource_group_name, avset, tags, custom_headers).value!
      nil
    end

    #
    # Updates the tags for an availability set.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param avset [String] The name of the storage availability set.
    # @param tags [Hash{String => String}] A set of tags. A description about the
    # set of tags.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def update_with_http_info(resource_group_name, avset, tags, custom_headers = nil)
      update_async(resource_group_name, avset, tags, custom_headers).value!
    end

    #
    # Updates the tags for an availability set.
    #
    # @param resource_group_name [String] The name of the resource group.
    # @param avset [String] The name of the storage availability set.
    # @param tags [Hash{String => String}] A set of tags. A description about the
    # set of tags.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_async(resource_group_name, avset, tags, custom_headers = nil)
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'avset is nil' if avset.nil?
      fail ArgumentError, 'tags is nil' if tags.nil?

      tags1 = AvailabilitySetUpdateParameters.new
      unless tags.nil?
        tags1.tags = tags
      end

      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ParameterFlatteningModule::Models::AvailabilitySetUpdateParameters.mapper()
      request_content = @client.serialize(request_mapper,  tags1)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'parameterFlattening/{resourceGroupName}/{availabilitySetName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'resourceGroupName' => resource_group_name,'availabilitySetName' => avset},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
