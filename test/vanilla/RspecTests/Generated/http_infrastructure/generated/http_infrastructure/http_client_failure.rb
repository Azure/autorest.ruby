# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module HttpInfrastructureModule
  #
  # Test Infrastructure for AutoRest
  #
  class HttpClientFailure

    #
    # Creates and initializes a new instance of the HttpClientFailure class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestHttpInfrastructureTestService] reference to the AutoRestHttpInfrastructureTestService
    attr_reader :client

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def head400(custom_headers = nil)
      response = head400_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head400_with_http_info(custom_headers = nil)
      head400_async(custom_headers).value!
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head400_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/client/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def get400(custom_headers = nil)
      response = get400_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get400_with_http_info(custom_headers = nil)
      get400_async(custom_headers).value!
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get400_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/client/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def put400(boolean_value = nil, custom_headers = nil)
      response = put400_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put400_with_http_info(boolean_value = nil, custom_headers = nil)
      put400_async(boolean_value, custom_headers).value!
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put400_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def patch400(boolean_value = nil, custom_headers = nil)
      response = patch400_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def patch400_with_http_info(boolean_value = nil, custom_headers = nil)
      patch400_async(boolean_value, custom_headers).value!
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch400_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post400(boolean_value = nil, custom_headers = nil)
      response = post400_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post400_with_http_info(boolean_value = nil, custom_headers = nil)
      post400_async(boolean_value, custom_headers).value!
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post400_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def delete400(boolean_value = nil, custom_headers = nil)
      response = delete400_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete400_with_http_info(boolean_value = nil, custom_headers = nil)
      delete400_async(boolean_value, custom_headers).value!
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete400_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/400'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 401 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def head401(custom_headers = nil)
      response = head401_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 401 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head401_with_http_info(custom_headers = nil)
      head401_async(custom_headers).value!
    end

    #
    # Return 401 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head401_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/client/401'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 402 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def get402(custom_headers = nil)
      response = get402_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 402 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get402_with_http_info(custom_headers = nil)
      get402_async(custom_headers).value!
    end

    #
    # Return 402 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get402_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/client/402'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 403 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def get403(custom_headers = nil)
      response = get403_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 403 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get403_with_http_info(custom_headers = nil)
      get403_async(custom_headers).value!
    end

    #
    # Return 403 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get403_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/client/403'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 404 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def put404(boolean_value = nil, custom_headers = nil)
      response = put404_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 404 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put404_with_http_info(boolean_value = nil, custom_headers = nil)
      put404_async(boolean_value, custom_headers).value!
    end

    #
    # Return 404 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put404_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/404'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 405 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def patch405(boolean_value = nil, custom_headers = nil)
      response = patch405_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 405 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def patch405_with_http_info(boolean_value = nil, custom_headers = nil)
      patch405_async(boolean_value, custom_headers).value!
    end

    #
    # Return 405 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch405_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/405'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 406 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post406(boolean_value = nil, custom_headers = nil)
      response = post406_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 406 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post406_with_http_info(boolean_value = nil, custom_headers = nil)
      post406_async(boolean_value, custom_headers).value!
    end

    #
    # Return 406 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post406_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/406'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 407 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def delete407(boolean_value = nil, custom_headers = nil)
      response = delete407_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 407 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete407_with_http_info(boolean_value = nil, custom_headers = nil)
      delete407_async(boolean_value, custom_headers).value!
    end

    #
    # Return 407 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete407_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/407'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 409 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def put409(boolean_value = nil, custom_headers = nil)
      response = put409_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 409 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put409_with_http_info(boolean_value = nil, custom_headers = nil)
      put409_async(boolean_value, custom_headers).value!
    end

    #
    # Return 409 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put409_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/409'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 410 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def head410(custom_headers = nil)
      response = head410_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 410 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head410_with_http_info(custom_headers = nil)
      head410_async(custom_headers).value!
    end

    #
    # Return 410 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head410_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/client/410'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 411 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def get411(custom_headers = nil)
      response = get411_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 411 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get411_with_http_info(custom_headers = nil)
      get411_async(custom_headers).value!
    end

    #
    # Return 411 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get411_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/client/411'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 412 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def get412(custom_headers = nil)
      response = get412_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 412 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get412_with_http_info(custom_headers = nil)
      get412_async(custom_headers).value!
    end

    #
    # Return 412 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get412_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/client/412'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 413 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def put413(boolean_value = nil, custom_headers = nil)
      response = put413_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 413 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put413_with_http_info(boolean_value = nil, custom_headers = nil)
      put413_async(boolean_value, custom_headers).value!
    end

    #
    # Return 413 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put413_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/413'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 414 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def patch414(boolean_value = nil, custom_headers = nil)
      response = patch414_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 414 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def patch414_with_http_info(boolean_value = nil, custom_headers = nil)
      patch414_async(boolean_value, custom_headers).value!
    end

    #
    # Return 414 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch414_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/414'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 415 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post415(boolean_value = nil, custom_headers = nil)
      response = post415_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 415 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post415_with_http_info(boolean_value = nil, custom_headers = nil)
      post415_async(boolean_value, custom_headers).value!
    end

    #
    # Return 415 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post415_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/415'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 416 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def get416(custom_headers = nil)
      response = get416_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 416 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get416_with_http_info(custom_headers = nil)
      get416_async(custom_headers).value!
    end

    #
    # Return 416 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get416_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/client/416'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 417 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def delete417(boolean_value = nil, custom_headers = nil)
      response = delete417_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 417 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete417_with_http_info(boolean_value = nil, custom_headers = nil)
      delete417_async(boolean_value, custom_headers).value!
    end

    #
    # Return 417 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete417_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/client/417'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 429 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def head429(custom_headers = nil)
      response = head429_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 429 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head429_with_http_info(custom_headers = nil)
      head429_async(custom_headers).value!
    end

    #
    # Return 429 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head429_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/client/429'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

  end
end
