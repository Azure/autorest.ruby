# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module HttpInfrastructureModule
  #
  # Test Infrastructure for AutoRest
  #
  class HttpRetry

    #
    # Creates and initializes a new instance of the HttpRetry class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestHttpInfrastructureTestService] reference to the AutoRestHttpInfrastructureTestService
    attr_reader :client

    #
    # Return 408 status code, then 200 after retry
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def head408(custom_headers = nil)
      response = head408_async(custom_headers).value!
      nil
    end

    #
    # Return 408 status code, then 200 after retry
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head408_with_http_info(custom_headers = nil)
      head408_async(custom_headers).value!
    end

    #
    # Return 408 status code, then 200 after retry
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head408_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/retry/408'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 500 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put500(boolean_value = nil, custom_headers = nil)
      response = put500_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Return 500 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put500_with_http_info(boolean_value = nil, custom_headers = nil)
      put500_async(boolean_value, custom_headers).value!
    end

    #
    # Return 500 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put500_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/retry/500'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 500 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def patch500(boolean_value = nil, custom_headers = nil)
      response = patch500_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Return 500 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def patch500_with_http_info(boolean_value = nil, custom_headers = nil)
      patch500_async(boolean_value, custom_headers).value!
    end

    #
    # Return 500 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch500_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/retry/500'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 502 status code, then 200 after retry
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get502(custom_headers = nil)
      response = get502_async(custom_headers).value!
      nil
    end

    #
    # Return 502 status code, then 200 after retry
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get502_with_http_info(custom_headers = nil)
      get502_async(custom_headers).value!
    end

    #
    # Return 502 status code, then 200 after retry
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get502_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/retry/502'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 503 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post503(boolean_value = nil, custom_headers = nil)
      response = post503_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Return 503 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post503_with_http_info(boolean_value = nil, custom_headers = nil)
      post503_async(boolean_value, custom_headers).value!
    end

    #
    # Return 503 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post503_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/retry/503'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 503 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete503(boolean_value = nil, custom_headers = nil)
      response = delete503_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Return 503 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete503_with_http_info(boolean_value = nil, custom_headers = nil)
      delete503_async(boolean_value, custom_headers).value!
    end

    #
    # Return 503 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete503_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/retry/503'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 504 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put504(boolean_value = nil, custom_headers = nil)
      response = put504_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Return 504 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put504_with_http_info(boolean_value = nil, custom_headers = nil)
      put504_async(boolean_value, custom_headers).value!
    end

    #
    # Return 504 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put504_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/retry/504'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 504 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def patch504(boolean_value = nil, custom_headers = nil)
      response = patch504_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Return 504 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def patch504_with_http_info(boolean_value = nil, custom_headers = nil)
      patch504_async(boolean_value, custom_headers).value!
    end

    #
    # Return 504 status code, then 200 after retry
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch504_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/retry/504'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
