# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module HttpInfrastructureModule
  #
  # Test Infrastructure for AutoRest
  #
  class MultipleResponses

    #
    # Creates and initializes a new instance of the MultipleResponses class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestHttpInfrastructureTestService] reference to the AutoRestHttpInfrastructureTestService
    attr_reader :client

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model204no_model_default_error200valid(custom_headers = nil)
      response = get200model204no_model_default_error200valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model204no_model_default_error200valid_with_http_info(custom_headers = nil)
      get200model204no_model_default_error200valid_async(custom_headers).value!
    end

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model204no_model_default_error200valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/204/none/default/Error/response/200/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 204 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model204no_model_default_error204valid(custom_headers = nil)
      response = get200model204no_model_default_error204valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 204 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model204no_model_default_error204valid_with_http_info(custom_headers = nil)
      get200model204no_model_default_error204valid_async(custom_headers).value!
    end

    #
    # Send a 204 response with no payload
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model204no_model_default_error204valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/204/none/default/Error/response/204/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 201 response with valid payload: {'statusCode': '201'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model204no_model_default_error201invalid(custom_headers = nil)
      response = get200model204no_model_default_error201invalid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 201 response with valid payload: {'statusCode': '201'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model204no_model_default_error201invalid_with_http_info(custom_headers = nil)
      get200model204no_model_default_error201invalid_async(custom_headers).value!
    end

    #
    # Send a 201 response with valid payload: {'statusCode': '201'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model204no_model_default_error201invalid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/204/none/default/Error/response/201/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 202 response with no payload:
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model204no_model_default_error202none(custom_headers = nil)
      response = get200model204no_model_default_error202none_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 202 response with no payload:
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model204no_model_default_error202none_with_http_info(custom_headers = nil)
      get200model204no_model_default_error202none_async(custom_headers).value!
    end

    #
    # Send a 202 response with no payload:
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model204no_model_default_error202none_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/204/none/default/Error/response/202/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 400 response with valid error payload: {'status': 400, 'message':
    # 'client error'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model204no_model_default_error400valid(custom_headers = nil)
      response = get200model204no_model_default_error400valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 400 response with valid error payload: {'status': 400, 'message':
    # 'client error'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model204no_model_default_error400valid_with_http_info(custom_headers = nil)
      get200model204no_model_default_error400valid_async(custom_headers).value!
    end

    #
    # Send a 400 response with valid error payload: {'status': 400, 'message':
    # 'client error'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model204no_model_default_error400valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/204/none/default/Error/response/400/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model201model_default_error200valid(custom_headers = nil)
      response = get200model201model_default_error200valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model201model_default_error200valid_with_http_info(custom_headers = nil)
      get200model201model_default_error200valid_async(custom_headers).value!
    end

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model201model_default_error200valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/201/B/default/Error/response/200/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::B.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 201 response with valid payload: {'statusCode': '201',
    # 'textStatusCode': 'Created'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model201model_default_error201valid(custom_headers = nil)
      response = get200model201model_default_error201valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 201 response with valid payload: {'statusCode': '201',
    # 'textStatusCode': 'Created'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model201model_default_error201valid_with_http_info(custom_headers = nil)
      get200model201model_default_error201valid_async(custom_headers).value!
    end

    #
    # Send a 201 response with valid payload: {'statusCode': '201',
    # 'textStatusCode': 'Created'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model201model_default_error201valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/201/B/default/Error/response/201/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::B.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 400 response with valid payload: {'code': '400', 'message': 'client
    # error'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model201model_default_error400valid(custom_headers = nil)
      response = get200model201model_default_error400valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 400 response with valid payload: {'code': '400', 'message': 'client
    # error'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model201model_default_error400valid_with_http_info(custom_headers = nil)
      get200model201model_default_error400valid_async(custom_headers).value!
    end

    #
    # Send a 400 response with valid payload: {'code': '400', 'message': 'client
    # error'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model201model_default_error400valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/201/B/default/Error/response/400/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::B.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get200model_a201model_c404model_ddefault_error200valid(custom_headers = nil)
      response = get200model_a201model_c404model_ddefault_error200valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model_a201model_c404model_ddefault_error200valid_with_http_info(custom_headers = nil)
      get200model_a201model_c404model_ddefault_error200valid_async(custom_headers).value!
    end

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model_a201model_c404model_ddefault_error200valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/201/C/404/D/default/Error/response/200/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::C.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 404
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::D.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 200 response with valid payload: {'httpCode': '201'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get200model_a201model_c404model_ddefault_error201valid(custom_headers = nil)
      response = get200model_a201model_c404model_ddefault_error201valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with valid payload: {'httpCode': '201'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model_a201model_c404model_ddefault_error201valid_with_http_info(custom_headers = nil)
      get200model_a201model_c404model_ddefault_error201valid_async(custom_headers).value!
    end

    #
    # Send a 200 response with valid payload: {'httpCode': '201'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model_a201model_c404model_ddefault_error201valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/201/C/404/D/default/Error/response/201/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::C.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 404
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::D.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 200 response with valid payload: {'httpStatusCode': '404'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get200model_a201model_c404model_ddefault_error404valid(custom_headers = nil)
      response = get200model_a201model_c404model_ddefault_error404valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with valid payload: {'httpStatusCode': '404'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model_a201model_c404model_ddefault_error404valid_with_http_info(custom_headers = nil)
      get200model_a201model_c404model_ddefault_error404valid_async(custom_headers).value!
    end

    #
    # Send a 200 response with valid payload: {'httpStatusCode': '404'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model_a201model_c404model_ddefault_error404valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/201/C/404/D/default/Error/response/404/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::C.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 404
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::D.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 400 response with valid payload: {'code': '400', 'message': 'client
    # error'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get200model_a201model_c404model_ddefault_error400valid(custom_headers = nil)
      response = get200model_a201model_c404model_ddefault_error400valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 400 response with valid payload: {'code': '400', 'message': 'client
    # error'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model_a201model_c404model_ddefault_error400valid_with_http_info(custom_headers = nil)
      get200model_a201model_c404model_ddefault_error400valid_async(custom_headers).value!
    end

    #
    # Send a 400 response with valid payload: {'code': '400', 'message': 'client
    # error'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model_a201model_c404model_ddefault_error400valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/201/C/404/D/default/Error/response/400/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::C.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 404
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::D.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 202 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get202none204none_default_error202none(custom_headers = nil)
      response = get202none204none_default_error202none_async(custom_headers).value!
      nil
    end

    #
    # Send a 202 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get202none204none_default_error202none_with_http_info(custom_headers = nil)
      get202none204none_default_error202none_async(custom_headers).value!
    end

    #
    # Send a 202 response with no payload
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get202none204none_default_error202none_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/202/none/204/none/default/Error/response/202/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a 204 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get202none204none_default_error204none(custom_headers = nil)
      response = get202none204none_default_error204none_async(custom_headers).value!
      nil
    end

    #
    # Send a 204 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get202none204none_default_error204none_with_http_info(custom_headers = nil)
      get202none204none_default_error204none_async(custom_headers).value!
    end

    #
    # Send a 204 response with no payload
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get202none204none_default_error204none_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/202/none/204/none/default/Error/response/204/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a 400 response with valid payload: {'code': '400', 'message': 'client
    # error'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get202none204none_default_error400valid(custom_headers = nil)
      response = get202none204none_default_error400valid_async(custom_headers).value!
      nil
    end

    #
    # Send a 400 response with valid payload: {'code': '400', 'message': 'client
    # error'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get202none204none_default_error400valid_with_http_info(custom_headers = nil)
      get202none204none_default_error400valid_async(custom_headers).value!
    end

    #
    # Send a 400 response with valid payload: {'code': '400', 'message': 'client
    # error'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get202none204none_default_error400valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/202/none/204/none/default/Error/response/400/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a 202 response with an unexpected payload {'property': 'value'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get202none204none_default_none202invalid(custom_headers = nil)
      response = get202none204none_default_none202invalid_async(custom_headers).value!
      nil
    end

    #
    # Send a 202 response with an unexpected payload {'property': 'value'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get202none204none_default_none202invalid_with_http_info(custom_headers = nil)
      get202none204none_default_none202invalid_async(custom_headers).value!
    end

    #
    # Send a 202 response with an unexpected payload {'property': 'value'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get202none204none_default_none202invalid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/202/none/204/none/default/none/response/202/invalid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a 204 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get202none204none_default_none204none(custom_headers = nil)
      response = get202none204none_default_none204none_async(custom_headers).value!
      nil
    end

    #
    # Send a 204 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get202none204none_default_none204none_with_http_info(custom_headers = nil)
      get202none204none_default_none204none_async(custom_headers).value!
    end

    #
    # Send a 204 response with no payload
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get202none204none_default_none204none_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/202/none/204/none/default/none/response/204/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a 400 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get202none204none_default_none400none(custom_headers = nil)
      response = get202none204none_default_none400none_async(custom_headers).value!
      nil
    end

    #
    # Send a 400 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get202none204none_default_none400none_with_http_info(custom_headers = nil)
      get202none204none_default_none400none_async(custom_headers).value!
    end

    #
    # Send a 400 response with no payload
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get202none204none_default_none400none_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/202/none/204/none/default/none/response/400/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a 400 response with an unexpected payload {'property': 'value'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get202none204none_default_none400invalid(custom_headers = nil)
      response = get202none204none_default_none400invalid_async(custom_headers).value!
      nil
    end

    #
    # Send a 400 response with an unexpected payload {'property': 'value'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get202none204none_default_none400invalid_with_http_info(custom_headers = nil)
      get202none204none_default_none400invalid_async(custom_headers).value!
    end

    #
    # Send a 400 response with an unexpected payload {'property': 'value'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get202none204none_default_none400invalid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/202/none/204/none/default/none/response/400/invalid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get_default_model_a200valid(custom_headers = nil)
      response = get_default_model_a200valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_default_model_a200valid_with_http_info(custom_headers = nil)
      get_default_model_a200valid_async(custom_headers).value!
    end

    #
    # Send a 200 response with valid payload: {'statusCode': '200'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_default_model_a200valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/default/A/response/200/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::A.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Send a 200 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get_default_model_a200none(custom_headers = nil)
      response = get_default_model_a200none_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_default_model_a200none_with_http_info(custom_headers = nil)
      get_default_model_a200none_async(custom_headers).value!
    end

    #
    # Send a 200 response with no payload
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_default_model_a200none_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/default/A/response/200/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::A.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Send a 400 response with valid payload: {'statusCode': '400'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get_default_model_a400valid(custom_headers = nil)
      response = get_default_model_a400valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 400 response with valid payload: {'statusCode': '400'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_default_model_a400valid_with_http_info(custom_headers = nil)
      get_default_model_a400valid_async(custom_headers).value!
    end

    #
    # Send a 400 response with valid payload: {'statusCode': '400'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_default_model_a400valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/default/A/response/400/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::A.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Send a 400 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get_default_model_a400none(custom_headers = nil)
      response = get_default_model_a400none_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 400 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_default_model_a400none_with_http_info(custom_headers = nil)
      get_default_model_a400none_async(custom_headers).value!
    end

    #
    # Send a 400 response with no payload
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_default_model_a400none_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/default/A/response/400/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::A.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Send a 200 response with invalid payload: {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_default_none200invalid(custom_headers = nil)
      response = get_default_none200invalid_async(custom_headers).value!
      nil
    end

    #
    # Send a 200 response with invalid payload: {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_default_none200invalid_with_http_info(custom_headers = nil)
      get_default_none200invalid_async(custom_headers).value!
    end

    #
    # Send a 200 response with invalid payload: {'statusCode': '200'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_default_none200invalid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/default/none/response/200/invalid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a 200 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_default_none200none(custom_headers = nil)
      response = get_default_none200none_async(custom_headers).value!
      nil
    end

    #
    # Send a 200 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_default_none200none_with_http_info(custom_headers = nil)
      get_default_none200none_async(custom_headers).value!
    end

    #
    # Send a 200 response with no payload
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_default_none200none_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/default/none/response/200/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a 400 response with valid payload: {'statusCode': '400'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_default_none400invalid(custom_headers = nil)
      response = get_default_none400invalid_async(custom_headers).value!
      nil
    end

    #
    # Send a 400 response with valid payload: {'statusCode': '400'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_default_none400invalid_with_http_info(custom_headers = nil)
      get_default_none400invalid_async(custom_headers).value!
    end

    #
    # Send a 400 response with valid payload: {'statusCode': '400'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_default_none400invalid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/default/none/response/400/invalid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a 400 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_default_none400none(custom_headers = nil)
      response = get_default_none400none_async(custom_headers).value!
      nil
    end

    #
    # Send a 400 response with no payload
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_default_none400none_with_http_info(custom_headers = nil)
      get_default_none400none_async(custom_headers).value!
    end

    #
    # Send a 400 response with no payload
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_default_none400none_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/default/none/response/400/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a 200 response with no payload, when a payload is expected - client
    # should return a null object of thde type for model A
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model_a200none(custom_headers = nil)
      response = get200model_a200none_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with no payload, when a payload is expected - client
    # should return a null object of thde type for model A
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model_a200none_with_http_info(custom_headers = nil)
      get200model_a200none_async(custom_headers).value!
    end

    #
    # Send a 200 response with no payload, when a payload is expected - client
    # should return a null object of thde type for model A
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model_a200none_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/response/200/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 200 response with payload {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model_a200valid(custom_headers = nil)
      response = get200model_a200valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with payload {'statusCode': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model_a200valid_with_http_info(custom_headers = nil)
      get200model_a200valid_async(custom_headers).value!
    end

    #
    # Send a 200 response with payload {'statusCode': '200'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model_a200valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/response/200/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model_a200invalid(custom_headers = nil)
      response = get200model_a200invalid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model_a200invalid_with_http_info(custom_headers = nil)
      get200model_a200invalid_async(custom_headers).value!
    end

    #
    # Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model_a200invalid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/response/200/invalid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 400 response with no payload client should treat as an http error with
    # no error model
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model_a400none(custom_headers = nil)
      response = get200model_a400none_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 400 response with no payload client should treat as an http error with
    # no error model
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model_a400none_with_http_info(custom_headers = nil)
      get200model_a400none_async(custom_headers).value!
    end

    #
    # Send a 400 response with no payload client should treat as an http error with
    # no error model
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model_a400none_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/response/400/none'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 200 response with payload {'statusCode': '400'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model_a400valid(custom_headers = nil)
      response = get200model_a400valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with payload {'statusCode': '400'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model_a400valid_with_http_info(custom_headers = nil)
      get200model_a400valid_async(custom_headers).value!
    end

    #
    # Send a 200 response with payload {'statusCode': '400'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model_a400valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/response/400/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model_a400invalid(custom_headers = nil)
      response = get200model_a400invalid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model_a400invalid_with_http_info(custom_headers = nil)
      get200model_a400invalid_async(custom_headers).value!
    end

    #
    # Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model_a400invalid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/response/400/invalid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Send a 202 response with payload {'statusCode': '202'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [A] operation results.
    #
    def get200model_a202valid(custom_headers = nil)
      response = get200model_a202valid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Send a 202 response with payload {'statusCode': '202'}
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200model_a202valid_with_http_info(custom_headers = nil)
      get200model_a202valid_async(custom_headers).value!
    end

    #
    # Send a 202 response with payload {'statusCode': '202'}
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200model_a202valid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/payloads/200/A/response/202/valid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = HttpInfrastructureModule::Models::A.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end
