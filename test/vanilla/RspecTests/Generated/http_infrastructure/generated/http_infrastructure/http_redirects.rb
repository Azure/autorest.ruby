# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module HttpInfrastructureModule
  #
  # Test Infrastructure for AutoRest
  #
  class HttpRedirects

    #
    # Creates and initializes a new instance of the HttpRedirects class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestHttpInfrastructureTestService] reference to the AutoRestHttpInfrastructureTestService
    attr_reader :client

    #
    # Return 300 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def head300(custom_headers = nil)
      response = head300_async(custom_headers).value!
      nil
    end

    #
    # Return 300 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head300_with_http_info(custom_headers = nil)
      head300_async(custom_headers).value!
    end

    #
    # Return 300 status code and redirect to /http/success/200
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head300_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/redirect/300'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 300 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get300(custom_headers = nil)
      response = get300_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 300 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get300_with_http_info(custom_headers = nil)
      get300_async(custom_headers).value!
    end

    #
    # Return 300 status code and redirect to /http/success/200
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get300_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/redirect/300'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 300
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'StringElementType',
                    type: {
                      name: 'String'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Return 301 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def head301(custom_headers = nil)
      response = head301_async(custom_headers).value!
      nil
    end

    #
    # Return 301 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head301_with_http_info(custom_headers = nil)
      head301_async(custom_headers).value!
    end

    #
    # Return 301 status code and redirect to /http/success/200
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head301_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/redirect/301'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 301
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 301 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get301(custom_headers = nil)
      response = get301_async(custom_headers).value!
      nil
    end

    #
    # Return 301 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get301_with_http_info(custom_headers = nil)
      get301_async(custom_headers).value!
    end

    #
    # Return 301 status code and redirect to /http/success/200
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get301_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/redirect/301'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 301
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Put true Boolean value in request returns 301.  This request should not be
    # automatically redirected, but should return the received 301 to the caller
    # for evaluation
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put301(boolean_value = nil, custom_headers = nil)
      response = put301_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Put true Boolean value in request returns 301.  This request should not be
    # automatically redirected, but should return the received 301 to the caller
    # for evaluation
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put301_with_http_info(boolean_value = nil, custom_headers = nil)
      put301_async(boolean_value, custom_headers).value!
    end

    #
    # Put true Boolean value in request returns 301.  This request should not be
    # automatically redirected, but should return the received 301 to the caller
    # for evaluation
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put301_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/redirect/301'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 301
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 302 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def head302(custom_headers = nil)
      response = head302_async(custom_headers).value!
      nil
    end

    #
    # Return 302 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head302_with_http_info(custom_headers = nil)
      head302_async(custom_headers).value!
    end

    #
    # Return 302 status code and redirect to /http/success/200
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head302_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/redirect/302'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 302
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 302 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get302(custom_headers = nil)
      response = get302_async(custom_headers).value!
      nil
    end

    #
    # Return 302 status code and redirect to /http/success/200
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get302_with_http_info(custom_headers = nil)
      get302_async(custom_headers).value!
    end

    #
    # Return 302 status code and redirect to /http/success/200
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get302_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/redirect/302'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 302
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Patch true Boolean value in request returns 302.  This request should not be
    # automatically redirected, but should return the received 302 to the caller
    # for evaluation
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def patch302(boolean_value = nil, custom_headers = nil)
      response = patch302_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Patch true Boolean value in request returns 302.  This request should not be
    # automatically redirected, but should return the received 302 to the caller
    # for evaluation
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def patch302_with_http_info(boolean_value = nil, custom_headers = nil)
      patch302_async(boolean_value, custom_headers).value!
    end

    #
    # Patch true Boolean value in request returns 302.  This request should not be
    # automatically redirected, but should return the received 302 to the caller
    # for evaluation
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch302_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/redirect/302'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 302
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Post true Boolean value in request returns 303.  This request should be
    # automatically redirected usign a get, ultimately returning a 200 status code
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post303(boolean_value = nil, custom_headers = nil)
      response = post303_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Post true Boolean value in request returns 303.  This request should be
    # automatically redirected usign a get, ultimately returning a 200 status code
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post303_with_http_info(boolean_value = nil, custom_headers = nil)
      post303_async(boolean_value, custom_headers).value!
    end

    #
    # Post true Boolean value in request returns 303.  This request should be
    # automatically redirected usign a get, ultimately returning a 200 status code
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post303_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/redirect/303'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 303
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Redirect with 307, resulting in a 200 success
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def head307(custom_headers = nil)
      response = head307_async(custom_headers).value!
      nil
    end

    #
    # Redirect with 307, resulting in a 200 success
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head307_with_http_info(custom_headers = nil)
      head307_async(custom_headers).value!
    end

    #
    # Redirect with 307, resulting in a 200 success
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head307_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/redirect/307'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 307
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Redirect get with 307, resulting in a 200 success
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get307(custom_headers = nil)
      response = get307_async(custom_headers).value!
      nil
    end

    #
    # Redirect get with 307, resulting in a 200 success
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get307_with_http_info(custom_headers = nil)
      get307_async(custom_headers).value!
    end

    #
    # Redirect get with 307, resulting in a 200 success
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get307_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/redirect/307'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 307
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Put redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put307(boolean_value = nil, custom_headers = nil)
      response = put307_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Put redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put307_with_http_info(boolean_value = nil, custom_headers = nil)
      put307_async(boolean_value, custom_headers).value!
    end

    #
    # Put redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put307_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/redirect/307'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 307
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Patch redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def patch307(boolean_value = nil, custom_headers = nil)
      response = patch307_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Patch redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def patch307_with_http_info(boolean_value = nil, custom_headers = nil)
      patch307_async(boolean_value, custom_headers).value!
    end

    #
    # Patch redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch307_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/redirect/307'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 307
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Post redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post307(boolean_value = nil, custom_headers = nil)
      response = post307_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Post redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post307_with_http_info(boolean_value = nil, custom_headers = nil)
      post307_async(boolean_value, custom_headers).value!
    end

    #
    # Post redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post307_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/redirect/307'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 307
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Delete redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete307(boolean_value = nil, custom_headers = nil)
      response = delete307_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Delete redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete307_with_http_info(boolean_value = nil, custom_headers = nil)
      delete307_async(boolean_value, custom_headers).value!
    end

    #
    # Delete redirected with 307, resulting in a 200 after redirect
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete307_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/redirect/307'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 307
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
