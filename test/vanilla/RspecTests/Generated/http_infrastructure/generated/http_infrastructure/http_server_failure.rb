# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module HttpInfrastructureModule
  #
  # Test Infrastructure for AutoRest
  #
  class HttpServerFailure

    #
    # Creates and initializes a new instance of the HttpServerFailure class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestHttpInfrastructureTestService] reference to the AutoRestHttpInfrastructureTestService
    attr_reader :client

    #
    # Return 501 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def head501(custom_headers = nil)
      response = head501_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 501 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head501_with_http_info(custom_headers = nil)
      head501_async(custom_headers).value!
    end

    #
    # Return 501 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head501_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/server/501'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 501 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def get501(custom_headers = nil)
      response = get501_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 501 status code - should be represented in the client as an error
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get501_with_http_info(custom_headers = nil)
      get501_async(custom_headers).value!
    end

    #
    # Return 501 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get501_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/failure/server/501'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 505 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def post505(boolean_value = nil, custom_headers = nil)
      response = post505_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 505 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post505_with_http_info(boolean_value = nil, custom_headers = nil)
      post505_async(boolean_value, custom_headers).value!
    end

    #
    # Return 505 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post505_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/server/505'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

    #
    # Return 505 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Error] operation results.
    #
    def delete505(boolean_value = nil, custom_headers = nil)
      response = delete505_async(boolean_value, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return 505 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete505_with_http_info(boolean_value = nil, custom_headers = nil)
      delete505_async(boolean_value, custom_headers).value!
    end

    #
    # Return 505 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete505_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/failure/server/505'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        begin
          parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
          result_mapper = HttpInfrastructureModule::Models::Error.mapper()
          result.body = @client.deserialize(result_mapper, parsed_response)
        rescue Exception => e
          fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
        end

        result
      end

      promise.execute
    end

  end
end
