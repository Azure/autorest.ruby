# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module HttpInfrastructureModule
  #
  # Test Infrastructure for AutoRest
  #
  class HttpSuccess

    #
    # Creates and initializes a new instance of the HttpSuccess class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestHttpInfrastructureTestService] reference to the AutoRestHttpInfrastructureTestService
    attr_reader :client

    #
    # Return 200 status code if successful
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def head200(custom_headers = nil)
      response = head200_async(custom_headers).value!
      nil
    end

    #
    # Return 200 status code if successful
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head200_with_http_info(custom_headers = nil)
      head200_async(custom_headers).value!
    end

    #
    # Return 200 status code if successful
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head200_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/success/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get 200 success
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Boolean] operation results.
    #
    def get200(custom_headers = nil)
      response = get200_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get 200 success
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get200_with_http_info(custom_headers = nil)
      get200_async(custom_headers).value!
    end

    #
    # Get 200 success
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get200_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/success/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Boolean'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put boolean value true returning 200 success
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put200(boolean_value = nil, custom_headers = nil)
      response = put200_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Put boolean value true returning 200 success
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put200_with_http_info(boolean_value = nil, custom_headers = nil)
      put200_async(boolean_value, custom_headers).value!
    end

    #
    # Put boolean value true returning 200 success
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put200_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Patch true Boolean value in request returning 200
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def patch200(boolean_value = nil, custom_headers = nil)
      response = patch200_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Patch true Boolean value in request returning 200
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def patch200_with_http_info(boolean_value = nil, custom_headers = nil)
      patch200_async(boolean_value, custom_headers).value!
    end

    #
    # Patch true Boolean value in request returning 200
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch200_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Post bollean value true in request that returns a 200
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post200(boolean_value = nil, custom_headers = nil)
      response = post200_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Post bollean value true in request that returns a 200
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post200_with_http_info(boolean_value = nil, custom_headers = nil)
      post200_async(boolean_value, custom_headers).value!
    end

    #
    # Post bollean value true in request that returns a 200
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post200_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Delete simple boolean value true returns 200
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete200(boolean_value = nil, custom_headers = nil)
      response = delete200_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Delete simple boolean value true returns 200
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete200_with_http_info(boolean_value = nil, custom_headers = nil)
      delete200_async(boolean_value, custom_headers).value!
    end

    #
    # Delete simple boolean value true returns 200
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete200_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/200'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Put true Boolean value in request returns 201
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put201(boolean_value = nil, custom_headers = nil)
      response = put201_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Put true Boolean value in request returns 201
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put201_with_http_info(boolean_value = nil, custom_headers = nil)
      put201_async(boolean_value, custom_headers).value!
    end

    #
    # Put true Boolean value in request returns 201
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put201_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/201'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Post true Boolean value in request returns 201 (Created)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post201(boolean_value = nil, custom_headers = nil)
      response = post201_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Post true Boolean value in request returns 201 (Created)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post201_with_http_info(boolean_value = nil, custom_headers = nil)
      post201_async(boolean_value, custom_headers).value!
    end

    #
    # Post true Boolean value in request returns 201 (Created)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post201_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/201'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Put true Boolean value in request returns 202 (Accepted)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put202(boolean_value = nil, custom_headers = nil)
      response = put202_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Put true Boolean value in request returns 202 (Accepted)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put202_with_http_info(boolean_value = nil, custom_headers = nil)
      put202_async(boolean_value, custom_headers).value!
    end

    #
    # Put true Boolean value in request returns 202 (Accepted)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put202_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/202'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Patch true Boolean value in request returns 202
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def patch202(boolean_value = nil, custom_headers = nil)
      response = patch202_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Patch true Boolean value in request returns 202
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def patch202_with_http_info(boolean_value = nil, custom_headers = nil)
      patch202_async(boolean_value, custom_headers).value!
    end

    #
    # Patch true Boolean value in request returns 202
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch202_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/202'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Post true Boolean value in request returns 202 (Accepted)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post202(boolean_value = nil, custom_headers = nil)
      response = post202_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Post true Boolean value in request returns 202 (Accepted)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post202_with_http_info(boolean_value = nil, custom_headers = nil)
      post202_async(boolean_value, custom_headers).value!
    end

    #
    # Post true Boolean value in request returns 202 (Accepted)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post202_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/202'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Delete true Boolean value in request returns 202 (accepted)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete202(boolean_value = nil, custom_headers = nil)
      response = delete202_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Delete true Boolean value in request returns 202 (accepted)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete202_with_http_info(boolean_value = nil, custom_headers = nil)
      delete202_async(boolean_value, custom_headers).value!
    end

    #
    # Delete true Boolean value in request returns 202 (accepted)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete202_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/202'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 202
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 204 status code if successful
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def head204(custom_headers = nil)
      response = head204_async(custom_headers).value!
      nil
    end

    #
    # Return 204 status code if successful
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head204_with_http_info(custom_headers = nil)
      head204_async(custom_headers).value!
    end

    #
    # Return 204 status code if successful
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head204_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/success/204'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Put true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put204(boolean_value = nil, custom_headers = nil)
      response = put204_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Put true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put204_with_http_info(boolean_value = nil, custom_headers = nil)
      put204_async(boolean_value, custom_headers).value!
    end

    #
    # Put true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put204_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/204'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Patch true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def patch204(boolean_value = nil, custom_headers = nil)
      response = patch204_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Patch true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def patch204_with_http_info(boolean_value = nil, custom_headers = nil)
      patch204_async(boolean_value, custom_headers).value!
    end

    #
    # Patch true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def patch204_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/204'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Post true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post204(boolean_value = nil, custom_headers = nil)
      response = post204_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Post true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post204_with_http_info(boolean_value = nil, custom_headers = nil)
      post204_async(boolean_value, custom_headers).value!
    end

    #
    # Post true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post204_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/204'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Delete true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete204(boolean_value = nil, custom_headers = nil)
      response = delete204_async(boolean_value, custom_headers).value!
      nil
    end

    #
    # Delete true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete204_with_http_info(boolean_value = nil, custom_headers = nil)
      delete204_async(boolean_value, custom_headers).value!
    end

    #
    # Delete true Boolean value in request returns 204 (no content)
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete204_async(boolean_value = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: false,
        serialized_name: 'booleanValue',
        type: {
          name: 'Boolean'
        }
      }
      request_content = @client.serialize(request_mapper,  boolean_value)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'http/success/204'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Return 404 status code
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def head404(custom_headers = nil)
      response = head404_async(custom_headers).value!
      nil
    end

    #
    # Return 404 status code
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def head404_with_http_info(custom_headers = nil)
      head404_async(custom_headers).value!
    end

    #
    # Return 404 status code
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def head404_async(custom_headers = nil)


      request_headers = {}
      path_template = 'http/success/404'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:head, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
