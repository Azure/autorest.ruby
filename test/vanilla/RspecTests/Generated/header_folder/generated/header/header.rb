# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module HeaderModule
  #
  # Test Infrastructure for AutoRest
  #
  class Header

    #
    # Creates and initializes a new instance of the Header class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestSwaggerBATHeaderService] reference to the AutoRestSwaggerBATHeaderService
    attr_reader :client

    #
    # Send a post request with header value "User-Agent": "overwrite"
    #
    # @param user_agent [String] Send a post request with header value
    # "User-Agent": "overwrite"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_existing_key(user_agent, custom_headers = nil)
      response = param_existing_key_async(user_agent, custom_headers).value!
      nil
    end

    #
    # Send a post request with header value "User-Agent": "overwrite"
    #
    # @param user_agent [String] Send a post request with header value
    # "User-Agent": "overwrite"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_existing_key_with_http_info(user_agent, custom_headers = nil)
      param_existing_key_async(user_agent, custom_headers).value!
    end

    #
    # Send a post request with header value "User-Agent": "overwrite"
    #
    # @param user_agent [String] Send a post request with header value
    # "User-Agent": "overwrite"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_existing_key_async(user_agent, custom_headers = nil)
      fail ArgumentError, 'user_agent is nil' if user_agent.nil?


      request_headers = {}

      # Set Headers
      request_headers['User-Agent'] = user_agent unless user_agent.nil?
      path_template = 'header/param/existingkey'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header value "User-Agent": "overwrite"
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_existing_key(custom_headers = nil)
      response = response_existing_key_async(custom_headers).value!
      nil
    end

    #
    # Get a response with header value "User-Agent": "overwrite"
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_existing_key_with_http_info(custom_headers = nil)
      response_existing_key_async(custom_headers).value!
    end

    #
    # Get a response with header value "User-Agent": "overwrite"
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_existing_key_async(custom_headers = nil)


      request_headers = {}
      path_template = 'header/response/existingkey'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header value "Content-Type": "text/html"
    #
    # @param content_type [String] Send a post request with header value
    # "Content-Type": "text/html"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_protected_key(content_type, custom_headers = nil)
      response = param_protected_key_async(content_type, custom_headers).value!
      nil
    end

    #
    # Send a post request with header value "Content-Type": "text/html"
    #
    # @param content_type [String] Send a post request with header value
    # "Content-Type": "text/html"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_protected_key_with_http_info(content_type, custom_headers = nil)
      param_protected_key_async(content_type, custom_headers).value!
    end

    #
    # Send a post request with header value "Content-Type": "text/html"
    #
    # @param content_type [String] Send a post request with header value
    # "Content-Type": "text/html"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_protected_key_async(content_type, custom_headers = nil)
      fail ArgumentError, 'content_type is nil' if content_type.nil?


      request_headers = {}

      # Set Headers
      fail RuntimeError, 'Header Content-Type is forbidden to change'
      request_headers['Content-Type'] = content_type unless content_type.nil?
      path_template = 'header/param/protectedkey'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header value "Content-Type": "text/html"
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_protected_key(custom_headers = nil)
      response = response_protected_key_async(custom_headers).value!
      nil
    end

    #
    # Get a response with header value "Content-Type": "text/html"
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_protected_key_with_http_info(custom_headers = nil)
      response_protected_key_async(custom_headers).value!
    end

    #
    # Get a response with header value "Content-Type": "text/html"
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_protected_key_async(custom_headers = nil)


      request_headers = {}
      path_template = 'header/response/protectedkey'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 1 or
    # "scenario": "negative", "value": -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Integer] Send a post request with header values 1 or -2
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_integer(scenario, value, custom_headers = nil)
      response = param_integer_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 1 or
    # "scenario": "negative", "value": -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Integer] Send a post request with header values 1 or -2
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_integer_with_http_info(scenario, value, custom_headers = nil)
      param_integer_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 1 or
    # "scenario": "negative", "value": -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Integer] Send a post request with header values 1 or -2
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_integer_async(scenario, value, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?
      fail ArgumentError, 'value is nil' if value.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value.to_s unless value.to_s.nil?
      path_template = 'header/param/prim/integer'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header value "value": 1 or -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_integer(scenario, custom_headers = nil)
      response = response_integer_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header value "value": 1 or -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_integer_with_http_info(scenario, custom_headers = nil)
      response_integer_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header value "value": 1 or -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_integer_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/integer'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 105
    # or "scenario": "negative", "value": -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Integer] Send a post request with header values 105 or -2
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_long(scenario, value, custom_headers = nil)
      response = param_long_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 105
    # or "scenario": "negative", "value": -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Integer] Send a post request with header values 105 or -2
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_long_with_http_info(scenario, value, custom_headers = nil)
      param_long_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 105
    # or "scenario": "negative", "value": -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Integer] Send a post request with header values 105 or -2
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_long_async(scenario, value, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?
      fail ArgumentError, 'value is nil' if value.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value.to_s unless value.to_s.nil?
      path_template = 'header/param/prim/long'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header value "value": 105 or -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_long(scenario, custom_headers = nil)
      response = response_long_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header value "value": 105 or -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_long_with_http_info(scenario, custom_headers = nil)
      response_long_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header value "value": 105 or -2
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_long_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/long'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 0.07
    # or "scenario": "negative", "value": -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Float] Send a post request with header values 0.07 or -3.0
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_float(scenario, value, custom_headers = nil)
      response = param_float_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 0.07
    # or "scenario": "negative", "value": -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Float] Send a post request with header values 0.07 or -3.0
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_float_with_http_info(scenario, value, custom_headers = nil)
      param_float_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 0.07
    # or "scenario": "negative", "value": -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Float] Send a post request with header values 0.07 or -3.0
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_float_async(scenario, value, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?
      fail ArgumentError, 'value is nil' if value.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value.to_s unless value.to_s.nil?
      path_template = 'header/param/prim/float'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header value "value": 0.07 or -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_float(scenario, custom_headers = nil)
      response = response_float_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header value "value": 0.07 or -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_float_with_http_info(scenario, custom_headers = nil)
      response_float_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header value "value": 0.07 or -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_float_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/float'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 7e120
    # or "scenario": "negative", "value": -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Float] Send a post request with header values 7e120 or -3.0
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_double(scenario, value, custom_headers = nil)
      response = param_double_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 7e120
    # or "scenario": "negative", "value": -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Float] Send a post request with header values 7e120 or -3.0
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_double_with_http_info(scenario, value, custom_headers = nil)
      param_double_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "positive", "value": 7e120
    # or "scenario": "negative", "value": -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param value [Float] Send a post request with header values 7e120 or -3.0
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_double_async(scenario, value, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?
      fail ArgumentError, 'value is nil' if value.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value.to_s unless value.to_s.nil?
      path_template = 'header/param/prim/double'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header value "value": 7e120 or -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_double(scenario, custom_headers = nil)
      response = response_double_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header value "value": 7e120 or -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_double_with_http_info(scenario, custom_headers = nil)
      response_double_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header value "value": 7e120 or -3.0
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "positive" or "negative"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_double_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/double'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "true", "value": true or
    # "scenario": "false", "value": false
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "true" or "false"
    # @param value [Boolean] Send a post request with header values true or false
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_bool(scenario, value, custom_headers = nil)
      response = param_bool_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "true", "value": true or
    # "scenario": "false", "value": false
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "true" or "false"
    # @param value [Boolean] Send a post request with header values true or false
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_bool_with_http_info(scenario, value, custom_headers = nil)
      param_bool_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "true", "value": true or
    # "scenario": "false", "value": false
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "true" or "false"
    # @param value [Boolean] Send a post request with header values true or false
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_bool_async(scenario, value, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?
      fail ArgumentError, 'value is nil' if value.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value.to_s unless value.to_s.nil?
      path_template = 'header/param/prim/bool'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header value "value": true or false
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "true" or "false"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_bool(scenario, custom_headers = nil)
      response = response_bool_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header value "value": true or false
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "true" or "false"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_bool_with_http_info(scenario, custom_headers = nil)
      response_bool_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header value "value": true or false
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "true" or "false"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_bool_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/bool'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "valid", "value": "The
    # quick brown fox jumps over the lazy dog" or "scenario": "null", "value": null
    # or "scenario": "empty", "value": ""
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param value [String] Send a post request with header values "The quick brown
    # fox jumps over the lazy dog" or null or ""
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_string(scenario, value = nil, custom_headers = nil)
      response = param_string_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "valid", "value": "The
    # quick brown fox jumps over the lazy dog" or "scenario": "null", "value": null
    # or "scenario": "empty", "value": ""
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param value [String] Send a post request with header values "The quick brown
    # fox jumps over the lazy dog" or null or ""
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_string_with_http_info(scenario, value = nil, custom_headers = nil)
      param_string_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "valid", "value": "The
    # quick brown fox jumps over the lazy dog" or "scenario": "null", "value": null
    # or "scenario": "empty", "value": ""
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param value [String] Send a post request with header values "The quick brown
    # fox jumps over the lazy dog" or null or ""
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_string_async(scenario, value = nil, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value unless value.nil?
      path_template = 'header/param/prim/string'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header values "The quick brown fox jumps over the lazy
    # dog" or null or ""
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_string(scenario, custom_headers = nil)
      response = response_string_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header values "The quick brown fox jumps over the lazy
    # dog" or null or ""
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_string_with_http_info(scenario, custom_headers = nil)
      response_string_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header values "The quick brown fox jumps over the lazy
    # dog" or null or ""
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_string_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/string'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "2010-01-01" or "scenario": "min", "value": "0001-01-01"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param value [Date] Send a post request with header values "2010-01-01" or
    # "0001-01-01"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_date(scenario, value, custom_headers = nil)
      response = param_date_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "2010-01-01" or "scenario": "min", "value": "0001-01-01"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param value [Date] Send a post request with header values "2010-01-01" or
    # "0001-01-01"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_date_with_http_info(scenario, value, custom_headers = nil)
      param_date_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "2010-01-01" or "scenario": "min", "value": "0001-01-01"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param value [Date] Send a post request with header values "2010-01-01" or
    # "0001-01-01"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_date_async(scenario, value, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?
      fail ArgumentError, 'value is nil' if value.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value.to_s unless value.to_s.nil?
      path_template = 'header/param/prim/date'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header values "2010-01-01" or "0001-01-01"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_date(scenario, custom_headers = nil)
      response = response_date_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header values "2010-01-01" or "0001-01-01"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_date_with_http_info(scenario, custom_headers = nil)
      response_date_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header values "2010-01-01" or "0001-01-01"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_date_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/date'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "2010-01-01T12:34:56Z" or "scenario": "min", "value": "0001-01-01T00:00:00Z"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param value [DateTime] Send a post request with header values
    # "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_datetime(scenario, value, custom_headers = nil)
      response = param_datetime_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "2010-01-01T12:34:56Z" or "scenario": "min", "value": "0001-01-01T00:00:00Z"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param value [DateTime] Send a post request with header values
    # "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_datetime_with_http_info(scenario, value, custom_headers = nil)
      param_datetime_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "2010-01-01T12:34:56Z" or "scenario": "min", "value": "0001-01-01T00:00:00Z"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param value [DateTime] Send a post request with header values
    # "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_datetime_async(scenario, value, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?
      fail ArgumentError, 'value is nil' if value.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value.new_offset(0).strftime('%FT%TZ') unless value.new_offset(0).strftime('%FT%TZ').nil?
      path_template = 'header/param/prim/datetime'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header values "2010-01-01T12:34:56Z" or
    # "0001-01-01T00:00:00Z"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_datetime(scenario, custom_headers = nil)
      response = response_datetime_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header values "2010-01-01T12:34:56Z" or
    # "0001-01-01T00:00:00Z"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_datetime_with_http_info(scenario, custom_headers = nil)
      response_datetime_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header values "2010-01-01T12:34:56Z" or
    # "0001-01-01T00:00:00Z"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_datetime_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/datetime'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "valid", "value": "Wed, 01
    # Jan 2010 12:34:56 GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001
    # 00:00:00 GMT"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param value [DateTime] Send a post request with header values "Wed, 01 Jan
    # 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_datetime_rfc1123(scenario, value = nil, custom_headers = nil)
      response = param_datetime_rfc1123_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "valid", "value": "Wed, 01
    # Jan 2010 12:34:56 GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001
    # 00:00:00 GMT"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param value [DateTime] Send a post request with header values "Wed, 01 Jan
    # 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_datetime_rfc1123_with_http_info(scenario, value = nil, custom_headers = nil)
      param_datetime_rfc1123_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "valid", "value": "Wed, 01
    # Jan 2010 12:34:56 GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001
    # 00:00:00 GMT"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param value [DateTime] Send a post request with header values "Wed, 01 Jan
    # 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_datetime_rfc1123_async(scenario, value = nil, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value.strftime('%a, %d %b %Y %H:%M:%S GMT') unless value.strftime('%a, %d %b %Y %H:%M:%S GMT').nil?
      path_template = 'header/param/prim/datetimerfc1123'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01
    # Jan 0001 00:00:00 GMT"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_datetime_rfc1123(scenario, custom_headers = nil)
      response = response_datetime_rfc1123_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01
    # Jan 0001 00:00:00 GMT"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_datetime_rfc1123_with_http_info(scenario, custom_headers = nil)
      response_datetime_rfc1123_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01
    # Jan 0001 00:00:00 GMT"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "min"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_datetime_rfc1123_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/datetimerfc1123'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "P123DT22H14M12.011S"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param value [Duration] Send a post request with header values
    # "P123DT22H14M12.011S"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_duration(scenario, value, custom_headers = nil)
      response = param_duration_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "P123DT22H14M12.011S"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param value [Duration] Send a post request with header values
    # "P123DT22H14M12.011S"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_duration_with_http_info(scenario, value, custom_headers = nil)
      param_duration_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "P123DT22H14M12.011S"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param value [Duration] Send a post request with header values
    # "P123DT22H14M12.011S"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_duration_async(scenario, value, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?
      fail ArgumentError, 'value is nil' if value.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value.to_s unless value.to_s.nil?
      path_template = 'header/param/prim/duration'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header values "P123DT22H14M12.011S"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_duration(scenario, custom_headers = nil)
      response = response_duration_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header values "P123DT22H14M12.011S"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_duration_with_http_info(scenario, custom_headers = nil)
      response_duration_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header values "P123DT22H14M12.011S"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_duration_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/duration'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "啊齄丂狛狜隣郎隣兀﨩"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param value [Array<Integer>] Send a post request with header values
    # "啊齄丂狛狜隣郎隣兀﨩"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_byte(scenario, value, custom_headers = nil)
      response = param_byte_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "啊齄丂狛狜隣郎隣兀﨩"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param value [Array<Integer>] Send a post request with header values
    # "啊齄丂狛狜隣郎隣兀﨩"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_byte_with_http_info(scenario, value, custom_headers = nil)
      param_byte_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "valid", "value":
    # "啊齄丂狛狜隣郎隣兀﨩"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param value [Array<Integer>] Send a post request with header values
    # "啊齄丂狛狜隣郎隣兀﨩"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_byte_async(scenario, value, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?
      fail ArgumentError, 'value is nil' if value.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value.to_s unless value.to_s.nil?
      path_template = 'header/param/prim/byte'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_byte(scenario, custom_headers = nil)
      response = response_byte_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_byte_with_http_info(scenario, custom_headers = nil)
      response_byte_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_byte_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/byte'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send a post request with header values "scenario": "valid", "value": "GREY"
    # or "scenario": "null", "value": null
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param value [GreyscaleColors] Send a post request with header values 'GREY'.
    # Possible values include: 'White', 'black', 'GREY'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def param_enum(scenario, value = nil, custom_headers = nil)
      response = param_enum_async(scenario, value, custom_headers).value!
      nil
    end

    #
    # Send a post request with header values "scenario": "valid", "value": "GREY"
    # or "scenario": "null", "value": null
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param value [GreyscaleColors] Send a post request with header values 'GREY'.
    # Possible values include: 'White', 'black', 'GREY'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def param_enum_with_http_info(scenario, value = nil, custom_headers = nil)
      param_enum_async(scenario, value, custom_headers).value!
    end

    #
    # Send a post request with header values "scenario": "valid", "value": "GREY"
    # or "scenario": "null", "value": null
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param value [GreyscaleColors] Send a post request with header values 'GREY'.
    # Possible values include: 'White', 'black', 'GREY'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def param_enum_async(scenario, value = nil, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      request_headers['value'] = value.to_s unless value.to_s.nil?
      path_template = 'header/param/prim/enum'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get a response with header values "GREY" or null
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def response_enum(scenario, custom_headers = nil)
      response = response_enum_async(scenario, custom_headers).value!
      nil
    end

    #
    # Get a response with header values "GREY" or null
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def response_enum_with_http_info(scenario, custom_headers = nil)
      response_enum_async(scenario, custom_headers).value!
    end

    #
    # Get a response with header values "GREY" or null
    #
    # @param scenario [String] Send a post request with header values "scenario":
    # "valid" or "null" or "empty"
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def response_enum_async(scenario, custom_headers = nil)
      fail ArgumentError, 'scenario is nil' if scenario.nil?


      request_headers = {}

      # Set Headers
      request_headers['scenario'] = scenario unless scenario.nil?
      path_template = 'header/response/prim/enum'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def custom_request_id(custom_headers = nil)
      response = custom_request_id_async(custom_headers).value!
      nil
    end

    #
    # Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def custom_request_id_with_http_info(custom_headers = nil)
      custom_request_id_async(custom_headers).value!
    end

    #
    # Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the
    # header of the request
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def custom_request_id_async(custom_headers = nil)


      request_headers = {}
      path_template = 'header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
