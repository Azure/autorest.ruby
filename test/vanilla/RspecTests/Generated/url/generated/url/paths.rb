# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module UrlModule
  #
  # Test Infrastructure for AutoRest
  #
  class Paths

    #
    # Creates and initializes a new instance of the Paths class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestUrlTestService] reference to the AutoRestUrlTestService
    attr_reader :client

    #
    # Get true Boolean value on path
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_boolean_true(custom_headers = nil)
      response = get_boolean_true_async(custom_headers).value!
      nil
    end

    #
    # Get true Boolean value on path
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_boolean_true_with_http_info(custom_headers = nil)
      get_boolean_true_async(custom_headers).value!
    end

    #
    # Get true Boolean value on path
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_boolean_true_async(custom_headers = nil)
      bool_path = true


      request_headers = {}
      path_template = 'paths/bool/true/{boolPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'boolPath' => bool_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get false Boolean value on path
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_boolean_false(custom_headers = nil)
      response = get_boolean_false_async(custom_headers).value!
      nil
    end

    #
    # Get false Boolean value on path
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_boolean_false_with_http_info(custom_headers = nil)
      get_boolean_false_async(custom_headers).value!
    end

    #
    # Get false Boolean value on path
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_boolean_false_async(custom_headers = nil)
      bool_path = false


      request_headers = {}
      path_template = 'paths/bool/false/{boolPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'boolPath' => bool_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '1000000' integer value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_int_one_million(custom_headers = nil)
      response = get_int_one_million_async(custom_headers).value!
      nil
    end

    #
    # Get '1000000' integer value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_int_one_million_with_http_info(custom_headers = nil)
      get_int_one_million_async(custom_headers).value!
    end

    #
    # Get '1000000' integer value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_int_one_million_async(custom_headers = nil)
      int_path = 1000000


      request_headers = {}
      path_template = 'paths/int/1000000/{intPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'intPath' => int_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '-1000000' integer value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_int_negative_one_million(custom_headers = nil)
      response = get_int_negative_one_million_async(custom_headers).value!
      nil
    end

    #
    # Get '-1000000' integer value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_int_negative_one_million_with_http_info(custom_headers = nil)
      get_int_negative_one_million_async(custom_headers).value!
    end

    #
    # Get '-1000000' integer value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_int_negative_one_million_async(custom_headers = nil)
      int_path = -1000000


      request_headers = {}
      path_template = 'paths/int/-1000000/{intPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'intPath' => int_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '10000000000' 64 bit integer value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_ten_billion(custom_headers = nil)
      response = get_ten_billion_async(custom_headers).value!
      nil
    end

    #
    # Get '10000000000' 64 bit integer value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_ten_billion_with_http_info(custom_headers = nil)
      get_ten_billion_async(custom_headers).value!
    end

    #
    # Get '10000000000' 64 bit integer value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_ten_billion_async(custom_headers = nil)
      long_path = 10000000000


      request_headers = {}
      path_template = 'paths/long/10000000000/{longPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'longPath' => long_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '-10000000000' 64 bit integer value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_negative_ten_billion(custom_headers = nil)
      response = get_negative_ten_billion_async(custom_headers).value!
      nil
    end

    #
    # Get '-10000000000' 64 bit integer value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_negative_ten_billion_with_http_info(custom_headers = nil)
      get_negative_ten_billion_async(custom_headers).value!
    end

    #
    # Get '-10000000000' 64 bit integer value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_negative_ten_billion_async(custom_headers = nil)
      long_path = -10000000000


      request_headers = {}
      path_template = 'paths/long/-10000000000/{longPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'longPath' => long_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '1.034E+20' numeric value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def float_scientific_positive(custom_headers = nil)
      response = float_scientific_positive_async(custom_headers).value!
      nil
    end

    #
    # Get '1.034E+20' numeric value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def float_scientific_positive_with_http_info(custom_headers = nil)
      float_scientific_positive_async(custom_headers).value!
    end

    #
    # Get '1.034E+20' numeric value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def float_scientific_positive_async(custom_headers = nil)
      float_path = 103400000000000000000


      request_headers = {}
      path_template = 'paths/float/1.034E+20/{floatPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'floatPath' => float_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '-1.034E-20' numeric value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def float_scientific_negative(custom_headers = nil)
      response = float_scientific_negative_async(custom_headers).value!
      nil
    end

    #
    # Get '-1.034E-20' numeric value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def float_scientific_negative_with_http_info(custom_headers = nil)
      float_scientific_negative_async(custom_headers).value!
    end

    #
    # Get '-1.034E-20' numeric value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def float_scientific_negative_async(custom_headers = nil)
      float_path = -1.034e-20


      request_headers = {}
      path_template = 'paths/float/-1.034E-20/{floatPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'floatPath' => float_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '9999999.999' numeric value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def double_decimal_positive(custom_headers = nil)
      response = double_decimal_positive_async(custom_headers).value!
      nil
    end

    #
    # Get '9999999.999' numeric value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def double_decimal_positive_with_http_info(custom_headers = nil)
      double_decimal_positive_async(custom_headers).value!
    end

    #
    # Get '9999999.999' numeric value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def double_decimal_positive_async(custom_headers = nil)
      double_path = 9999999.999


      request_headers = {}
      path_template = 'paths/double/9999999.999/{doublePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'doublePath' => double_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '-9999999.999' numeric value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def double_decimal_negative(custom_headers = nil)
      response = double_decimal_negative_async(custom_headers).value!
      nil
    end

    #
    # Get '-9999999.999' numeric value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def double_decimal_negative_with_http_info(custom_headers = nil)
      double_decimal_negative_async(custom_headers).value!
    end

    #
    # Get '-9999999.999' numeric value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def double_decimal_negative_async(custom_headers = nil)
      double_path = -9999999.999


      request_headers = {}
      path_template = 'paths/double/-9999999.999/{doublePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'doublePath' => double_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def string_unicode(custom_headers = nil)
      response = string_unicode_async(custom_headers).value!
      nil
    end

    #
    # Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def string_unicode_with_http_info(custom_headers = nil)
      string_unicode_async(custom_headers).value!
    end

    #
    # Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def string_unicode_async(custom_headers = nil)
      string_path = '啊齄丂狛狜隣郎隣兀﨩'


      request_headers = {}
      path_template = 'paths/string/unicode/{stringPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'stringPath' => string_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get 'begin!*'();:@ &=+$,/?#[]end
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def string_url_encoded(custom_headers = nil)
      response = string_url_encoded_async(custom_headers).value!
      nil
    end

    #
    # Get 'begin!*'();:@ &=+$,/?#[]end
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def string_url_encoded_with_http_info(custom_headers = nil)
      string_url_encoded_async(custom_headers).value!
    end

    #
    # Get 'begin!*'();:@ &=+$,/?#[]end
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def string_url_encoded_async(custom_headers = nil)
      string_path = 'begin!*\'();:@ &=+$,/?#[]end'


      request_headers = {}
      path_template = 'paths/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend/{stringPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'stringPath' => string_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get ''
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def string_empty(custom_headers = nil)
      response = string_empty_async(custom_headers).value!
      nil
    end

    #
    # Get ''
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def string_empty_with_http_info(custom_headers = nil)
      string_empty_async(custom_headers).value!
    end

    #
    # Get ''
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def string_empty_async(custom_headers = nil)
      string_path = ''


      request_headers = {}
      path_template = 'paths/string/empty/{stringPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'stringPath' => string_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get null (should throw)
    #
    # @param string_path [String] null string value
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def string_null(string_path, custom_headers = nil)
      response = string_null_async(string_path, custom_headers).value!
      nil
    end

    #
    # Get null (should throw)
    #
    # @param string_path [String] null string value
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def string_null_with_http_info(string_path, custom_headers = nil)
      string_null_async(string_path, custom_headers).value!
    end

    #
    # Get null (should throw)
    #
    # @param string_path [String] null string value
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def string_null_async(string_path, custom_headers = nil)
      fail ArgumentError, 'string_path is nil' if string_path.nil?


      request_headers = {}
      path_template = 'paths/string/null/{stringPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'stringPath' => string_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get using uri with 'green color' in path parameter
    #
    # @param enum_path [UriColor] send the value green. Possible values include:
    # 'red color', 'green color', 'blue color'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def enum_valid(enum_path, custom_headers = nil)
      response = enum_valid_async(enum_path, custom_headers).value!
      nil
    end

    #
    # Get using uri with 'green color' in path parameter
    #
    # @param enum_path [UriColor] send the value green. Possible values include:
    # 'red color', 'green color', 'blue color'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def enum_valid_with_http_info(enum_path, custom_headers = nil)
      enum_valid_async(enum_path, custom_headers).value!
    end

    #
    # Get using uri with 'green color' in path parameter
    #
    # @param enum_path [UriColor] send the value green. Possible values include:
    # 'red color', 'green color', 'blue color'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def enum_valid_async(enum_path, custom_headers = nil)
      fail ArgumentError, 'enum_path is nil' if enum_path.nil?


      request_headers = {}
      path_template = 'paths/enum/green%20color/{enumPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'enumPath' => enum_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get null (should throw on the client before the request is sent on wire)
    #
    # @param enum_path [UriColor] send null should throw. Possible values include:
    # 'red color', 'green color', 'blue color'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def enum_null(enum_path, custom_headers = nil)
      response = enum_null_async(enum_path, custom_headers).value!
      nil
    end

    #
    # Get null (should throw on the client before the request is sent on wire)
    #
    # @param enum_path [UriColor] send null should throw. Possible values include:
    # 'red color', 'green color', 'blue color'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def enum_null_with_http_info(enum_path, custom_headers = nil)
      enum_null_async(enum_path, custom_headers).value!
    end

    #
    # Get null (should throw on the client before the request is sent on wire)
    #
    # @param enum_path [UriColor] send null should throw. Possible values include:
    # 'red color', 'green color', 'blue color'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def enum_null_async(enum_path, custom_headers = nil)
      fail ArgumentError, 'enum_path is nil' if enum_path.nil?


      request_headers = {}
      path_template = 'paths/string/null/{enumPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'enumPath' => enum_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
    #
    # @param byte_path [Array<Integer>] '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8
    # encoded byte array
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def byte_multi_byte(byte_path, custom_headers = nil)
      response = byte_multi_byte_async(byte_path, custom_headers).value!
      nil
    end

    #
    # Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
    #
    # @param byte_path [Array<Integer>] '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8
    # encoded byte array
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def byte_multi_byte_with_http_info(byte_path, custom_headers = nil)
      byte_multi_byte_async(byte_path, custom_headers).value!
    end

    #
    # Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
    #
    # @param byte_path [Array<Integer>] '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8
    # encoded byte array
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def byte_multi_byte_async(byte_path, custom_headers = nil)
      fail ArgumentError, 'byte_path is nil' if byte_path.nil?


      request_headers = {}
      path_template = 'paths/byte/multibyte/{bytePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'bytePath' => byte_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '' as byte array
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def byte_empty(custom_headers = nil)
      response = byte_empty_async(custom_headers).value!
      nil
    end

    #
    # Get '' as byte array
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def byte_empty_with_http_info(custom_headers = nil)
      byte_empty_async(custom_headers).value!
    end

    #
    # Get '' as byte array
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def byte_empty_async(custom_headers = nil)
      byte_path = ''.bytes.pack('C*')


      request_headers = {}
      path_template = 'paths/byte/empty/{bytePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'bytePath' => byte_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get null as byte array (should throw)
    #
    # @param byte_path [Array<Integer>] null as byte array (should throw)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def byte_null(byte_path, custom_headers = nil)
      response = byte_null_async(byte_path, custom_headers).value!
      nil
    end

    #
    # Get null as byte array (should throw)
    #
    # @param byte_path [Array<Integer>] null as byte array (should throw)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def byte_null_with_http_info(byte_path, custom_headers = nil)
      byte_null_async(byte_path, custom_headers).value!
    end

    #
    # Get null as byte array (should throw)
    #
    # @param byte_path [Array<Integer>] null as byte array (should throw)
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def byte_null_async(byte_path, custom_headers = nil)
      fail ArgumentError, 'byte_path is nil' if byte_path.nil?


      request_headers = {}
      path_template = 'paths/byte/null/{bytePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'bytePath' => byte_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '2012-01-01' as date
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def date_valid(custom_headers = nil)
      response = date_valid_async(custom_headers).value!
      nil
    end

    #
    # Get '2012-01-01' as date
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def date_valid_with_http_info(custom_headers = nil)
      date_valid_async(custom_headers).value!
    end

    #
    # Get '2012-01-01' as date
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def date_valid_async(custom_headers = nil)
      date_path = Date.parse('2012-01-01')


      request_headers = {}
      path_template = 'paths/date/2012-01-01/{datePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'datePath' => date_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get null as date - this should throw or be unusable on the client side,
    # depending on date representation
    #
    # @param date_path [Date] null as date (should throw)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def date_null(date_path, custom_headers = nil)
      response = date_null_async(date_path, custom_headers).value!
      nil
    end

    #
    # Get null as date - this should throw or be unusable on the client side,
    # depending on date representation
    #
    # @param date_path [Date] null as date (should throw)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def date_null_with_http_info(date_path, custom_headers = nil)
      date_null_async(date_path, custom_headers).value!
    end

    #
    # Get null as date - this should throw or be unusable on the client side,
    # depending on date representation
    #
    # @param date_path [Date] null as date (should throw)
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def date_null_async(date_path, custom_headers = nil)
      fail ArgumentError, 'date_path is nil' if date_path.nil?


      request_headers = {}
      path_template = 'paths/date/null/{datePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'datePath' => date_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get '2012-01-01T01:01:01Z' as date-time
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def date_time_valid(custom_headers = nil)
      response = date_time_valid_async(custom_headers).value!
      nil
    end

    #
    # Get '2012-01-01T01:01:01Z' as date-time
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def date_time_valid_with_http_info(custom_headers = nil)
      date_time_valid_async(custom_headers).value!
    end

    #
    # Get '2012-01-01T01:01:01Z' as date-time
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def date_time_valid_async(custom_headers = nil)
      date_time_path = Date.parse('2012-01-01T01:01:01Z')


      request_headers = {}
      path_template = 'paths/datetime/2012-01-01T01%3A01%3A01Z/{dateTimePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'dateTimePath' => date_time_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get null as date-time, should be disallowed or throw depending on
    # representation of date-time
    #
    # @param date_time_path [DateTime] null as date-time
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def date_time_null(date_time_path, custom_headers = nil)
      response = date_time_null_async(date_time_path, custom_headers).value!
      nil
    end

    #
    # Get null as date-time, should be disallowed or throw depending on
    # representation of date-time
    #
    # @param date_time_path [DateTime] null as date-time
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def date_time_null_with_http_info(date_time_path, custom_headers = nil)
      date_time_null_async(date_time_path, custom_headers).value!
    end

    #
    # Get null as date-time, should be disallowed or throw depending on
    # representation of date-time
    #
    # @param date_time_path [DateTime] null as date-time
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def date_time_null_async(date_time_path, custom_headers = nil)
      fail ArgumentError, 'date_time_path is nil' if date_time_path.nil?


      request_headers = {}
      path_template = 'paths/datetime/null/{dateTimePath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'dateTimePath' => date_time_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get 'lorem' encoded value as 'bG9yZW0' (base64url)
    #
    # @param base64url_path base64url encoded value
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def base64url(base64url_path, custom_headers = nil)
      response = base64url_async(base64url_path, custom_headers).value!
      nil
    end

    #
    # Get 'lorem' encoded value as 'bG9yZW0' (base64url)
    #
    # @param base64url_path base64url encoded value
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def base64url_with_http_info(base64url_path, custom_headers = nil)
      base64url_async(base64url_path, custom_headers).value!
    end

    #
    # Get 'lorem' encoded value as 'bG9yZW0' (base64url)
    #
    # @param base64url_path base64url encoded value
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def base64url_async(base64url_path, custom_headers = nil)
      fail ArgumentError, 'base64url_path is nil' if base64url_path.nil?


      request_headers = {}
      path_template = 'paths/string/bG9yZW0/{base64UrlPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'base64UrlPath' => base64url_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null,
    # ''] using the csv-array format
    #
    # @param array_path [Array<String>] an array of string ['ArrayPath1',
    # 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array format
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def array_csv_in_path(array_path, custom_headers = nil)
      response = array_csv_in_path_async(array_path, custom_headers).value!
      nil
    end

    #
    # Get an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null,
    # ''] using the csv-array format
    #
    # @param array_path [Array<String>] an array of string ['ArrayPath1',
    # 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array format
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def array_csv_in_path_with_http_info(array_path, custom_headers = nil)
      array_csv_in_path_async(array_path, custom_headers).value!
    end

    #
    # Get an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null,
    # ''] using the csv-array format
    #
    # @param array_path [Array<String>] an array of string ['ArrayPath1',
    # 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the csv-array format
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def array_csv_in_path_async(array_path, custom_headers = nil)
      fail ArgumentError, 'array_path is nil' if array_path.nil?


      request_headers = {}
      path_template = 'paths/array/ArrayPath1%2cbegin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend%2c%2c/{arrayPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'arrayPath' => array_path.nil? ? nil : array_path.join(',')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
    #
    # @param unix_time_url_path Unix time encoded value
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def unix_time_url(unix_time_url_path, custom_headers = nil)
      response = unix_time_url_async(unix_time_url_path, custom_headers).value!
      nil
    end

    #
    # Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
    #
    # @param unix_time_url_path Unix time encoded value
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def unix_time_url_with_http_info(unix_time_url_path, custom_headers = nil)
      unix_time_url_async(unix_time_url_path, custom_headers).value!
    end

    #
    # Get the date 2016-04-13 encoded value as '1460505600' (Unix time)
    #
    # @param unix_time_url_path Unix time encoded value
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def unix_time_url_async(unix_time_url_path, custom_headers = nil)
      fail ArgumentError, 'unix_time_url_path is nil' if unix_time_url_path.nil?


      request_headers = {}
      path_template = 'paths/int/1460505600/{unixTimeUrlPath}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'unixTimeUrlPath' => unix_time_url_path},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
