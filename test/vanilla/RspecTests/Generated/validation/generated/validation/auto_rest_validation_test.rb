# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module ValidationModule
  #
  # A service client - single point of access to the REST API.
  #
  class AutoRestValidationTest < MsRest::ServiceClient
    include MsRest::Serialization

    # @return [String] the base URI of the service.
    attr_accessor :base_url

    # @return [String] Subscription ID.
    attr_accessor :subscription_id

    # @return [String] Required string following pattern \d{2}-\d{2}-\d{4}
    attr_accessor :api_version

    #
    # Creates initializes a new instance of the AutoRestValidationTest class.
    # @param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    # @param base_url [String] the base URI of the service.
    # @param options [Array] filters to be applied to the HTTP requests.
    #
    def initialize(credentials = nil, base_url = nil, options = nil)
      super(credentials, options)
      @base_url = base_url || 'http://localhost'

      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials) unless credentials.nil?
      @credentials = credentials

      add_telemetry
    end

    #
    # Makes a request and returns the body of the response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Hash{String=>String}] containing the body of the response.
    # Example:
    #
    #  request_content = "{'location':'westus','tags':{'tag1':'val1','tag2':'val2'}}"
    #  path = "/path"
    #  options = {
    #    body: request_content,
    #    query_params: {'api-version' => '2016-02-01'}
    #  }
    #  result = @client.make_request(:put, path, options)
    #
    def make_request(method, path, options = {})
      result = make_request_with_http_info(method, path, options)
      result.body unless result.nil?
    end

    #
    # Makes a request and returns the operation response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [MsRest::HttpOperationResponse] Operation response containing the request, response and status.
    #
    def make_request_with_http_info(method, path, options = {})
      result = make_request_async(method, path, options).value!
      result.body = result.response.body.to_s.empty? ? nil : JSON.load(result.response.body)
      result
    end

    #
    # Makes a request asynchronously.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def make_request_async(method, path, options = {})
      fail ArgumentError, 'method is nil' if method.nil?
      fail ArgumentError, 'path is nil' if path.nil?

      request_url = options[:base_url] || @base_url

      request_headers = @request_headers
      options.merge!({headers: request_headers.merge(options[:headers] || {})})
      options.merge!({credentials: @credentials}) unless @credentials.nil?

      super(request_url, method, path, options)
    end

    #
    # Validates input parameters on the method. See swagger for details.
    #
    # @param resource_group_name [String] Required string between 3 and 10 chars
    # with pattern [a-zA-Z0-9]+.
    # @param id [Integer] Required int multiple of 10 from 100 to 1000.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def validation_of_method_parameters(resource_group_name, id, custom_headers = nil)
      response = validation_of_method_parameters_async(resource_group_name, id, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Validates input parameters on the method. See swagger for details.
    #
    # @param resource_group_name [String] Required string between 3 and 10 chars
    # with pattern [a-zA-Z0-9]+.
    # @param id [Integer] Required int multiple of 10 from 100 to 1000.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def validation_of_method_parameters_with_http_info(resource_group_name, id, custom_headers = nil)
      validation_of_method_parameters_async(resource_group_name, id, custom_headers).value!
    end

    #
    # Validates input parameters on the method. See swagger for details.
    #
    # @param resource_group_name [String] Required string between 3 and 10 chars
    # with pattern [a-zA-Z0-9]+.
    # @param id [Integer] Required int multiple of 10 from 100 to 1000.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def validation_of_method_parameters_async(resource_group_name, id, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'id is nil' if id.nil?
      fail ArgumentError, 'api_version is nil' if api_version.nil?


      request_headers = {}
      path_template = 'fakepath/{subscriptionId}/{resourceGroupName}/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'resourceGroupName' => resource_group_name,'id' => id},
          query_params: {'apiVersion' => api_version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ValidationModule::Models::Product.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Validates body parameters on the method. See swagger for details.
    #
    # @param resource_group_name [String] Required string between 3 and 10 chars
    # with pattern [a-zA-Z0-9]+.
    # @param id [Integer] Required int multiple of 10 from 100 to 1000.
    # @param body [Product]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def validation_of_body(resource_group_name, id, body = nil, custom_headers = nil)
      response = validation_of_body_async(resource_group_name, id, body, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Validates body parameters on the method. See swagger for details.
    #
    # @param resource_group_name [String] Required string between 3 and 10 chars
    # with pattern [a-zA-Z0-9]+.
    # @param id [Integer] Required int multiple of 10 from 100 to 1000.
    # @param body [Product]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def validation_of_body_with_http_info(resource_group_name, id, body = nil, custom_headers = nil)
      validation_of_body_async(resource_group_name, id, body, custom_headers).value!
    end

    #
    # Validates body parameters on the method. See swagger for details.
    #
    # @param resource_group_name [String] Required string between 3 and 10 chars
    # with pattern [a-zA-Z0-9]+.
    # @param id [Integer] Required int multiple of 10 from 100 to 1000.
    # @param body [Product]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def validation_of_body_async(resource_group_name, id, body = nil, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'resource_group_name is nil' if resource_group_name.nil?
      fail ArgumentError, 'id is nil' if id.nil?
      fail ArgumentError, 'api_version is nil' if api_version.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ValidationModule::Models::Product.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'fakepath/{subscriptionId}/{resourceGroupName}/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscriptionId' => subscription_id,'resourceGroupName' => resource_group_name,'id' => id},
          query_params: {'apiVersion' => api_version},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ValidationModule::Models::Product.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def get_with_constant_in_path(custom_headers = nil)
      response = get_with_constant_in_path_async(custom_headers).value!
      nil
    end

    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_with_constant_in_path_with_http_info(custom_headers = nil)
      get_with_constant_in_path_async(custom_headers).value!
    end

    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_with_constant_in_path_async(custom_headers = nil)
      constant_param = 'constant'


      request_headers = {}
      path_template = 'validation/constantsInPath/{constantParam}/value'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'constantParam' => constant_param},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param body [Product]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Product] operation results.
    #
    def post_with_constant_in_body(body = nil, custom_headers = nil)
      response = post_with_constant_in_body_async(body, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param body [Product]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_with_constant_in_body_with_http_info(body = nil, custom_headers = nil)
      post_with_constant_in_body_async(body, custom_headers).value!
    end

    #
    # @param body [Product]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_with_constant_in_body_async(body = nil, custom_headers = nil)
      constant_param = 'constant'


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = ValidationModule::Models::Product.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'validation/constantsInPath/{constantParam}/value'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'constantParam' => constant_param},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = ValidationModule::Models::Product.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end


    private
    #
    # Adds telemetry information.
    #
    def add_telemetry
        sdk_information = 'validation'
        if defined? ValidationModule::VERSION
          sdk_information = "#{sdk_information}/#{ValidationModule::VERSION}"
        end
        add_user_agent_information(sdk_information)
    end
  end
end
