# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module DatetimeModule
  #
  # Test Infrastructure for AutoRest
  #
  class Datetime

    #
    # Creates and initializes a new instance of the Datetime class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [AutoRestDateTimeTestService] reference to the AutoRestDateTimeTestService
    attr_reader :client

    #
    # Get null datetime value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_null(custom_headers = nil)
      response = get_null_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get null datetime value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_null_with_http_info(custom_headers = nil)
      get_null_async(custom_headers).value!
    end

    #
    # Get null datetime value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_null_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/null'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get invalid datetime value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_invalid(custom_headers = nil)
      response = get_invalid_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get invalid datetime value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_invalid_with_http_info(custom_headers = nil)
      get_invalid_async(custom_headers).value!
    end

    #
    # Get invalid datetime value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_invalid_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/invalid'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get overflow datetime value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_overflow(custom_headers = nil)
      response = get_overflow_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get overflow datetime value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_overflow_with_http_info(custom_headers = nil)
      get_overflow_async(custom_headers).value!
    end

    #
    # Get overflow datetime value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_overflow_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/overflow'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get underflow datetime value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_underflow(custom_headers = nil)
      response = get_underflow_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get underflow datetime value
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_underflow_with_http_info(custom_headers = nil)
      get_underflow_async(custom_headers).value!
    end

    #
    # Get underflow datetime value
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_underflow_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/underflow'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put max datetime value 9999-12-31T23:59:59.9999999Z
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_utc_max_date_time(datetime_body, custom_headers = nil)
      response = put_utc_max_date_time_async(datetime_body, custom_headers).value!
      nil
    end

    #
    # Put max datetime value 9999-12-31T23:59:59.9999999Z
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_utc_max_date_time_with_http_info(datetime_body, custom_headers = nil)
      put_utc_max_date_time_async(datetime_body, custom_headers).value!
    end

    #
    # Put max datetime value 9999-12-31T23:59:59.9999999Z
    #
    # @param datetime_body [DateTime]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_utc_max_date_time_async(datetime_body, custom_headers = nil)
      fail ArgumentError, 'datetime_body is nil' if datetime_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'datetimeBody',
        type: {
          name: 'DateTime'
        }
      }
      request_content = @client.serialize(request_mapper,  datetime_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'datetime/max/utc'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get max datetime value 9999-12-31t23:59:59.9999999z
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_utc_lowercase_max_date_time(custom_headers = nil)
      response = get_utc_lowercase_max_date_time_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get max datetime value 9999-12-31t23:59:59.9999999z
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_utc_lowercase_max_date_time_with_http_info(custom_headers = nil)
      get_utc_lowercase_max_date_time_async(custom_headers).value!
    end

    #
    # Get max datetime value 9999-12-31t23:59:59.9999999z
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_utc_lowercase_max_date_time_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/max/utc/lowercase'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get max datetime value 9999-12-31T23:59:59.9999999Z
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_utc_uppercase_max_date_time(custom_headers = nil)
      response = get_utc_uppercase_max_date_time_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get max datetime value 9999-12-31T23:59:59.9999999Z
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_utc_uppercase_max_date_time_with_http_info(custom_headers = nil)
      get_utc_uppercase_max_date_time_async(custom_headers).value!
    end

    #
    # Get max datetime value 9999-12-31T23:59:59.9999999Z
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_utc_uppercase_max_date_time_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/max/utc/uppercase'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put max datetime value with positive numoffset
    # 9999-12-31t23:59:59.9999999+14:00
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_local_positive_offset_max_date_time(datetime_body, custom_headers = nil)
      response = put_local_positive_offset_max_date_time_async(datetime_body, custom_headers).value!
      nil
    end

    #
    # Put max datetime value with positive numoffset
    # 9999-12-31t23:59:59.9999999+14:00
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_local_positive_offset_max_date_time_with_http_info(datetime_body, custom_headers = nil)
      put_local_positive_offset_max_date_time_async(datetime_body, custom_headers).value!
    end

    #
    # Put max datetime value with positive numoffset
    # 9999-12-31t23:59:59.9999999+14:00
    #
    # @param datetime_body [DateTime]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_local_positive_offset_max_date_time_async(datetime_body, custom_headers = nil)
      fail ArgumentError, 'datetime_body is nil' if datetime_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'datetimeBody',
        type: {
          name: 'DateTime'
        }
      }
      request_content = @client.serialize(request_mapper,  datetime_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'datetime/max/localpositiveoffset'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31t23:59:59.9999999+14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_local_positive_offset_lowercase_max_date_time(custom_headers = nil)
      response = get_local_positive_offset_lowercase_max_date_time_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31t23:59:59.9999999+14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_local_positive_offset_lowercase_max_date_time_with_http_info(custom_headers = nil)
      get_local_positive_offset_lowercase_max_date_time_async(custom_headers).value!
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31t23:59:59.9999999+14:00
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_local_positive_offset_lowercase_max_date_time_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/max/localpositiveoffset/lowercase'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31T23:59:59.9999999+14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_local_positive_offset_uppercase_max_date_time(custom_headers = nil)
      response = get_local_positive_offset_uppercase_max_date_time_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31T23:59:59.9999999+14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_local_positive_offset_uppercase_max_date_time_with_http_info(custom_headers = nil)
      get_local_positive_offset_uppercase_max_date_time_async(custom_headers).value!
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31T23:59:59.9999999+14:00
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_local_positive_offset_uppercase_max_date_time_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/max/localpositiveoffset/uppercase'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put max datetime value with positive numoffset
    # 9999-12-31t23:59:59.9999999-14:00
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_local_negative_offset_max_date_time(datetime_body, custom_headers = nil)
      response = put_local_negative_offset_max_date_time_async(datetime_body, custom_headers).value!
      nil
    end

    #
    # Put max datetime value with positive numoffset
    # 9999-12-31t23:59:59.9999999-14:00
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_local_negative_offset_max_date_time_with_http_info(datetime_body, custom_headers = nil)
      put_local_negative_offset_max_date_time_async(datetime_body, custom_headers).value!
    end

    #
    # Put max datetime value with positive numoffset
    # 9999-12-31t23:59:59.9999999-14:00
    #
    # @param datetime_body [DateTime]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_local_negative_offset_max_date_time_async(datetime_body, custom_headers = nil)
      fail ArgumentError, 'datetime_body is nil' if datetime_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'datetimeBody',
        type: {
          name: 'DateTime'
        }
      }
      request_content = @client.serialize(request_mapper,  datetime_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'datetime/max/localnegativeoffset'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31T23:59:59.9999999-14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_local_negative_offset_uppercase_max_date_time(custom_headers = nil)
      response = get_local_negative_offset_uppercase_max_date_time_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31T23:59:59.9999999-14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_local_negative_offset_uppercase_max_date_time_with_http_info(custom_headers = nil)
      get_local_negative_offset_uppercase_max_date_time_async(custom_headers).value!
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31T23:59:59.9999999-14:00
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_local_negative_offset_uppercase_max_date_time_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/max/localnegativeoffset/uppercase'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31t23:59:59.9999999-14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_local_negative_offset_lowercase_max_date_time(custom_headers = nil)
      response = get_local_negative_offset_lowercase_max_date_time_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31t23:59:59.9999999-14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_local_negative_offset_lowercase_max_date_time_with_http_info(custom_headers = nil)
      get_local_negative_offset_lowercase_max_date_time_async(custom_headers).value!
    end

    #
    # Get max datetime value with positive num offset
    # 9999-12-31t23:59:59.9999999-14:00
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_local_negative_offset_lowercase_max_date_time_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/max/localnegativeoffset/lowercase'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put min datetime value 0001-01-01T00:00:00Z
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_utc_min_date_time(datetime_body, custom_headers = nil)
      response = put_utc_min_date_time_async(datetime_body, custom_headers).value!
      nil
    end

    #
    # Put min datetime value 0001-01-01T00:00:00Z
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_utc_min_date_time_with_http_info(datetime_body, custom_headers = nil)
      put_utc_min_date_time_async(datetime_body, custom_headers).value!
    end

    #
    # Put min datetime value 0001-01-01T00:00:00Z
    #
    # @param datetime_body [DateTime]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_utc_min_date_time_async(datetime_body, custom_headers = nil)
      fail ArgumentError, 'datetime_body is nil' if datetime_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'datetimeBody',
        type: {
          name: 'DateTime'
        }
      }
      request_content = @client.serialize(request_mapper,  datetime_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'datetime/min/utc'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get min datetime value 0001-01-01T00:00:00Z
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_utc_min_date_time(custom_headers = nil)
      response = get_utc_min_date_time_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get min datetime value 0001-01-01T00:00:00Z
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_utc_min_date_time_with_http_info(custom_headers = nil)
      get_utc_min_date_time_async(custom_headers).value!
    end

    #
    # Get min datetime value 0001-01-01T00:00:00Z
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_utc_min_date_time_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/min/utc'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put min datetime value 0001-01-01T00:00:00+14:00
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_local_positive_offset_min_date_time(datetime_body, custom_headers = nil)
      response = put_local_positive_offset_min_date_time_async(datetime_body, custom_headers).value!
      nil
    end

    #
    # Put min datetime value 0001-01-01T00:00:00+14:00
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_local_positive_offset_min_date_time_with_http_info(datetime_body, custom_headers = nil)
      put_local_positive_offset_min_date_time_async(datetime_body, custom_headers).value!
    end

    #
    # Put min datetime value 0001-01-01T00:00:00+14:00
    #
    # @param datetime_body [DateTime]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_local_positive_offset_min_date_time_async(datetime_body, custom_headers = nil)
      fail ArgumentError, 'datetime_body is nil' if datetime_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'datetimeBody',
        type: {
          name: 'DateTime'
        }
      }
      request_content = @client.serialize(request_mapper,  datetime_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'datetime/min/localpositiveoffset'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get min datetime value 0001-01-01T00:00:00+14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_local_positive_offset_min_date_time(custom_headers = nil)
      response = get_local_positive_offset_min_date_time_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get min datetime value 0001-01-01T00:00:00+14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_local_positive_offset_min_date_time_with_http_info(custom_headers = nil)
      get_local_positive_offset_min_date_time_async(custom_headers).value!
    end

    #
    # Get min datetime value 0001-01-01T00:00:00+14:00
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_local_positive_offset_min_date_time_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/min/localpositiveoffset'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Put min datetime value 0001-01-01T00:00:00-14:00
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def put_local_negative_offset_min_date_time(datetime_body, custom_headers = nil)
      response = put_local_negative_offset_min_date_time_async(datetime_body, custom_headers).value!
      nil
    end

    #
    # Put min datetime value 0001-01-01T00:00:00-14:00
    #
    # @param datetime_body [DateTime]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def put_local_negative_offset_min_date_time_with_http_info(datetime_body, custom_headers = nil)
      put_local_negative_offset_min_date_time_async(datetime_body, custom_headers).value!
    end

    #
    # Put min datetime value 0001-01-01T00:00:00-14:00
    #
    # @param datetime_body [DateTime]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def put_local_negative_offset_min_date_time_async(datetime_body, custom_headers = nil)
      fail ArgumentError, 'datetime_body is nil' if datetime_body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'datetimeBody',
        type: {
          name: 'DateTime'
        }
      }
      request_content = @client.serialize(request_mapper,  datetime_body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'datetime/min/localnegativeoffset'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Get min datetime value 0001-01-01T00:00:00-14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DateTime] operation results.
    #
    def get_local_negative_offset_min_date_time(custom_headers = nil)
      response = get_local_negative_offset_min_date_time_async(custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get min datetime value 0001-01-01T00:00:00-14:00
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_local_negative_offset_min_date_time_with_http_info(custom_headers = nil)
      get_local_negative_offset_min_date_time_async(custom_headers).value!
    end

    #
    # Get min datetime value 0001-01-01T00:00:00-14:00
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_local_negative_offset_min_date_time_async(custom_headers = nil)


      request_headers = {}
      path_template = 'datetime/min/localnegativeoffset'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'DateTime'
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end
